//
// GIPC_PDerivative.cuh
// GIPC
//
// created by Kemeng Huang on 2022/12/01
// Copyright (c) 2024 Kemeng Huang. All rights reserved.
//

#pragma once
#ifndef _GIPC_PDERIVATIVE_CUH_
#define _GIPC_PDERIVATIVE_CUH_
#include <cuda_runtime.h>
#include "math.h"
#include "gpu_eigen_libs.cuh"

void pFpx_peeV0(double d,
                double x11,
                double x12,
                double x13,
                double x21,
                double x22,
                double x23,
                double x31,
                double x32,
                double x33,
                double x41,
                double x42,
                double x43,
                double result[12][9])
{
    double t100;
    double t101;
    double t102;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t108;
    double t111;
    double t21;
    double t22;
    double t23;
    double t24;
    double t25;
    double t26;
    double t27;
    double t28;
    double t29;
    double t48;
    double t49;
    double t50;
    double t51;
    double t52;
    double t53;
    double t61;
    double t62;
    double t63;
    double t64;
    double t65;
    double t87;
    double t88;
    double t89;
    double t90;
    double t91;
    double t92;
    double t94;
    double t95;
    double t98;
    double t99;
    /* pFpx_pee */
    /*     RESULT = pFpx_pee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     27-Mar-2022 15:02:53 */
    t21           = -x21 + x11;
    t22           = -x22 + x12;
    t23           = -x23 + x13;
    t24           = -x31 + x11;
    t25           = -x32 + x12;
    t26           = -x33 + x13;
    t27           = -x41 + x31;
    t28           = -x42 + x32;
    t29           = -x43 + x33;
    t48           = t24 * t28;
    t49           = t25 * t27;
    t50           = t24 * t29;
    t51           = t26 * t27;
    t52           = t25 * t29;
    t53           = t26 * t28;
    t61           = t21 * t28 + -(t22 * t27);
    t62           = t21 * t29 + -(t23 * t27);
    t63           = t22 * t29 + -(t23 * t28);
    t64           = 1.0 / sqrt((t21 * t21 + t22 * t22) + t23 * t23);
    t65           = pow(t64, 3.0);
    t87           = t22 * t61 * 2.0 + t23 * t62 * 2.0;
    t88           = t21 * t62 * 2.0 + t22 * t63 * 2.0;
    t89           = t28 * t61 * 2.0 + t29 * t62 * 2.0;
    t90           = t27 * t62 * 2.0 + t28 * t63 * 2.0;
    t28           = (t61 * t61 + t62 * t62) + t63 * t63;
    t91           = t21 * t61 * 2.0 + -(t23 * t63 * 2.0);
    t92           = t27 * t61 * 2.0 + -(t29 * t63 * 2.0);
    t94           = 1.0 / t28;
    t28           = sqrt(t28);
    t98           = (t26 * t61 + t24 * t63) + -(t25 * t62);
    t95           = t94 * t94;
    t27           = 1.0 / t28;
    t99           = t98 * t98;
    t100          = (x11 * 2.0 + -(x21 * 2.0)) * t65 * t28 / 2.0;
    t101          = (x12 * 2.0 + -(x22 * 2.0)) * t65 * t28 / 2.0;
    t102          = (x13 * 2.0 + -(x23 * 2.0)) * t65 * t28 / 2.0;
    t103          = t64 * t87 * t27 / 2.0;
    t104          = t64 * t88 * t27 / 2.0;
    t105          = t64 * t89 * t27 / 2.0;
    t106          = t64 * t90 * t27 / 2.0;
    t107          = t64 * t91 * t27 / 2.0;
    t108          = t64 * t92 * t27 / 2.0;
    t111          = t87 * t95 * t99;
    t88           = t88 * t95 * t99;
    t29           = t89 * t95 * t99;
    t27           = t90 * t95 * t99;
    t87           = t91 * t95 * t99;
    t28           = t92 * t95 * t99;
    result[0][0]  = 0.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = 0.0;
    result[0][4]  = -t100 + t105;
    result[0][5]  = 0.0;
    result[0][6]  = 0.0;
    result[0][7]  = 0.0;
    t64           = t94 * t98;
    t65           = 1.0 / d * (1.0 / sqrt(t94 * t99));
    result[0][8]  = t65 * (t29 - t64 * ((-t52 + t53) + t63) * 2.0) * -0.5;
    result[1][0]  = 0.0;
    result[1][1]  = 0.0;
    result[1][2]  = 0.0;
    result[1][3]  = 0.0;
    result[1][4]  = -t101 - t108;
    result[1][5]  = 0.0;
    result[1][6]  = 0.0;
    result[1][7]  = 0.0;
    result[1][8]  = t65 * (t28 - t64 * ((-t50 + t51) + t62) * 2.0) / 2.0;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = 0.0;
    result[2][3]  = 0.0;
    result[2][4]  = -t102 - t106;
    result[2][5]  = 0.0;
    result[2][6]  = 0.0;
    result[2][7]  = 0.0;
    result[2][8]  = t65 * (t27 + t64 * ((-t48 + t49) + t61) * 2.0) / 2.0;
    result[3][0]  = 0.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = 0.0;
    result[3][4]  = t100 - t105;
    result[3][5]  = 0.0;
    result[3][6]  = 0.0;
    result[3][7]  = 0.0;
    result[3][8]  = t65 * (t29 + t64 * (t52 - t53) * 2.0) / 2.0;
    result[4][0]  = 0.0;
    result[4][1]  = 0.0;
    result[4][2]  = 0.0;
    result[4][3]  = 0.0;
    result[4][4]  = t101 + t108;
    result[4][5]  = 0.0;
    result[4][6]  = 0.0;
    result[4][7]  = 0.0;
    result[4][8]  = t65 * (t28 + t64 * (t50 - t51) * 2.0) * -0.5;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 0.0;
    result[5][3]  = 0.0;
    result[5][4]  = t102 + t106;
    result[5][5]  = 0.0;
    result[5][6]  = 0.0;
    result[5][7]  = 0.0;
    result[5][8]  = t65 * (t27 - t64 * (t48 - t49) * 2.0) * -0.5;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    result[6][3]  = 0.0;
    result[6][4]  = -t103;
    result[6][5]  = 0.0;
    result[6][6]  = 0.0;
    result[6][7]  = 0.0;
    t29           = t22 * t26 + -(t23 * t25);
    result[6][8]  = t65 * (t111 - t64 * (t29 + t63) * 2.0) / 2.0;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = 0.0;
    result[7][4]  = t107;
    result[7][5]  = 0.0;
    result[7][6]  = 0.0;
    result[7][7]  = 0.0;
    t27           = t21 * t26 + -(t23 * t24);
    result[7][8]  = t65 * (t87 - t64 * (t27 + t62) * 2.0) * -0.5;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = 0.0;
    result[8][4]  = t104;
    result[8][5]  = 0.0;
    result[8][6]  = 0.0;
    result[8][7]  = 0.0;
    t28           = t21 * t25 + -(t22 * t24);
    result[8][8]  = t65 * (t88 + t64 * (t28 + t61) * 2.0) * -0.5;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = t103;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = t65 * (t111 - t64 * t29 * 2.0) * -0.5;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = -t107;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = t65 * (t87 - t64 * t27 * 2.0) / 2.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = -t104;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = t65 * (t88 + t64 * t28 * 2.0) / 2.0;
}

void pFpx_ppeV0(double d,
                double x11,
                double x12,
                double x13,
                double x21,
                double x22,
                double x23,
                double x31,
                double x32,
                double x33,
                double x41,
                double x42,
                double x43,
                double result[12][9])
{
    double t110;
    double t112;
    double t115;
    double t116;
    double t117;
    double t118;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t14;
    double t30;
    double t31;
    double t32;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t38;
    double t39;
    double t40;
    double t41;
    double t74;
    double t75;
    double t76;
    double t77;
    double t78;
    double t79;
    double t80;
    double t81;
    double t82;
    double t83;
    /* pFpx_ppe */
    /*     RESULT = pFpx_ppe(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     27-Mar-2022 15:03:10 */
    t14          = 1.0 / d;
    t30          = -x21 + x11;
    t31          = -x22 + x12;
    t32          = -x23 + x13;
    t33          = -x31 + x11;
    t34          = -x32 + x12;
    t35          = -x33 + x13;
    t36          = -x41 + x11;
    t37          = -x31 + x21;
    t38          = -x42 + x12;
    t39          = -x32 + x22;
    t40          = -x43 + x13;
    t41          = -x33 + x23;
    t74          = 1.0 / ((t37 * t37 + t39 * t39) + t41 * t41);
    t76          = t30 * t34 + -(t31 * t33);
    t77          = t30 * t35 + -(t32 * t33);
    t78          = t31 * t35 + -(t32 * t34);
    t79          = t36 * t39 + -(t37 * t38);
    t80          = t36 * t41 + -(t37 * t40);
    t81          = t38 * t41 + -(t39 * t40);
    t82          = 1.0 / sqrt((t36 * t36 + t38 * t38) + t40 * t40);
    t75          = t74 * t74;
    t83          = pow(t82, 3.0);
    t110         = (t76 * t76 + t77 * t77) + t78 * t78;
    t112         = sqrt((t79 * t79 + t80 * t80) + t81 * t81);
    t116         = (x21 * 2.0 + -(x31 * 2.0)) * t75 * t110;
    t117         = (x22 * 2.0 + -(x32 * 2.0)) * t75 * t110;
    t118         = (x23 * 2.0 + -(x33 * 2.0)) * t75 * t110;
    t75          = 1.0 / t112;
    t115         = 1.0 / sqrt(t74 * t110);
    t121         = (x11 * 2.0 + -(x41 * 2.0)) * t83 * t112 / 2.0;
    t122         = (x12 * 2.0 + -(x42 * 2.0)) * t83 * t112 / 2.0;
    t123         = (x13 * 2.0 + -(x43 * 2.0)) * t83 * t112 / 2.0;
    t124         = t82 * (t38 * t79 * 2.0 + t40 * t80 * 2.0) * t75 / 2.0;
    t125         = t82 * (t39 * t79 * 2.0 + t41 * t80 * 2.0) * t75 / 2.0;
    t38          = t82 * (t36 * t80 * 2.0 + t38 * t81 * 2.0) * t75 / 2.0;
    t112         = t82 * (t37 * t80 * 2.0 + t39 * t81 * 2.0) * t75 / 2.0;
    t83          = t82 * (t36 * t79 * 2.0 + -(t40 * t81 * 2.0)) * t75 / 2.0;
    t75          = t82 * (t37 * t79 * 2.0 + -(t41 * t81 * 2.0)) * t75 / 2.0;
    result[0][0] = 0.0;
    result[0][1] = 0.0;
    result[0][2] = 0.0;
    result[0][3] = 0.0;
    result[0][4] = -t121 + t125;
    result[0][5] = 0.0;
    result[0][6] = 0.0;
    result[0][7] = 0.0;
    t110         = t14 * t74 * t115;
    result[0][8] = t110 * (t39 * t76 * 2.0 + t41 * t77 * 2.0) / 2.0;
    result[1][0] = 0.0;
    result[1][1] = 0.0;
    result[1][2] = 0.0;
    result[1][3] = 0.0;
    result[1][4] = -t122 - t75;
    result[1][5] = 0.0;
    result[1][6] = 0.0;
    result[1][7] = 0.0;
    result[1][8] = t110 * (t37 * t76 * 2.0 - t41 * t78 * 2.0) * -0.5;
    result[2][0] = 0.0;
    result[2][1] = 0.0;
    result[2][2] = 0.0;
    result[2][3] = 0.0;
    result[2][4] = -t123 - t112;
    result[2][5] = 0.0;
    result[2][6] = 0.0;
    result[2][7] = 0.0;
    result[2][8] = t110 * (t37 * t77 * 2.0 + t39 * t78 * 2.0) * -0.5;
    result[3][0] = 0.0;
    result[3][1] = 0.0;
    result[3][2] = 0.0;
    result[3][3] = 0.0;
    result[3][4] = -t124;
    result[3][5] = 0.0;
    result[3][6] = 0.0;
    result[3][7] = 0.0;
    t110         = t14 * t115;
    result[3][8] = t110 * (t116 + t74 * (t34 * t76 * 2.0 + t35 * t77 * 2.0)) * -0.5;
    result[4][0] = 0.0;
    result[4][1] = 0.0;
    result[4][2] = 0.0;
    result[4][3] = 0.0;
    result[4][4] = t83;
    result[4][5] = 0.0;
    result[4][6] = 0.0;
    result[4][7] = 0.0;
    result[4][8] = t110 * (t117 - t74 * (t33 * t76 * 2.0 - t35 * t78 * 2.0)) * -0.5;
    result[5][0] = 0.0;
    result[5][1] = 0.0;
    result[5][2] = 0.0;
    result[5][3] = 0.0;
    result[5][4] = t38;
    result[5][5] = 0.0;
    result[5][6] = 0.0;
    result[5][7] = 0.0;
    result[5][8] = t110 * (t118 - t74 * (t33 * t77 * 2.0 + t34 * t78 * 2.0)) * -0.5;
    result[6][0] = 0.0;
    result[6][1] = 0.0;
    result[6][2] = 0.0;
    result[6][3] = 0.0;
    result[6][4] = t124;
    result[6][5] = 0.0;
    result[6][6] = 0.0;
    result[6][7] = 0.0;
    result[6][8] = t110 * (t116 + t74 * (t31 * t76 * 2.0 + t32 * t77 * 2.0)) / 2.0;
    result[7][0] = 0.0;
    result[7][1] = 0.0;
    result[7][2] = 0.0;
    result[7][3] = 0.0;
    result[7][4] = -t83;
    result[7][5] = 0.0;
    result[7][6] = 0.0;
    result[7][7] = 0.0;
    result[7][8] = t110 * (t117 - t74 * (t30 * t76 * 2.0 - t32 * t78 * 2.0)) / 2.0;
    result[8][0] = 0.0;
    result[8][1] = 0.0;
    result[8][2] = 0.0;
    result[8][3] = 0.0;
    result[8][4] = -t38;
    result[8][5] = 0.0;
    result[8][6] = 0.0;
    result[8][7] = 0.0;
    result[8][8] = t110 * (t118 - t74 * (t30 * t77 * 2.0 + t31 * t78 * 2.0)) / 2.0;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = t121 - t125;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = 0.0;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = t122 + t75;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = 0.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = t123 + t112;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = 0.0;
}

void pFpx_pppV0(double d,
                double x11,
                double x12,
                double x13,
                double x21,
                double x22,
                double x23,
                double x31,
                double x32,
                double x33,
                double x41,
                double x42,
                double x43,
                double result[12][9])
{
    double t100;
    double t11;
    double t2;
    double t3;
    double t30;
    double t31;
    double t32;
    double t33;
    double t34;
    double t35;
    double t4;
    double t59;
    double t60;
    double t61;
    double t62;
    double t63;
    double t64;
    double t82;
    double t83;
    double t84;
    double t93;
    double t94;
    double t95;
    /* pFpx_ppp */
    /*     RESULT = pFpx_ppp(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     27-Mar-2022 15:03:23 */
    t2            = x11 * 2.0;
    t3            = x12 * 2.0;
    t4            = x13 * 2.0;
    t11           = 1.0 / d;
    t62           = -x21 + x11;
    t64           = -x22 + x12;
    t100          = -x23 + x13;
    t30           = -x31 + x11;
    t31           = -x32 + x12;
    t32           = -x33 + x13;
    t33           = -x41 + x21;
    t34           = -x42 + x22;
    t35           = -x43 + x23;
    t59           = t30 * t34 + -(t31 * t33);
    t60           = t30 * t35 + -(t32 * t33);
    t61           = t31 * t35 + -(t32 * t34);
    t62           = 1.0 / sqrt((t62 * t62 + t64 * t64) + t100 * t100);
    t63           = 1.0 / sqrt((t30 * t30 + t31 * t31) + t32 * t32);
    t64           = pow(t63, 3.0);
    t82           = t11 * (t2 + -(x21 * 2.0)) * t62 / 2.0;
    t83           = t11 * (t3 + -(x22 * 2.0)) * t62 / 2.0;
    t84           = t11 * (t4 + -(x23 * 2.0)) * t62 / 2.0;
    t62           = sqrt((t59 * t59 + t60 * t60) + t61 * t61);
    t93           = 1.0 / t62;
    t94           = (t2 + -(x31 * 2.0)) * t64 * t62 / 2.0;
    t95           = (t3 + -(x32 * 2.0)) * t64 * t62 / 2.0;
    t3            = (t4 + -(x33 * 2.0)) * t64 * t62 / 2.0;
    t4            = t63 * (t31 * t59 * 2.0 + t32 * t60 * 2.0) * t93 / 2.0;
    t11           = t63 * (t30 * t60 * 2.0 + t31 * t61 * 2.0) * t93 / 2.0;
    t2            = t63 * (t34 * t59 * 2.0 + t35 * t60 * 2.0) * t93 / 2.0;
    t100          = t63 * (t33 * t60 * 2.0 + t34 * t61 * 2.0) * t93 / 2.0;
    t64           = t63 * (t30 * t59 * 2.0 + -(t32 * t61 * 2.0)) * t93 / 2.0;
    t62           = t63 * (t33 * t59 * 2.0 + -(t35 * t61 * 2.0)) * t93 / 2.0;
    result[0][0]  = 0.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = 0.0;
    result[0][4]  = -t94 + t2;
    result[0][5]  = 0.0;
    result[0][6]  = 0.0;
    result[0][7]  = 0.0;
    result[0][8]  = t82;
    result[1][0]  = 0.0;
    result[1][1]  = 0.0;
    result[1][2]  = 0.0;
    result[1][3]  = 0.0;
    result[1][4]  = -t95 - t62;
    result[1][5]  = 0.0;
    result[1][6]  = 0.0;
    result[1][7]  = 0.0;
    result[1][8]  = t83;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = 0.0;
    result[2][3]  = 0.0;
    result[2][4]  = -t3 - t100;
    result[2][5]  = 0.0;
    result[2][6]  = 0.0;
    result[2][7]  = 0.0;
    result[2][8]  = t84;
    result[3][0]  = 0.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = 0.0;
    result[3][4]  = -t4;
    result[3][5]  = 0.0;
    result[3][6]  = 0.0;
    result[3][7]  = 0.0;
    result[3][8]  = -t82;
    result[4][0]  = 0.0;
    result[4][1]  = 0.0;
    result[4][2]  = 0.0;
    result[4][3]  = 0.0;
    result[4][4]  = t64;
    result[4][5]  = 0.0;
    result[4][6]  = 0.0;
    result[4][7]  = 0.0;
    result[4][8]  = -t83;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 0.0;
    result[5][3]  = 0.0;
    result[5][4]  = t11;
    result[5][5]  = 0.0;
    result[5][6]  = 0.0;
    result[5][7]  = 0.0;
    result[5][8]  = -t84;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    result[6][3]  = 0.0;
    result[6][4]  = t94 - t2;
    result[6][5]  = 0.0;
    result[6][6]  = 0.0;
    result[6][7]  = 0.0;
    result[6][8]  = 0.0;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = 0.0;
    result[7][4]  = t95 + t62;
    result[7][5]  = 0.0;
    result[7][6]  = 0.0;
    result[7][7]  = 0.0;
    result[7][8]  = 0.0;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = 0.0;
    result[8][4]  = t3 + t100;
    result[8][5]  = 0.0;
    result[8][6]  = 0.0;
    result[8][7]  = 0.0;
    result[8][8]  = 0.0;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = t4;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = 0.0;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = -t64;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = 0.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = -t11;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = 0.0;
}


void pFpx_peeV1(double d,
                double x11,
                double x12,
                double x13,
                double x21,
                double x22,
                double x23,
                double x31,
                double x32,
                double x33,
                double x41,
                double x42,
                double x43,
                double result[12][9])
{
    double t100;
    double t101;
    double t102;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t108;
    double t111;
    double t21;
    double t22;
    double t23;
    double t24;
    double t25;
    double t26;
    double t27;
    double t28;
    double t29;
    double t48;
    double t49;
    double t50;
    double t51;
    double t52;
    double t53;
    double t61;
    double t62;
    double t63;
    double t64;
    double t65;
    double t87;
    double t88;
    double t89;
    double t90;
    double t91;
    double t92;
    double t94;
    double t95;
    double t98;
    double t99;
    /* pFpx_pee */
    /*     RESULT = pFpx_pee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     25-Mar-2022 17:22:40 */
    t21           = -x21 + x11;
    t22           = -x22 + x12;
    t23           = -x23 + x13;
    t24           = -x31 + x11;
    t25           = -x32 + x12;
    t26           = -x33 + x13;
    t27           = -x41 + x31;
    t28           = -x42 + x32;
    t29           = -x43 + x33;
    t48           = t24 * t28;
    t49           = t25 * t27;
    t50           = t24 * t29;
    t51           = t26 * t27;
    t52           = t25 * t29;
    t53           = t26 * t28;
    t61           = t21 * t28 + -(t22 * t27);
    t62           = t21 * t29 + -(t23 * t27);
    t63           = t22 * t29 + -(t23 * t28);
    t64           = 1.0 / sqrt((t27 * t27 + t28 * t28) + t29 * t29);
    t65           = pow(t64, 3.0);
    t87           = t22 * t61 * 2.0 + t23 * t62 * 2.0;
    t88           = t21 * t62 * 2.0 + t22 * t63 * 2.0;
    t89           = t28 * t61 * 2.0 + t29 * t62 * 2.0;
    t90           = t27 * t62 * 2.0 + t28 * t63 * 2.0;
    t28           = (t61 * t61 + t62 * t62) + t63 * t63;
    t91           = t21 * t61 * 2.0 + -(t23 * t63 * 2.0);
    t92           = t27 * t61 * 2.0 + -(t29 * t63 * 2.0);
    t94           = 1.0 / t28;
    t28           = sqrt(t28);
    t98           = (t26 * t61 + t24 * t63) + -(t25 * t62);
    t95           = t94 * t94;
    t27           = 1.0 / t28;
    t99           = t98 * t98;
    t100          = (x31 * 2.0 + -(x41 * 2.0)) * t65 * t28 / 2.0;
    t101          = (x32 * 2.0 + -(x42 * 2.0)) * t65 * t28 / 2.0;
    t102          = (x33 * 2.0 + -(x43 * 2.0)) * t65 * t28 / 2.0;
    t103          = t64 * t87 * t27 / 2.0;
    t104          = t64 * t88 * t27 / 2.0;
    t105          = t64 * t89 * t27 / 2.0;
    t106          = t64 * t90 * t27 / 2.0;
    t107          = t64 * t91 * t27 / 2.0;
    t108          = t64 * t92 * t27 / 2.0;
    t111          = t87 * t95 * t99;
    t88           = t88 * t95 * t99;
    t29           = t89 * t95 * t99;
    t27           = t90 * t95 * t99;
    t87           = t91 * t95 * t99;
    t28           = t92 * t95 * t99;
    result[0][0]  = 0.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = 0.0;
    result[0][4]  = t105;
    result[0][5]  = 0.0;
    result[0][6]  = 0.0;
    result[0][7]  = 0.0;
    t64           = t94 * t98;
    t65           = 1.0 / d * (1.0 / sqrt(t94 * t99));
    result[0][8]  = t65 * (t29 - t64 * ((-t52 + t53) + t63) * 2.0) * -0.5;
    result[1][0]  = 0.0;
    result[1][1]  = 0.0;
    result[1][2]  = 0.0;
    result[1][3]  = 0.0;
    result[1][4]  = -t108;
    result[1][5]  = 0.0;
    result[1][6]  = 0.0;
    result[1][7]  = 0.0;
    result[1][8]  = t65 * (t28 - t64 * ((-t50 + t51) + t62) * 2.0) / 2.0;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = 0.0;
    result[2][3]  = 0.0;
    result[2][4]  = -t106;
    result[2][5]  = 0.0;
    result[2][6]  = 0.0;
    result[2][7]  = 0.0;
    result[2][8]  = t65 * (t27 + t64 * ((-t48 + t49) + t61) * 2.0) / 2.0;
    result[3][0]  = 0.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = 0.0;
    result[3][4]  = -t105;
    result[3][5]  = 0.0;
    result[3][6]  = 0.0;
    result[3][7]  = 0.0;
    result[3][8]  = t65 * (t29 + t64 * (t52 - t53) * 2.0) / 2.0;
    result[4][0]  = 0.0;
    result[4][1]  = 0.0;
    result[4][2]  = 0.0;
    result[4][3]  = 0.0;
    result[4][4]  = t108;
    result[4][5]  = 0.0;
    result[4][6]  = 0.0;
    result[4][7]  = 0.0;
    result[4][8]  = t65 * (t28 + t64 * (t50 - t51) * 2.0) * -0.5;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 0.0;
    result[5][3]  = 0.0;
    result[5][4]  = t106;
    result[5][5]  = 0.0;
    result[5][6]  = 0.0;
    result[5][7]  = 0.0;
    result[5][8]  = t65 * (t27 - t64 * (t48 - t49) * 2.0) * -0.5;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    result[6][3]  = 0.0;
    result[6][4]  = -t100 - t103;
    result[6][5]  = 0.0;
    result[6][6]  = 0.0;
    result[6][7]  = 0.0;
    t29           = t22 * t26 + -(t23 * t25);
    result[6][8]  = t65 * (t111 - t64 * (t29 + t63) * 2.0) / 2.0;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = 0.0;
    result[7][4]  = -t101 + t107;
    result[7][5]  = 0.0;
    result[7][6]  = 0.0;
    result[7][7]  = 0.0;
    t27           = t21 * t26 + -(t23 * t24);
    result[7][8]  = t65 * (t87 - t64 * (t27 + t62) * 2.0) * -0.5;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = 0.0;
    result[8][4]  = -t102 + t104;
    result[8][5]  = 0.0;
    result[8][6]  = 0.0;
    result[8][7]  = 0.0;
    t28           = t21 * t25 + -(t22 * t24);
    result[8][8]  = t65 * (t88 + t64 * (t28 + t61) * 2.0) * -0.5;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = t100 + t103;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = t65 * (t111 - t64 * t29 * 2.0) * -0.5;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = t101 - t107;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = t65 * (t87 - t64 * t27 * 2.0) / 2.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = t102 - t104;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = t65 * (t88 + t64 * t28 * 2.0) / 2.0;
}

void pFpx_pppV1(double d,
                double x11,
                double x12,
                double x13,
                double x21,
                double x22,
                double x23,
                double x31,
                double x32,
                double x33,
                double x41,
                double x42,
                double x43,
                double result[12][9])
{
    double t100;
    double t11;
    double t30;
    double t31;
    double t32;
    double t33;
    double t34;
    double t35;
    double t5;
    double t59;
    double t6;
    double t60;
    double t61;
    double t62;
    double t63;
    double t64;
    double t7;
    double t82;
    double t83;
    double t84;
    double t93;
    double t94;
    double t95;
    /* pFpx_ppp */
    /*     RESULT = pFpx_ppp(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     25-Mar-2022 17:47:49 */
    t5            = x21 * 2.0;
    t6            = x22 * 2.0;
    t7            = x23 * 2.0;
    t11           = 1.0 / d;
    t62           = -x21 + x11;
    t64           = -x22 + x12;
    t100          = -x23 + x13;
    t30           = -x31 + x11;
    t31           = -x32 + x12;
    t32           = -x33 + x13;
    t33           = -x41 + x21;
    t34           = -x42 + x22;
    t35           = -x43 + x23;
    t59           = t30 * t34 + -(t31 * t33);
    t60           = t30 * t35 + -(t32 * t33);
    t61           = t31 * t35 + -(t32 * t34);
    t62           = 1.0 / sqrt((t62 * t62 + t64 * t64) + t100 * t100);
    t63           = 1.0 / sqrt((t33 * t33 + t34 * t34) + t35 * t35);
    t64           = pow(t63, 3.0);
    t82           = t11 * (x11 * 2.0 + -t5) * t62 / 2.0;
    t83           = t11 * (x12 * 2.0 + -t6) * t62 / 2.0;
    t84           = t11 * (x13 * 2.0 + -t7) * t62 / 2.0;
    t62           = sqrt((t59 * t59 + t60 * t60) + t61 * t61);
    t93           = 1.0 / t62;
    t94           = (t5 + -(x41 * 2.0)) * t64 * t62 / 2.0;
    t95           = (t6 + -(x42 * 2.0)) * t64 * t62 / 2.0;
    t6            = (t7 + -(x43 * 2.0)) * t64 * t62 / 2.0;
    t7            = t63 * (t31 * t59 * 2.0 + t32 * t60 * 2.0) * t93 / 2.0;
    t11           = t63 * (t30 * t60 * 2.0 + t31 * t61 * 2.0) * t93 / 2.0;
    t5            = t63 * (t34 * t59 * 2.0 + t35 * t60 * 2.0) * t93 / 2.0;
    t100          = t63 * (t33 * t60 * 2.0 + t34 * t61 * 2.0) * t93 / 2.0;
    t64           = t63 * (t30 * t59 * 2.0 + -(t32 * t61 * 2.0)) * t93 / 2.0;
    t62           = t63 * (t33 * t59 * 2.0 + -(t35 * t61 * 2.0)) * t93 / 2.0;
    result[0][0]  = 0.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = 0.0;
    result[0][4]  = t5;
    result[0][5]  = 0.0;
    result[0][6]  = 0.0;
    result[0][7]  = 0.0;
    result[0][8]  = t82;
    result[1][0]  = 0.0;
    result[1][1]  = 0.0;
    result[1][2]  = 0.0;
    result[1][3]  = 0.0;
    result[1][4]  = -t62;
    result[1][5]  = 0.0;
    result[1][6]  = 0.0;
    result[1][7]  = 0.0;
    result[1][8]  = t83;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = 0.0;
    result[2][3]  = 0.0;
    result[2][4]  = -t100;
    result[2][5]  = 0.0;
    result[2][6]  = 0.0;
    result[2][7]  = 0.0;
    result[2][8]  = t84;
    result[3][0]  = 0.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = 0.0;
    result[3][4]  = -t94 - t7;
    result[3][5]  = 0.0;
    result[3][6]  = 0.0;
    result[3][7]  = 0.0;
    result[3][8]  = -t82;
    result[4][0]  = 0.0;
    result[4][1]  = 0.0;
    result[4][2]  = 0.0;
    result[4][3]  = 0.0;
    result[4][4]  = -t95 + t64;
    result[4][5]  = 0.0;
    result[4][6]  = 0.0;
    result[4][7]  = 0.0;
    result[4][8]  = -t83;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 0.0;
    result[5][3]  = 0.0;
    result[5][4]  = -t6 + t11;
    result[5][5]  = 0.0;
    result[5][6]  = 0.0;
    result[5][7]  = 0.0;
    result[5][8]  = -t84;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    result[6][3]  = 0.0;
    result[6][4]  = -t5;
    result[6][5]  = -t5;
    result[6][6]  = -t5;
    result[6][7]  = -t5;
    result[6][8]  = -t5;
    result[7][0]  = -t5;
    result[7][1]  = -t5;
    result[7][2]  = -t5;
    result[7][3]  = -t5;
    result[7][4]  = t62;
    result[7][5]  = -t5;
    result[7][6]  = -t5;
    result[7][7]  = -t5;
    result[7][8]  = -t5;
    result[8][0]  = -t5;
    result[8][1]  = -t5;
    result[8][2]  = -t5;
    result[8][3]  = -t5;
    result[8][4]  = t100;
    result[8][5]  = -t5;
    result[8][6]  = -t5;
    result[8][7]  = -t5;
    result[8][8]  = -t5;
    result[9][0]  = -t5;
    result[9][1]  = -t5;
    result[9][2]  = -t5;
    result[9][3]  = -t5;
    result[9][4]  = t94 + t7;
    result[9][5]  = -t5;
    result[9][6]  = -t5;
    result[9][7]  = -t5;
    result[9][8]  = -t5;
    result[10][0] = -t5;
    result[10][1] = -t5;
    result[10][2] = -t5;
    result[10][3] = -t5;
    result[10][4] = t95 - t64;
    result[10][5] = -t5;
    result[10][6] = -t5;
    result[10][7] = -t5;
    result[10][8] = -t5;
    result[11][0] = -t5;
    result[11][1] = -t5;
    result[11][2] = -t5;
    result[11][3] = -t5;
    result[11][4] = t6 - t11;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = 0.0;
}

void pFpx_ppeV1(double d,
                double x11,
                double x12,
                double x13,
                double x21,
                double x22,
                double x23,
                double x31,
                double x32,
                double x33,
                double x41,
                double x42,
                double x43,
                double result[12][9])
{
    double t100;
    double t101;
    double t102;
    double t105;
    double t106;
    double t109;
    double t21;
    double t22;
    double t23;
    double t24;
    double t25;
    double t26;
    double t27;
    double t28;
    double t29;
    double t30;
    double t31;
    double t32;
    double t33;
    double t34;
    double t35;
    double t57;
    double t58;
    double t60;
    double t61;
    double t62;
    double t63;
    double t64;
    double t65;
    double t66;
    double t67;
    double t8;
    double t94;
    double t96;
    double t99;
    /* pFpx_ppe */
    /*     RESULT = pFpx_ppe(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     25-Mar-2022 17:30:49 */
    t8           = 1.0 / d;
    t21          = -x21 + x11;
    t22          = -x22 + x12;
    t23          = -x23 + x13;
    t24          = -x31 + x11;
    t25          = -x32 + x12;
    t26          = -x33 + x13;
    t27          = -x41 + x11;
    t28          = -x31 + x21;
    t29          = -x42 + x12;
    t30          = -x32 + x22;
    t31          = -x43 + x13;
    t32          = -x33 + x23;
    t33          = x21 * 2.0 + -(x31 * 2.0);
    t34          = x22 * 2.0 + -(x32 * 2.0);
    t35          = x23 * 2.0 + -(x33 * 2.0);
    t57          = (t28 * t28 + t30 * t30) + t32 * t32;
    t58          = 1.0 / t57;
    t60          = t21 * t25 + -(t22 * t24);
    t61          = t21 * t26 + -(t23 * t24);
    t62          = t22 * t26 + -(t23 * t25);
    t63          = t27 * t30 + -(t28 * t29);
    t64          = t27 * t32 + -(t28 * t31);
    t65          = t29 * t32 + -(t30 * t31);
    t66          = 1.0 / sqrt(t57);
    t57          = t58 * t58;
    t67          = pow(t66, 3.0);
    t94          = (t60 * t60 + t61 * t61) + t62 * t62;
    t96          = sqrt((t63 * t63 + t64 * t64) + t65 * t65);
    t100         = t33 * t57 * t94;
    t101         = t34 * t57 * t94;
    t102         = t35 * t57 * t94;
    t57          = 1.0 / t96;
    t99          = 1.0 / sqrt(t58 * t94);
    t105         = t33 * t67 * t96 / 2.0;
    t106         = t34 * t67 * t96 / 2.0;
    t96          = t35 * t67 * t96 / 2.0;
    t35          = t66 * (t29 * t63 * 2.0 + t31 * t64 * 2.0) * t57 / 2.0;
    t109         = t66 * (t30 * t63 * 2.0 + t32 * t64 * 2.0) * t57 / 2.0;
    t67          = t66 * (t27 * t64 * 2.0 + t29 * t65 * 2.0) * t57 / 2.0;
    t34          = t66 * (t28 * t64 * 2.0 + t30 * t65 * 2.0) * t57 / 2.0;
    t33          = t66 * (t27 * t63 * 2.0 + -(t31 * t65 * 2.0)) * t57 / 2.0;
    t57          = t66 * (t28 * t63 * 2.0 + -(t32 * t65 * 2.0)) * t57 / 2.0;
    result[0][0] = 0.0;
    result[0][1] = 0.0;
    result[0][2] = 0.0;
    result[0][3] = 0.0;
    result[0][4] = t109;
    result[0][5] = 0.0;
    result[0][6] = 0.0;
    result[0][7] = 0.0;
    t94          = t8 * t58 * t99;
    result[0][8] = t94 * (t30 * t60 * 2.0 + t32 * t61 * 2.0) / 2.0;
    result[1][0] = 0.0;
    result[1][1] = 0.0;
    result[1][2] = 0.0;
    result[1][3] = 0.0;
    result[1][4] = -t57;
    result[1][5] = 0.0;
    result[1][6] = 0.0;
    result[1][7] = 0.0;
    result[1][8] = t94 * (t28 * t60 * 2.0 - t32 * t62 * 2.0) * -0.5;
    result[2][0] = 0.0;
    result[2][1] = 0.0;
    result[2][2] = 0.0;
    result[2][3] = 0.0;
    result[2][4] = -t34;
    result[2][5] = 0.0;
    result[2][6] = 0.0;
    result[2][7] = 0.0;
    result[2][8] = t94 * (t28 * t61 * 2.0 + t30 * t62 * 2.0) * -0.5;
    result[3][0] = 0.0;
    result[3][1] = 0.0;
    result[3][2] = 0.0;
    result[3][3] = 0.0;
    result[3][4] = -t105 - t35;
    result[3][5] = 0.0;
    result[3][6] = 0.0;
    result[3][7] = 0.0;
    t94          = t8 * t99;
    result[3][8] = t94 * (t100 + t58 * (t25 * t60 * 2.0 + t26 * t61 * 2.0)) * -0.5;
    result[4][0] = 0.0;
    result[4][1] = 0.0;
    result[4][2] = 0.0;
    result[4][3] = 0.0;
    result[4][4] = -t106 + t33;
    result[4][5] = 0.0;
    result[4][6] = 0.0;
    result[4][7] = 0.0;
    result[4][8] = t94 * (t101 - t58 * (t24 * t60 * 2.0 - t26 * t62 * 2.0)) * -0.5;
    result[5][0] = 0.0;
    result[5][1] = 0.0;
    result[5][2] = 0.0;
    result[5][3] = 0.0;
    result[5][4] = -t96 + t67;
    result[5][5] = 0.0;
    result[5][6] = 0.0;
    result[5][7] = 0.0;
    result[5][8] = t94 * (t102 - t58 * (t24 * t61 * 2.0 + t25 * t62 * 2.0)) * -0.5;
    result[6][0] = 0.0;
    result[6][1] = 0.0;
    result[6][2] = 0.0;
    result[6][3] = 0.0;
    result[6][4] = t105 + t35;
    result[6][5] = 0.0;
    result[6][6] = 0.0;
    result[6][7] = 0.0;
    result[6][8] = t94 * (t100 + t58 * (t22 * t60 * 2.0 + t23 * t61 * 2.0)) / 2.0;
    result[7][0] = 0.0;
    result[7][1] = 0.0;
    result[7][2] = 0.0;
    result[7][3] = 0.0;
    result[7][4] = t106 - t33;
    result[7][5] = 0.0;
    result[7][6] = 0.0;
    result[7][7] = 0.0;
    result[7][8] = t94 * (t101 - t58 * (t21 * t60 * 2.0 - t23 * t62 * 2.0)) / 2.0;
    result[8][0] = 0.0;
    result[8][1] = 0.0;
    result[8][2] = 0.0;
    result[8][3] = 0.0;
    result[8][4] = t96 - t67;
    result[8][5] = 0.0;
    result[8][6] = 0.0;
    result[8][7] = 0.0;
    result[8][8] = t94 * (t102 - t58 * (t21 * t61 * 2.0 + t22 * t62 * 2.0)) / 2.0;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = -t109;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = 0.0;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = t57;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = 0.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = t34;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = 0.0;
}

__host__ __device__ void pFpx_pppV0V1(double d,
                                      double x11,
                                      double x12,
                                      double x13,
                                      double x21,
                                      double x22,
                                      double x23,
                                      double x31,
                                      double x32,
                                      double x33,
                                      double x41,
                                      double x42,
                                      double x43,
                                      double result[12][9])
{
    double t24;
    double t25;
    double t26;
    double t27;
    double t28;
    double t29;
    double t46;
    double t47;
    double t48;
    double t49;
    double t67;
    double t68;
    double t69;
    double t78;
    double t8;
    double t81;
    double t82;
    /* pFpx_ppp */
    /*     RESULT = pFpx_ppp(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     20-Mar-2022 16:56:25 */
    t8            = 1.0 / d;
    t49           = -x21 + x11;
    t82           = -x22 + x12;
    t81           = -x23 + x13;
    t24           = -x31 + x11;
    t25           = -x32 + x12;
    t26           = -x33 + x13;
    t27           = -x41 + x21;
    t28           = -x42 + x22;
    t29           = -x43 + x23;
    t46           = t24 * t28 + -(t25 * t27);
    t47           = t24 * t29 + -(t26 * t27);
    t48           = t25 * t29 + -(t26 * t28);
    t49           = 1.0 / sqrt((t49 * t49 + t82 * t82) + t81 * t81);
    t67           = t8 * (x11 * 2.0 + -(x21 * 2.0)) * t49 / 2.0;
    t68           = t8 * (x12 * 2.0 + -(x22 * 2.0)) * t49 / 2.0;
    t69           = t8 * (x13 * 2.0 + -(x23 * 2.0)) * t49 / 2.0;
    t49           = 1.0 / sqrt((t46 * t46 + t47 * t47) + t48 * t48);
    t78           = (t25 * t46 * 2.0 + t26 * t47 * 2.0) * t49 / 2.0;
    t8            = (t24 * t47 * 2.0 + t25 * t48 * 2.0) * t49 / 2.0;
    t25           = (t28 * t46 * 2.0 + t29 * t47 * 2.0) * t49 / 2.0;
    t81           = (t27 * t47 * 2.0 + t28 * t48 * 2.0) * t49 / 2.0;
    t82           = (t24 * t46 * 2.0 + -(t26 * t48 * 2.0)) * t49 / 2.0;
    t49           = (t27 * t46 * 2.0 + -(t29 * t48 * 2.0)) * t49 / 2.0;
    result[0][0]  = 0.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = 0.0;
    result[0][4]  = t25;
    result[0][5]  = 0.0;
    result[0][6]  = 0.0;
    result[0][7]  = 0.0;
    result[0][8]  = t67;
    result[1][0]  = 0.0;
    result[1][1]  = 0.0;
    result[1][2]  = 0.0;
    result[1][3]  = 0.0;
    result[1][4]  = -t49;
    result[1][5]  = 0.0;
    result[1][6]  = 0.0;
    result[1][7]  = 0.0;
    result[1][8]  = t68;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = 0.0;
    result[2][3]  = 0.0;
    result[2][4]  = -t81;
    result[2][5]  = 0.0;
    result[2][6]  = 0.0;
    result[2][7]  = 0.0;
    result[2][8]  = t69;
    result[3][0]  = 0.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = 0.0;
    result[3][4]  = -t78;
    result[3][5]  = 0.0;
    result[3][6]  = 0.0;
    result[3][7]  = 0.0;
    result[3][8]  = -t67;
    result[4][0]  = 0.0;
    result[4][1]  = 0.0;
    result[4][2]  = 0.0;
    result[4][3]  = 0.0;
    result[4][4]  = t82;
    result[4][5]  = 0.0;
    result[4][6]  = 0.0;
    result[4][7]  = 0.0;
    result[4][8]  = -t68;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 0.0;
    result[5][3]  = 0.0;
    result[5][4]  = t8;
    result[5][5]  = 0.0;
    result[5][6]  = 0.0;
    result[5][7]  = 0.0;
    result[5][8]  = -t69;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    result[6][3]  = 0.0;
    result[6][4]  = -t25;
    result[6][5]  = 0.0;
    result[6][6]  = 0.0;
    result[6][7]  = 0.0;
    result[6][8]  = 0.0;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = 0.0;
    result[7][4]  = t49;
    result[7][5]  = 0.0;
    result[7][6]  = 0.0;
    result[7][7]  = 0.0;
    result[7][8]  = 0.0;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = 0.0;
    result[8][4]  = t81;
    result[8][5]  = 0.0;
    result[8][6]  = 0.0;
    result[8][7]  = 0.0;
    result[8][8]  = 0.0;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = t78;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = 0.0;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = -t82;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = 0.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = -t8;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = 0.0;
}

__host__ __device__ void pFpx_ppeV0V1(double d,
                                      double x11,
                                      double x12,
                                      double x13,
                                      double x21,
                                      double x22,
                                      double x23,
                                      double x31,
                                      double x32,
                                      double x33,
                                      double x41,
                                      double x42,
                                      double x43,
                                      double result[12][9])
{
    double t102;
    double t103;
    double t104;
    double t21;
    double t22;
    double t23;
    double t24;
    double t25;
    double t26;
    double t27;
    double t28;
    double t29;
    double t30;
    double t31;
    double t32;
    double t58;
    double t59;
    double t60;
    double t61;
    double t62;
    double t63;
    double t64;
    double t65;
    double t8;
    double t92;
    double t94;
    double t96;
    double t97;
    double t98;
    double t99;
    /* pFpx_ppe */
    /*     RESULT = pFpx_ppe(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     20-Mar-2022 15:07:54 */
    t8           = 1.0 / d;
    t21          = -x21 + x11;
    t22          = -x22 + x12;
    t23          = -x23 + x13;
    t24          = -x31 + x11;
    t25          = -x32 + x12;
    t26          = -x33 + x13;
    t27          = -x41 + x11;
    t28          = -x31 + x21;
    t29          = -x42 + x12;
    t30          = -x32 + x22;
    t31          = -x43 + x13;
    t32          = -x33 + x23;
    t58          = 1.0 / ((t28 * t28 + t30 * t30) + t32 * t32);
    t60          = t21 * t25 + -(t22 * t24);
    t61          = t21 * t26 + -(t23 * t24);
    t62          = t22 * t26 + -(t23 * t25);
    t63          = t27 * t30 + -(t28 * t29);
    t64          = t27 * t32 + -(t28 * t31);
    t65          = t29 * t32 + -(t30 * t31);
    t59          = t58 * t58;
    t92          = (t60 * t60 + t61 * t61) + t62 * t62;
    t94          = 1.0 / sqrt((t63 * t63 + t64 * t64) + t65 * t65);
    t97          = (x21 * 2.0 + -(x31 * 2.0)) * t59 * t92;
    t98          = (x22 * 2.0 + -(x32 * 2.0)) * t59 * t92;
    t99          = (x23 * 2.0 + -(x33 * 2.0)) * t59 * t92;
    t96          = 1.0 / sqrt(t58 * t92);
    t102         = (t29 * t63 * 2.0 + t31 * t64 * 2.0) * t94 / 2.0;
    t103         = (t30 * t63 * 2.0 + t32 * t64 * 2.0) * t94 / 2.0;
    t104         = (t27 * t64 * 2.0 + t29 * t65 * 2.0) * t94 / 2.0;
    t64          = (t28 * t64 * 2.0 + t30 * t65 * 2.0) * t94 / 2.0;
    t29          = (t27 * t63 * 2.0 + -(t31 * t65 * 2.0)) * t94 / 2.0;
    t59          = (t28 * t63 * 2.0 + -(t32 * t65 * 2.0)) * t94 / 2.0;
    result[0][0] = 0.0;
    result[0][1] = 0.0;
    result[0][2] = 0.0;
    result[0][3] = 0.0;
    result[0][4] = t103;
    result[0][5] = 0.0;
    result[0][6] = 0.0;
    result[0][7] = 0.0;
    t92          = t8 * t58 * t96;
    result[0][8] = t92 * (t30 * t60 * 2.0 + t32 * t61 * 2.0) / 2.0;
    result[1][0] = 0.0;
    result[1][1] = 0.0;
    result[1][2] = 0.0;
    result[1][3] = 0.0;
    result[1][4] = -t59;
    result[1][5] = 0.0;
    result[1][6] = 0.0;
    result[1][7] = 0.0;
    result[1][8] = t92 * (t28 * t60 * 2.0 - t32 * t62 * 2.0) * -0.5;
    result[2][0] = 0.0;
    result[2][1] = 0.0;
    result[2][2] = 0.0;
    result[2][3] = 0.0;
    result[2][4] = -t64;
    result[2][5] = 0.0;
    result[2][6] = 0.0;
    result[2][7] = 0.0;
    result[2][8] = t92 * (t28 * t61 * 2.0 + t30 * t62 * 2.0) * -0.5;
    result[3][0] = 0.0;
    result[3][1] = 0.0;
    result[3][2] = 0.0;
    result[3][3] = 0.0;
    result[3][4] = -t102;
    result[3][5] = 0.0;
    result[3][6] = 0.0;
    result[3][7] = 0.0;
    t92          = t8 * t96;
    result[3][8] = t92 * (t97 + t58 * (t25 * t60 * 2.0 + t26 * t61 * 2.0)) * -0.5;
    result[4][0] = 0.0;
    result[4][1] = 0.0;
    result[4][2] = 0.0;
    result[4][3] = 0.0;
    result[4][4] = t29;
    result[4][5] = 0.0;
    result[4][6] = 0.0;
    result[4][7] = 0.0;
    result[4][8] = t92 * (t98 - t58 * (t24 * t60 * 2.0 - t26 * t62 * 2.0)) * -0.5;
    result[5][0] = 0.0;
    result[5][1] = 0.0;
    result[5][2] = 0.0;
    result[5][3] = 0.0;
    result[5][4] = t104;
    result[5][5] = 0.0;
    result[5][6] = 0.0;
    result[5][7] = 0.0;
    result[5][8] = t92 * (t99 - t58 * (t24 * t61 * 2.0 + t25 * t62 * 2.0)) * -0.5;
    result[6][0] = 0.0;
    result[6][1] = 0.0;
    result[6][2] = 0.0;
    result[6][3] = 0.0;
    result[6][4] = t102;
    result[6][5] = 0.0;
    result[6][6] = 0.0;
    result[6][7] = 0.0;
    result[6][8] = t92 * (t97 + t58 * (t22 * t60 * 2.0 + t23 * t61 * 2.0)) / 2.0;
    result[7][0] = 0.0;
    result[7][1] = 0.0;
    result[7][2] = 0.0;
    result[7][3] = 0.0;
    result[7][4] = -t29;
    result[7][5] = 0.0;
    result[7][6] = 0.0;
    result[7][7] = 0.0;
    result[7][8] = t92 * (t98 - t58 * (t21 * t60 * 2.0 - t23 * t62 * 2.0)) / 2.0;
    result[8][0] = 0.0;
    result[8][1] = 0.0;
    result[8][2] = 0.0;
    result[8][3] = 0.0;
    result[8][4] = -t104;
    result[8][5] = 0.0;
    result[8][6] = 0.0;
    result[8][7] = 0.0;
    result[8][8] = t92 * (t99 - t58 * (t21 * t61 * 2.0 + t22 * t62 * 2.0)) / 2.0;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = -t103;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = 0.0;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = t59;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = 0.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = t64;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = 0.0;
}

__host__ __device__ void pFpx_peeV0V1(double d,
                                      double x11,
                                      double x12,
                                      double x13,
                                      double x21,
                                      double x22,
                                      double x23,
                                      double x31,
                                      double x32,
                                      double x33,
                                      double x41,
                                      double x42,
                                      double x43,
                                      double result[12][9])
{
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t18;
    double t19;
    double t20;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t38;
    double t45;
    double t46;
    double t47;
    double t69;
    double t70;
    double t71;
    double t72;
    double t73;
    double t74;
    double t76;
    double t77;
    double t79;
    double t80;
    double t81;
    double t82;
    double t83;
    double t84;
    double t85;
    double t86;
    double t89;
    double t90;
    /* pFpx_pee */
    /*     RESULT = pFpx_pee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     17-Mar-2022 15:23:02 */
    t12           = -x21 + x11;
    t13           = -x22 + x12;
    t14           = -x23 + x13;
    t15           = -x31 + x11;
    t16           = -x32 + x12;
    t17           = -x33 + x13;
    t18           = -x41 + x31;
    t19           = -x42 + x32;
    t20           = -x43 + x33;
    t33           = t15 * t19;
    t34           = t16 * t18;
    t35           = t15 * t20;
    t36           = t17 * t18;
    t37           = t16 * t20;
    t38           = t17 * t19;
    t45           = t12 * t19 + -(t13 * t18);
    t46           = t12 * t20 + -(t14 * t18);
    t47           = t13 * t20 + -(t14 * t19);
    t69           = t13 * t45 * 2.0 + t14 * t46 * 2.0;
    t70           = t12 * t46 * 2.0 + t13 * t47 * 2.0;
    t71           = t19 * t45 * 2.0 + t20 * t46 * 2.0;
    t72           = t18 * t46 * 2.0 + t19 * t47 * 2.0;
    t19           = (t45 * t45 + t46 * t46) + t47 * t47;
    t73           = t12 * t45 * 2.0 + -(t14 * t47 * 2.0);
    t74           = t18 * t45 * 2.0 + -(t20 * t47 * 2.0);
    t76           = 1.0 / t19;
    t19           = 1.0 / sqrt(t19);
    t79           = (t17 * t45 + t15 * t47) + -(t16 * t46);
    t77           = t76 * t76;
    t80           = t79 * t79;
    t81           = t69 * t19 / 2.0;
    t82           = t70 * t19 / 2.0;
    t83           = t71 * t19 / 2.0;
    t84           = t72 * t19 / 2.0;
    t85           = t73 * t19 / 2.0;
    t86           = t74 * t19 / 2.0;
    t89           = t69 * t77 * t80;
    t90           = t70 * t77 * t80;
    t20           = t71 * t77 * t80;
    t18           = t72 * t77 * t80;
    t71           = t73 * t77 * t80;
    t19           = t74 * t77 * t80;
    result[0][0]  = 0.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = 0.0;
    result[0][4]  = t83;
    result[0][5]  = 0.0;
    result[0][6]  = 0.0;
    result[0][7]  = 0.0;
    t70           = t76 * t79;
    t69           = 1.0 / d * (1.0 / sqrt(t76 * t80));
    result[0][8]  = t69 * (t20 - t70 * ((-t37 + t38) + t47) * 2.0) * -0.5;
    result[1][0]  = 0.0;
    result[1][1]  = 0.0;
    result[1][2]  = 0.0;
    result[1][3]  = 0.0;
    result[1][4]  = -t86;
    result[1][5]  = 0.0;
    result[1][6]  = 0.0;
    result[1][7]  = 0.0;
    result[1][8]  = t69 * (t19 - t70 * ((-t35 + t36) + t46) * 2.0) / 2.0;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = 0.0;
    result[2][3]  = 0.0;
    result[2][4]  = -t84;
    result[2][5]  = 0.0;
    result[2][6]  = 0.0;
    result[2][7]  = 0.0;
    result[2][8]  = t69 * (t18 + t70 * ((-t33 + t34) + t45) * 2.0) / 2.0;
    result[3][0]  = 0.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = 0.0;
    result[3][4]  = -t83;
    result[3][5]  = 0.0;
    result[3][6]  = 0.0;
    result[3][7]  = 0.0;
    result[3][8]  = t69 * (t20 + t70 * (t37 - t38) * 2.0) / 2.0;
    result[4][0]  = 0.0;
    result[4][1]  = 0.0;
    result[4][2]  = 0.0;
    result[4][3]  = 0.0;
    result[4][4]  = t86;
    result[4][5]  = 0.0;
    result[4][6]  = 0.0;
    result[4][7]  = 0.0;
    result[4][8]  = t69 * (t19 + t70 * (t35 - t36) * 2.0) * -0.5;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 0.0;
    result[5][3]  = 0.0;
    result[5][4]  = t84;
    result[5][5]  = 0.0;
    result[5][6]  = 0.0;
    result[5][7]  = 0.0;
    result[5][8]  = t69 * (t18 - t70 * (t33 - t34) * 2.0) * -0.5;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    result[6][3]  = 0.0;
    result[6][4]  = -t81;
    result[6][5]  = 0.0;
    result[6][6]  = 0.0;
    result[6][7]  = 0.0;
    t20           = t13 * t17 + -(t14 * t16);
    result[6][8]  = t69 * (t89 - t70 * (t20 + t47) * 2.0) / 2.0;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = 0.0;
    result[7][4]  = t85;
    result[7][5]  = 0.0;
    result[7][6]  = 0.0;
    result[7][7]  = 0.0;
    t18           = t12 * t17 + -(t14 * t15);
    result[7][8]  = t69 * (t71 - t70 * (t18 + t46) * 2.0) * -0.5;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = 0.0;
    result[8][4]  = t82;
    result[8][5]  = 0.0;
    result[8][6]  = 0.0;
    result[8][7]  = 0.0;
    t19           = t12 * t16 + -(t13 * t15);
    result[8][8]  = t69 * (t90 + t70 * (t19 + t45) * 2.0) * -0.5;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    result[9][3]  = 0.0;
    result[9][4]  = t81;
    result[9][5]  = 0.0;
    result[9][6]  = 0.0;
    result[9][7]  = 0.0;
    result[9][8]  = t69 * (t89 - t70 * t20 * 2.0) * -0.5;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = 0.0;
    result[10][4] = -t85;
    result[10][5] = 0.0;
    result[10][6] = 0.0;
    result[10][7] = 0.0;
    result[10][8] = t69 * (t71 - t70 * t18 * 2.0) / 2.0;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = 0.0;
    result[11][4] = -t82;
    result[11][5] = 0.0;
    result[11][6] = 0.0;
    result[11][7] = 0.0;
    result[11][8] = t69 * (t90 + t70 * t19 * 2.0) / 2.0;
}

__host__ __device__ void pFpx_ppe(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pFpx)
{
    pFpx_ppeV0V1(
        d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, x3.x, x3.y, x3.z, pFpx.m);
}

__host__ __device__ void pFpx_ppp(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pFpx)
{
    pFpx_pppV0V1(
        d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, x3.x, x3.y, x3.z, pFpx.m);
}

__host__ __device__ void pFpx_pee(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pFpx)
{
    pFpx_peeV0V1(
        d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, x3.x, x3.y, x3.z, pFpx.m);
}
__host__ __device__ void pFpx_ee2(double d,
                                  double x11,
                                  double x12,
                                  double x13,
                                  double x21,
                                  double x22,
                                  double x23,
                                  double x31,
                                  double x32,
                                  double x33,
                                  double x41,
                                  double x42,
                                  double x43,
                                  double result[12][9])
{
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t18;
    double t19;
    double t20;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t38;
    double t45;
    double t46;
    double t47;
    double t76;
    double t77;
    double t78;
    double t79;
    double t82;
    double t83;
    double t84;
    double t86;
    /* pFpx_ee */
    /*     RESULT = pFpx_ee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     30-Apr-2022 18:31:16 */
    t12 = -x21 + x11;
    t13 = -x22 + x12;
    t14 = -x23 + x13;
    t15 = -x31 + x11;
    t16 = -x32 + x12;
    t17 = -x33 + x13;
    t18 = -x41 + x31;
    t19 = -x42 + x32;
    t20 = -x43 + x33;
    t33 = t15 * t19;
    t34 = t16 * t18;
    t35 = t15 * t20;
    t36 = t17 * t18;
    t37 = t16 * t20;
    t38 = t17 * t19;
    t45 = t12 * t19 + -(t13 * t18);
    t46 = t12 * t20 + -(t14 * t18);
    t47 = t13 * t20 + -(t14 * t19);
    t76 = 1.0 / ((t45 * t45 + t46 * t46) + t47 * t47);
    t78 = (t17 * t45 + t15 * t47) + -(t16 * t46);
    t77 = t76 * t76;
    t79 = t78 * t78;
    t82 = (t13 * t45 * 2.0 + t14 * t46 * 2.0) * t77 * t79;
    t83 = (t12 * t46 * 2.0 + t13 * t47 * 2.0) * t77 * t79;
    t84 = (t19 * t45 * 2.0 + t20 * t46 * 2.0) * t77 * t79;
    t19 = (t18 * t46 * 2.0 + t19 * t47 * 2.0) * t77 * t79;
    t86 = (t12 * t45 * 2.0 + -(t14 * t47 * 2.0)) * t77 * t79;
    t20 = (t18 * t45 * 2.0 + -(t20 * t47 * 2.0)) * t77 * t79;
    t78 *= t76;
    t77           = 1.0 / d * (1.0 / sqrt(t76 * t79));
    result[0][0]  = 0;
    result[0][1]  = 0;
    result[0][2]  = 0;
    result[0][3]  = 0;
    result[0][4]  = 0;
    result[0][5]  = 0;
    result[0][6]  = 0;
    result[0][7]  = 0;
    result[0][8]  = t77 * (t84 - t78 * ((-t37 + t38) + t47) * 2.0) * -0.5;
    result[1][0]  = 0;
    result[1][1]  = 0;
    result[1][2]  = 0;
    result[1][3]  = 0;
    result[1][4]  = 0;
    result[1][5]  = 0;
    result[1][6]  = 0;
    result[1][7]  = 0;
    result[1][8]  = t77 * (t20 - t78 * ((-t35 + t36) + t46) * 2.0) / 2.0;
    result[2][0]  = 0;
    result[2][1]  = 0;
    result[2][2]  = 0;
    result[2][3]  = 0;
    result[2][4]  = 0;
    result[2][5]  = 0;
    result[2][6]  = 0;
    result[2][7]  = 0;
    result[2][8]  = t77 * (t19 + t78 * ((-t33 + t34) + t45) * 2.0) / 2.0;
    result[3][0]  = 0;
    result[3][1]  = 0;
    result[3][2]  = 0;
    result[3][3]  = 0;
    result[3][4]  = 0;
    result[3][5]  = 0;
    result[3][6]  = 0;
    result[3][7]  = 0;
    result[3][8]  = t77 * (t84 + t78 * (t37 - t38) * 2.0) / 2.0;
    result[4][0]  = 0;
    result[4][1]  = 0;
    result[4][2]  = 0;
    result[4][3]  = 0;
    result[4][4]  = 0;
    result[4][5]  = 0;
    result[4][6]  = 0;
    result[4][7]  = 0;
    result[4][8]  = t77 * (t20 + t78 * (t35 - t36) * 2.0) * -0.5;
    result[5][0]  = 0;
    result[5][1]  = 0;
    result[5][2]  = 0;
    result[5][3]  = 0;
    result[5][4]  = 0;
    result[5][5]  = 0;
    result[5][6]  = 0;
    result[5][7]  = 0;
    result[5][8]  = t77 * (t19 - t78 * (t33 - t34) * 2.0) * -0.5;
    result[6][0]  = 0;
    result[6][1]  = 0;
    result[6][2]  = 0;
    result[6][3]  = 0;
    result[6][4]  = 0;
    result[6][5]  = 0;
    result[6][6]  = 0;
    result[6][7]  = 0;
    t18           = t13 * t17 + -(t14 * t16);
    result[6][8]  = t77 * (t82 - t78 * (t18 + t47) * 2.0) / 2.0;
    result[7][0]  = 0;
    result[7][1]  = 0;
    result[7][2]  = 0;
    result[7][3]  = 0;
    result[7][4]  = 0;
    result[7][5]  = 0;
    result[7][6]  = 0;
    result[7][7]  = 0;
    t20           = t12 * t17 + -(t14 * t15);
    result[7][8]  = t77 * (t86 - t78 * (t20 + t46) * 2.0) * -0.5;
    result[8][0]  = 0;
    result[8][1]  = 0;
    result[8][2]  = 0;
    result[8][3]  = 0;
    result[8][4]  = 0;
    result[8][5]  = 0;
    result[8][6]  = 0;
    result[8][7]  = 0;
    t19           = t12 * t16 + -(t13 * t15);
    result[8][8]  = t77 * (t83 + t78 * (t19 + t45) * 2.0) * -0.5;
    result[9][0]  = 0;
    result[9][1]  = 0;
    result[9][2]  = 0;
    result[9][3]  = 0;
    result[9][4]  = 0;
    result[9][5]  = 0;
    result[9][6]  = 0;
    result[9][7]  = 0;
    result[9][8]  = t77 * (t82 - t78 * t18 * 2.0) * -0.5;
    result[10][0] = 0;
    result[10][1] = 0;
    result[10][2] = 0;
    result[10][3] = 0;
    result[10][4] = 0;
    result[10][5] = 0;
    result[10][6] = 0;
    result[10][7] = 0;
    result[10][8] = t77 * (t86 - t78 * t20 * 2.0) / 2.0;
    result[11][0] = 0;
    result[11][1] = 0;
    result[11][2] = 0;
    result[11][3] = 0;
    result[11][4] = 0;
    result[11][5] = 0;
    result[11][6] = 0;
    result[11][7] = 0;
    result[11][8] = t77 * (t83 + t78 * t19 * 2.0) / 2.0;
}
__host__ __device__ void pFpx_ee2(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pFpx)
{
    pFpx_ee2(d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, x3.x, x3.y, x3.z, pFpx.m);
}

__host__ __device__ void pFpx_pp2(
    double d, double x11, double x12, double x13, double x21, double x22, double x23, double result[6])
{
    double t25;
    double t26;
    double t27;
    double t8;
    /* pFpx_pp */
    /*     RESULT = pFpx_pp(D,X11,X12,X13,X21,X22,X23) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     30-Apr-2022 19:00:49 */
    t8        = 1.0 / d;
    t25       = -x21 + x11;
    t26       = -x22 + x12;
    t27       = -x23 + x13;
    t25       = 1.0 / sqrt((t25 * t25 + t26 * t26) + t27 * t27);
    t26       = t8 * (x11 * 2.0 + -(x21 * 2.0)) * t25 / 2.0;
    t27       = t8 * (x12 * 2.0 + -(x22 * 2.0)) * t25 / 2.0;
    t25       = t8 * (x13 * 2.0 + -(x23 * 2.0)) * t25 / 2.0;
    result[0] = t26;
    result[1] = t27;
    result[2] = t25;
    result[3] = -t26;
    result[4] = -t27;
    result[5] = -t25;
}
__host__ __device__ void pFpx_pp2(const double3&       x0,
                                  const double3&       x1,
                                  double               d_hatSqrt,
                                  __GEIGEN__::Vector6& pFpx)
{
    pFpx_pp2(d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, pFpx.v);
}


__host__ __device__ void pFpx_pt2(double d,
                                  double x11,
                                  double x12,
                                  double x13,
                                  double x21,
                                  double x22,
                                  double x23,
                                  double x31,
                                  double x32,
                                  double x33,
                                  double x41,
                                  double x42,
                                  double x43,
                                  double result[12][9])
{
    double b_d;
    double t12;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t18;
    double t19;
    double t2;
    double t20;
    double t21;
    double t22;
    double t23;
    double t33;
    double t34;
    double t35;
    double t44;
    double t46;
    double t47;
    double t49;
    /* pFpx_pt */
    /*     RESULT = pFpx_pt(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     30-Apr-2022 16:12:13 */
    t2           = 1.0 / d;
    t12          = -x21 + x11;
    t13          = -x22 + x12;
    t14          = -x23 + x13;
    t15          = -x31 + x21;
    t16          = -x32 + x22;
    t17          = -x33 + x23;
    t18          = -x41 + x21;
    t19          = -x42 + x22;
    t20          = -x43 + x23;
    t21          = -x41 + x31;
    t22          = -x42 + x32;
    t23          = -x43 + x33;
    t33          = t15 * t19 + -(t16 * t18);
    t34          = t15 * t20 + -(t17 * t18);
    t35          = t16 * t20 + -(t17 * t19);
    t44          = 1.0 / ((t33 * t33 + t34 * t34) + t35 * t35);
    t46          = (t14 * t33 + t12 * t35) + -(t13 * t34);
    t47          = t46 * t46;
    t49          = 1.0 / sqrt(t44 * t47);
    result[0][0] = 0;
    result[0][1] = 0;
    result[0][2] = 0;
    result[0][3] = 0;
    result[0][4] = 0;
    result[0][5] = 0;
    result[0][6] = 0;
    result[0][7] = 0;
    result[0][8] = t2 * t35 * t44 * t46 * t49;

    result[1][0] = 0;
    result[1][1] = 0;
    result[1][2] = 0;
    result[1][3] = 0;
    result[1][4] = 0;
    result[1][5] = 0;
    result[1][6] = 0;
    result[1][7] = 0;
    result[1][8] = -t2 * t34 * t44 * t46 * t49;

    result[2][0] = 0;
    result[2][1] = 0;
    result[2][2] = 0;
    result[2][3] = 0;
    result[2][4] = 0;
    result[2][5] = 0;
    result[2][6] = 0;
    result[2][7] = 0;
    result[2][8] = t2 * t33 * t44 * t46 * t49;
    b_d          = t44 * t44 * t47;
    t44 *= t46;
    t47          = t2 * t49;
    result[3][0] = 0;
    result[3][1] = 0;
    result[3][2] = 0;
    result[3][3] = 0;
    result[3][4] = 0;
    result[3][5] = 0;
    result[3][6] = 0;
    result[3][7] = 0;
    result[3][8] = t47
                   * (b_d * (t22 * t33 * 2.0 + t23 * t34 * 2.0)
                      + t44 * ((t35 + t13 * t23) - t14 * t22) * 2.0)
                   * -0.5;
    result[4][0] = 0;
    result[4][1] = 0;
    result[4][2] = 0;
    result[4][3] = 0;
    result[4][4] = 0;
    result[4][5] = 0;
    result[4][6] = 0;
    result[4][7] = 0;
    result[4][8] = t47
                   * (b_d * (t21 * t33 * 2.0 - t23 * t35 * 2.0)
                      + t44 * ((t34 + t12 * t23) - t14 * t21) * 2.0)
                   / 2.0;
    result[5][0] = 0;
    result[5][1] = 0;
    result[5][2] = 0;
    result[5][3] = 0;
    result[5][4] = 0;
    result[5][5] = 0;
    result[5][6] = 0;
    result[5][7] = 0;
    result[5][8] = t47
                   * (b_d * (t21 * t34 * 2.0 + t22 * t35 * 2.0)
                      - t44 * ((t33 + t12 * t22) - t13 * t21) * 2.0)
                   / 2.0;
    result[6][0] = 0;
    result[6][1] = 0;
    result[6][2] = 0;
    result[6][3] = 0;
    result[6][4] = 0;
    result[6][5] = 0;
    result[6][6] = 0;
    result[6][7] = 0;
    result[6][8] =
        t47 * (t44 * (t13 * t20 - t14 * t19) * 2.0 + b_d * (t19 * t33 * 2.0 + t20 * t34 * 2.0))
        / 2.0;
    result[7][0] = 0;
    result[7][1] = 0;
    result[7][2] = 0;
    result[7][3] = 0;
    result[7][4] = 0;
    result[7][5] = 0;
    result[7][6] = 0;
    result[7][7] = 0;
    result[7][8] =
        t47 * (t44 * (t12 * t20 - t14 * t18) * 2.0 + b_d * (t18 * t33 * 2.0 - t20 * t35 * 2.0))
        * -0.5;
    result[8][0] = 0;
    result[8][1] = 0;
    result[8][2] = 0;
    result[8][3] = 0;
    result[8][4] = 0;
    result[8][5] = 0;
    result[8][6] = 0;
    result[8][7] = 0;
    result[8][8] =
        t47 * (t44 * (t12 * t19 - t13 * t18) * 2.0 - b_d * (t18 * t34 * 2.0 + t19 * t35 * 2.0))
        / 2.0;
    result[9][0] = 0;
    result[9][1] = 0;
    result[9][2] = 0;
    result[9][3] = 0;
    result[9][4] = 0;
    result[9][5] = 0;
    result[9][6] = 0;
    result[9][7] = 0;
    result[9][8] =
        t47 * (t44 * (t13 * t17 - t14 * t16) * 2.0 + b_d * (t16 * t33 * 2.0 + t17 * t34 * 2.0))
        * -0.5;
    result[10][0] = 0;
    result[10][1] = 0;
    result[10][2] = 0;
    result[10][3] = 0;
    result[10][4] = 0;
    result[10][5] = 0;
    result[10][6] = 0;
    result[10][7] = 0;
    result[10][8] =
        t47 * (t44 * (t12 * t17 - t14 * t15) * 2.0 + b_d * (t15 * t33 * 2.0 - t17 * t35 * 2.0))
        / 2.0;
    result[11][0] = 0;
    result[11][1] = 0;
    result[11][2] = 0;
    result[11][3] = 0;
    result[11][4] = 0;
    result[11][5] = 0;
    result[11][6] = 0;
    result[11][7] = 0;
    result[11][8] =
        t47 * (t44 * (t12 * t16 - t13 * t15) * 2.0 - b_d * (t15 * t34 * 2.0 + t16 * t35 * 2.0))
        * -0.5;
}

__host__ __device__ void pFpx_pe2(double d,
                                  double x11,
                                  double x12,
                                  double x13,
                                  double x21,
                                  double x22,
                                  double x23,
                                  double x31,
                                  double x32,
                                  double x33,
                                  double result[9][4])
{
    double t18;
    double t19;
    double t20;
    double t21;
    double t22;
    double t23;
    double t24;
    double t25;
    double t26;
    double t43;
    double t44;
    double t45;
    double t46;
    double t47;
    double t51;
    double t54;
    double t55;
    double t56;
    double t8;
    /* pFpx_pe */
    /*     RESULT = pFpx_pe(D,X11,X12,X13,X21,X22,X23,X31,X32,X33) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     30-Apr-2022 18:45:25 */
    t8           = 1.0 / d;
    t18          = -x21 + x11;
    t19          = -x22 + x12;
    t20          = -x23 + x13;
    t21          = -x31 + x11;
    t22          = -x32 + x12;
    t23          = -x33 + x13;
    t24          = -x31 + x21;
    t25          = -x32 + x22;
    t26          = -x33 + x23;
    t43          = 1.0 / ((t24 * t24 + t25 * t25) + t26 * t26);
    t45          = t18 * t22 + -(t19 * t21);
    t46          = t18 * t23 + -(t20 * t21);
    t47          = t19 * t23 + -(t20 * t22);
    t44          = t43 * t43;
    t51          = (t45 * t45 + t46 * t46) + t47 * t47;
    t54          = (x21 * 2.0 + -(x31 * 2.0)) * t44 * t51;
    t55          = (x22 * 2.0 + -(x32 * 2.0)) * t44 * t51;
    t56          = (x23 * 2.0 + -(x33 * 2.0)) * t44 * t51;
    t44          = 1.0 / sqrt(t43 * t51);
    result[0][0] = 0.0;
    result[0][1] = 0.0;
    result[0][2] = 0.0;
    t51          = t8 * t43 * t44;
    result[0][3] = t51 * (t25 * t45 * 2.0 + t26 * t46 * 2.0) / 2.0;
    result[1][0] = 0.0;
    result[1][1] = 0.0;
    result[1][2] = 0.0;
    result[1][3] = t51 * (t24 * t45 * 2.0 - t26 * t47 * 2.0) * -0.5;
    result[2][0] = 0.0;
    result[2][1] = 0.0;
    result[2][2] = 0.0;
    result[2][3] = t51 * (t24 * t46 * 2.0 + t25 * t47 * 2.0) * -0.5;
    result[3][0] = 0.0;
    result[3][1] = 0.0;
    result[3][2] = 0.0;
    t51          = t8 * t44;
    result[3][3] = t51 * (t54 + t43 * (t22 * t45 * 2.0 + t23 * t46 * 2.0)) * -0.5;
    result[4][0] = 0.0;
    result[4][1] = 0.0;
    result[4][2] = 0.0;
    result[4][3] = t51 * (t55 - t43 * (t21 * t45 * 2.0 - t23 * t47 * 2.0)) * -0.5;
    result[5][0] = 0.0;
    result[5][1] = 0.0;
    result[5][2] = 0.0;
    result[5][3] = t51 * (t56 - t43 * (t21 * t46 * 2.0 + t22 * t47 * 2.0)) * -0.5;
    result[6][0] = 0.0;
    result[6][1] = 0.0;
    result[6][2] = 0.0;
    result[6][3] = t51 * (t54 + t43 * (t19 * t45 * 2.0 + t20 * t46 * 2.0)) / 2.0;
    result[7][0] = 0.0;
    result[7][1] = 0.0;
    result[7][2] = 0.0;
    result[7][3] = t51 * (t55 - t43 * (t18 * t45 * 2.0 - t20 * t47 * 2.0)) / 2.0;
    result[8][0] = 0.0;
    result[8][1] = 0.0;
    result[8][2] = 0.0;
    result[8][3] = t51 * (t56 - t43 * (t18 * t46 * 2.0 + t19 * t47 * 2.0)) / 2.0;
}

__host__ __device__ void pFpx_pe2(const double3&          x0,
                                  const double3&          x1,
                                  const double3&          x2,
                                  double                  d_hatSqrt,
                                  __GEIGEN__::Matrix9x4d& pFpx)
{
    pFpx_pe2(d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, pFpx.m);
}

__host__ __device__ void pFpx_pt2(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pFpx)
{
    pFpx_pt2(d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, x3.x, x3.y, x3.z, pFpx.m);
}

__host__ __device__ void pDmpx_ee_flip(double d,
                                       double x11,
                                       double x12,
                                       double x13,
                                       double x21,
                                       double x22,
                                       double x23,
                                       double x31,
                                       double x32,
                                       double x33,
                                       double x41,
                                       double x42,
                                       double x43,
                                       double result[12][9])
{
    double t102;
    double t104;
    double t105;
    double t11;
    double t12;
    double t120;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t126;
    double t13;
    double t133;
    double t134;
    double t135;
    double t136;
    double t138;
    double t139;
    double t14;
    double t140;
    double t143;
    double t146;
    double t149;
    double t15;
    double t155;
    double t16;
    double t169;
    double t17;
    double t170;
    double t171;
    double t172;
    double t173;
    double t174;
    double t18;
    double t189;
    double t19;
    double t203;
    double t261;
    double t29;
    double t30;
    double t31;
    double t49;
    double t50;
    double t51;
    double t52;
    double t53;
    double t54;
    double t56;
    double t57;
    double t60;
    double t61;
    double t62;
    double t63;
    double t80;
    double t81;
    double t82;
    double t88;
    double t89;
    double t90;
    /* pDmpx_ee_flip */
    /*     RESULT =
     * pDmpx_ee_flip(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Mar-2022 13:40:15 */
    t11  = -x21 + x11;
    t12  = -x22 + x12;
    t13  = -x23 + x13;
    t14  = -x31 + x11;
    t15  = -x32 + x12;
    t16  = -x33 + x13;
    t17  = -x41 + x31;
    t18  = -x42 + x32;
    t19  = -x43 + x33;
    t29  = t11 * t18 + -(t12 * t17);
    t30  = t11 * t19 + -(t13 * t17);
    t31  = t12 * t19 + -(t13 * t18);
    t49  = t12 * t29 * 2.0 + t13 * t30 * 2.0;
    t50  = t11 * t30 * 2.0 + t12 * t31 * 2.0;
    t51  = t18 * t29 * 2.0 + t19 * t30 * 2.0;
    t52  = t17 * t30 * 2.0 + t18 * t31 * 2.0;
    t53  = t11 * t29 * 2.0 + -(t13 * t31 * 2.0);
    t54  = t17 * t29 * 2.0 + -(t19 * t31 * 2.0);
    t56  = 1.0 / sqrt((t29 * t29 + t30 * t30) + t31 * t31);
    t57  = pow(t56, 3.0);
    t60  = t11 * t16 * t56;
    t61  = t13 * t14 * t56;
    t62  = t12 * t16 * t56;
    t63  = t13 * t15 * t56;
    t80  = t29 * t56;
    t81  = t30 * t56;
    t82  = t31 * t56;
    t139 = t16 * t29;
    t88  = t139 * t49 * t57 / 2.0;
    t134 = t15 * t30;
    t89  = t134 * t49 * t57 / 2.0;
    t140 = t14 * t31;
    t90  = t140 * t49 * t57 / 2.0;
    t102 = t139 * t53 * t57 / 2.0;
    t104 = t134 * t53 * t57 / 2.0;
    t105 = t140 * t53 * t57 / 2.0;
    t120 = ((d + t15 * t81) + -(t16 * t80)) + -(t14 * t82);
    t169 = (((t63 + -t62) + t88) + t90) + -t89;
    t170 = (((t11 * t15 * t56 + -(t12 * t14 * t56)) + t139 * t50 * t57 / 2.0)
            + t140 * t50 * t57 / 2.0)
           + -(t134 * t50 * t57 / 2.0);
    t171 = (((t15 * t19 * t56 + -(t16 * t18 * t56)) + t139 * t51 * t57 / 2.0)
            + t140 * t51 * t57 / 2.0)
           + -(t134 * t51 * t57 / 2.0);
    t172 = (((t15 * t17 * t56 + -(t14 * t18 * t56)) + t139 * t52 * t57 / 2.0)
            + t140 * t52 * t57 / 2.0)
           + -(t134 * t52 * t57 / 2.0);
    t173 = (((t61 + -t60) + t102) + t105) + -t104;
    t174 = (((t14 * t19 * t56 + -(t16 * t17 * t56)) + t139 * t54 * t57 / 2.0)
            + t140 * t54 * t57 / 2.0)
           + -(t134 * t54 * t57 / 2.0);
    t189          = ((((t62 + -t63) + t82) + t89) + -t88) + -t90;
    t203          = ((((t60 + -t61) + t81) + t104) + -t102) + -t105;
    t121          = t11 * t56 * t120;
    t122          = t12 * t56 * t120;
    t123          = t13 * t56 * t120;
    t124          = t17 * t56 * t120;
    t125          = t18 * t56 * t120;
    t126          = t19 * t56 * t120;
    t133          = t29 * t49 * t57 * t120 / 2.0;
    t134          = t30 * t49 * t57 * t120 / 2.0;
    t135          = t29 * t50 * t57 * t120 / 2.0;
    t136          = t31 * t49 * t57 * t120 / 2.0;
    t88           = t30 * t50 * t57 * t120 / 2.0;
    t138          = t31 * t50 * t57 * t120 / 2.0;
    t139          = t29 * t51 * t57 * t120 / 2.0;
    t140          = t30 * t51 * t57 * t120 / 2.0;
    t16           = t29 * t52 * t57 * t120 / 2.0;
    t14           = t31 * t51 * t57 * t120 / 2.0;
    t143          = t30 * t52 * t57 * t120 / 2.0;
    t63           = t31 * t52 * t57 * t120 / 2.0;
    t146          = t29 * t53 * t57 * t120 / 2.0;
    t149          = t30 * t53 * t57 * t120 / 2.0;
    t62           = t31 * t53 * t57 * t120 / 2.0;
    t155          = t29 * t54 * t57 * t120 / 2.0;
    t15           = t30 * t54 * t57 * t120 / 2.0;
    t13           = t31 * t54 * t57 * t120 / 2.0;
    t120          = t80 + t170;
    t29           = t80 + t172;
    t61           = t82 - t171;
    t54           = (t14 + t82 * t61) - 1.0;
    t17           = t81 - t174;
    t57           = (t15 + t81 * t17) - 1.0;
    t261          = (t123 + t62) + t82 * t203;
    t30           = -t14 + t82 * t171;
    t31           = t16 + -(t80 * t172);
    t49           = -t15 + t81 * t174;
    t18           = (-t16 + t80 * t29) - 1.0;
    t50           = (t123 + -t134) + t81 * t169;
    t51           = (t122 + -t138) + t82 * t170;
    t19           = (t125 + -t139) + t80 * t171;
    t56           = (t124 + -t143) + t81 * t172;
    t52           = (-t122 + t133) + -(t80 * t169);
    t53           = (-t121 + t88) + -(t81 * t170);
    t11           = (-t126 + t140) + -(t81 * t171);
    t102          = (-t125 + t63) + -(t82 * t172);
    t12           = (t121 + -t146) + t80 * t173;
    t104          = (t126 + t13) + -(t82 * t174);
    t105          = (-t123 + -t62) + t82 * t173;
    t90           = (-t124 + t155) + -(t80 * t174);
    t60           = (t121 + -t88) + t81 * t120;
    t89           = (t125 + -t63) + t82 * t29;
    t88           = (-t123 + t134) + t81 * t189;
    t62           = (-t125 + t139) + t80 * t61;
    t63           = (t122 + -t133) + -(t80 * t189);
    t140          = (t126 + -t140) + -(t81 * t61);
    t134          = (-t121 + t146) + t80 * t203;
    t139          = (t124 + -t155) + -(t80 * t17);
    t16           = (-t126 + -t13) + -(t82 * t17);
    t14           = (-t122 + t138) + -(t82 * t120);
    t15           = (-t124 + t143) + -(t81 * t29);
    result[0][0]  = -1.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = t54;
    result[0][4]  = t140;
    result[0][5]  = t62;
    result[0][6]  = t54;
    result[0][7]  = t140;
    result[0][8]  = t62;
    result[1][0]  = 0.0;
    result[1][1]  = -1.0;
    result[1][2]  = 0.0;
    result[1][3]  = t16;
    result[1][4]  = t57;
    result[1][5]  = t139;
    result[1][6]  = t16;
    result[1][7]  = t57;
    result[1][8]  = t139;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = -1.0;
    result[2][3]  = t89;
    result[2][4]  = t15;
    result[2][5]  = t18;
    result[2][6]  = t89;
    result[2][7]  = t15;
    result[2][8]  = t18;
    result[3][0]  = 1.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = t30;
    result[3][4]  = t11;
    result[3][5]  = t19;
    result[3][6]  = t30;
    result[3][7]  = t11;
    result[3][8]  = t19;
    result[4][0]  = 0.0;
    result[4][1]  = 1.0;
    result[4][2]  = 0.0;
    result[4][3]  = t104;
    result[4][4]  = t49;
    result[4][5]  = t90;
    result[4][6]  = t104;
    result[4][7]  = t49;
    result[4][8]  = t90;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 1.0;
    result[5][3]  = t102;
    result[5][4]  = t56;
    result[5][5]  = t31;
    result[5][6]  = t102;
    result[5][7]  = t56;
    result[5][8]  = t31;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    t15           = -t136 + -(t82 * t189);
    result[6][3]  = t15 + 1.0;
    result[6][4]  = t88;
    result[6][5]  = t63;
    result[6][6]  = t15;
    result[6][7]  = t88;
    result[6][8]  = t63;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = t261;
    t15           = -t149 + -(t81 * t203);
    result[7][4]  = t15 + 1.0;
    result[7][5]  = t134;
    result[7][6]  = t261;
    result[7][7]  = t15;
    result[7][8]  = t134;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = t14;
    result[8][4]  = t60;
    t15           = t135 + -(t80 * t120);
    result[8][5]  = t15 + 1.0;
    result[8][6]  = t14;
    result[8][7]  = t60;
    result[8][8]  = t15;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    t15           = t136 + -(t82 * t169);
    result[9][3]  = t15;
    result[9][4]  = t50;
    result[9][5]  = t52;
    result[9][6]  = t15 + 1.0;
    result[9][7]  = t50;
    result[9][8]  = t52;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = t105;
    t15           = t149 + -(t81 * t173);
    result[10][4] = t15;
    result[10][5] = t12;
    result[10][6] = t105;
    result[10][7] = t15 + 1.0;
    result[10][8] = t12;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = t51;
    result[11][4] = t53;
    t15           = -t135 + t80 * t170;
    result[11][5] = t15;
    result[11][6] = t51;
    result[11][7] = t53;
    result[11][8] = t15 + 1.0;
}

__host__ __device__ void pDmpx_ee_flip(const double3&           x0,
                                       const double3&           x1,
                                       const double3&           x2,
                                       const double3&           x3,
                                       double                   d_hatSqrt,
                                       __GEIGEN__::Matrix12x9d& pDmpx)
{
    pDmpx_ee_flip(d_hatSqrt,
                  x0.x,
                  x0.y,
                  x0.z,
                  x1.x,
                  x1.y,
                  x1.z,
                  x2.x,
                  x2.y,
                  x2.z,
                  x3.x,
                  x3.y,
                  x3.z,
                  pDmpx.m);
}


__host__ __device__ void pDmpx_ee(double d,
                                  double x11,
                                  double x12,
                                  double x13,
                                  double x21,
                                  double x22,
                                  double x23,
                                  double x31,
                                  double x32,
                                  double x33,
                                  double x41,
                                  double x42,
                                  double x43,
                                  double result[12][9])
{
    double t101;
    double t103;
    double t104;
    double t11;
    double t119;
    double t12;
    double t120;
    double t121;
    double t122;
    double t123;
    double t124;
    double t125;
    double t13;
    double t132;
    double t134;
    double t135;
    double t137;
    double t139;
    double t14;
    double t142;
    double t145;
    double t148;
    double t15;
    double t151;
    double t154;
    double t16;
    double t168;
    double t169;
    double t17;
    double t170;
    double t171;
    double t172;
    double t173;
    double t18;
    double t188;
    double t19;
    double t202;
    double t29;
    double t30;
    double t31;
    double t49;
    double t50;
    double t51;
    double t52;
    double t53;
    double t54;
    double t56;
    double t57;
    double t60;
    double t61;
    double t62;
    double t63;
    double t80;
    double t81;
    double t82;
    double t87;
    double t88;
    double t89;
    /* pDmpx_ee */
    /*     RESULT = pDmpx_ee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Mar-2022 09:17:03 */
    t11  = -x21 + x11;
    t12  = -x22 + x12;
    t13  = -x23 + x13;
    t14  = -x31 + x11;
    t15  = -x32 + x12;
    t16  = -x33 + x13;
    t17  = -x41 + x31;
    t18  = -x42 + x32;
    t19  = -x43 + x33;
    t29  = t11 * t18 + -(t12 * t17);
    t30  = t11 * t19 + -(t13 * t17);
    t31  = t12 * t19 + -(t13 * t18);
    t49  = t12 * t29 * 2.0 + t13 * t30 * 2.0;
    t50  = t11 * t30 * 2.0 + t12 * t31 * 2.0;
    t51  = t18 * t29 * 2.0 + t19 * t30 * 2.0;
    t52  = t17 * t30 * 2.0 + t18 * t31 * 2.0;
    t53  = t11 * t29 * 2.0 + -(t13 * t31 * 2.0);
    t54  = t17 * t29 * 2.0 + -(t19 * t31 * 2.0);
    t56  = 1.0 / sqrt((t29 * t29 + t30 * t30) + t31 * t31);
    t57  = pow(t56, 3.0);
    t60  = t11 * t16 * t56;
    t61  = t13 * t14 * t56;
    t62  = t12 * t16 * t56;
    t63  = t13 * t15 * t56;
    t80  = t29 * t56;
    t81  = t30 * t56;
    t82  = t31 * t56;
    t145 = t16 * t29;
    t87  = t145 * t49 * t57 / 2.0;
    t139 = t15 * t30;
    t88  = t139 * t49 * t57 / 2.0;
    t132 = t14 * t31;
    t89  = t132 * t49 * t57 / 2.0;
    t101 = t145 * t53 * t57 / 2.0;
    t103 = t139 * t53 * t57 / 2.0;
    t104 = t132 * t53 * t57 / 2.0;
    t119 = ((d + t16 * t80) + t14 * t82) + -(t15 * t81);
    t168 = (((t63 + -t62) + t87) + t89) + -t88;
    t169 = (((t11 * t15 * t56 + -(t12 * t14 * t56)) + t145 * t50 * t57 / 2.0)
            + t132 * t50 * t57 / 2.0)
           + -(t139 * t50 * t57 / 2.0);
    t170 = (((t15 * t19 * t56 + -(t16 * t18 * t56)) + t145 * t51 * t57 / 2.0)
            + t132 * t51 * t57 / 2.0)
           + -(t139 * t51 * t57 / 2.0);
    t171 = (((t15 * t17 * t56 + -(t14 * t18 * t56)) + t145 * t52 * t57 / 2.0)
            + t132 * t52 * t57 / 2.0)
           + -(t139 * t52 * t57 / 2.0);
    t172 = (((t61 + -t60) + t101) + t104) + -t103;
    t173 = (((t14 * t19 * t56 + -(t16 * t17 * t56)) + t145 * t54 * t57 / 2.0)
            + t132 * t54 * t57 / 2.0)
           + -(t139 * t54 * t57 / 2.0);
    t188          = ((((t62 + -t63) + t82) + t88) + -t87) + -t89;
    t202          = ((((t60 + -t61) + t81) + t103) + -t101) + -t104;
    t120          = t11 * t56 * t119;
    t121          = t12 * t56 * t119;
    t122          = t13 * t56 * t119;
    t123          = t17 * t56 * t119;
    t124          = t18 * t56 * t119;
    t125          = t19 * t56 * t119;
    t132          = t29 * t49 * t57 * t119 / 2.0;
    t88           = t30 * t49 * t57 * t119 / 2.0;
    t134          = t29 * t50 * t57 * t119 / 2.0;
    t135          = t31 * t49 * t57 * t119 / 2.0;
    t62           = t30 * t50 * t57 * t119 / 2.0;
    t137          = t31 * t50 * t57 * t119 / 2.0;
    t87           = t29 * t51 * t57 * t119 / 2.0;
    t139          = t30 * t51 * t57 * t119 / 2.0;
    t14           = t29 * t52 * t57 * t119 / 2.0;
    t16           = t31 * t51 * t57 * t119 / 2.0;
    t142          = t30 * t52 * t57 * t119 / 2.0;
    t63           = t31 * t52 * t57 * t119 / 2.0;
    t145          = t29 * t53 * t57 * t119 / 2.0;
    t148          = t30 * t53 * t57 * t119 / 2.0;
    t151          = t31 * t53 * t57 * t119 / 2.0;
    t154          = t29 * t54 * t57 * t119 / 2.0;
    t15           = t30 * t54 * t57 * t119 / 2.0;
    t101          = t31 * t54 * t57 * t119 / 2.0;
    t54           = t80 + t169;
    t52           = t80 + t171;
    t29           = t16 + t82 * t170;
    t30           = t15 + t81 * t173;
    t57           = (t122 + t151) + t82 * t172;
    t31           = -t14 + -(t80 * t171);
    t53           = (t14 + t80 * t52) - 1.0;
    t14           = t82 - t170;
    t19           = (-t16 + t82 * t14) - 1.0;
    t16           = t81 - t173;
    t13           = (-t15 + t81 * t16) - 1.0;
    t56           = (-t122 + t88) + t81 * t168;
    t49           = (-t121 + t137) + t82 * t169;
    t17           = (-t124 + t87) + t80 * t170;
    t18           = (-t123 + t142) + t81 * t171;
    t50           = (t121 + -t132) + -(t80 * t168);
    t51           = (t120 + -t62) + -(t81 * t169);
    t11           = (t125 + -t139) + -(t81 * t170);
    t103          = (t124 + -t63) + -(t82 * t171);
    t12           = (-t120 + t145) + t80 * t172;
    t104          = (t123 + -t154) + -(t80 * t173);
    t60           = (-t125 + -t101) + -(t82 * t173);
    t61           = (-t120 + t62) + t81 * t54;
    t89           = (t122 + -t88) + t81 * t188;
    t88           = (t124 + -t87) + t80 * t14;
    t63           = (-t124 + t63) + t82 * t52;
    t87           = (-t121 + t132) + -(t80 * t188);
    t62           = (-t125 + t139) + -(t81 * t14);
    t132          = (t120 + -t145) + t80 * t202;
    t139          = (t125 + t101) + -(t82 * t16);
    t145          = (-t122 + -t151) + t82 * t202;
    t16           = (-t123 + t154) + -(t80 * t16);
    t14           = (t121 + -t137) + -(t82 * t54);
    t15           = (t123 + -t142) + -(t81 * t52);
    result[0][0]  = -1.0;
    result[0][1]  = 0.0;
    result[0][2]  = 0.0;
    result[0][3]  = t19;
    result[0][4]  = t62;
    result[0][5]  = t88;
    result[0][6]  = t19;
    result[0][7]  = t62;
    result[0][8]  = t88;
    result[1][0]  = 0.0;
    result[1][1]  = -1.0;
    result[1][2]  = 0.0;
    result[1][3]  = t139;
    result[1][4]  = t13;
    result[1][5]  = t16;
    result[1][6]  = t139;
    result[1][7]  = t13;
    result[1][8]  = t16;
    result[2][0]  = 0.0;
    result[2][1]  = 0.0;
    result[2][2]  = -1.0;
    result[2][3]  = t63;
    result[2][4]  = t15;
    result[2][5]  = t53;
    result[2][6]  = t63;
    result[2][7]  = t15;
    result[2][8]  = t53;
    result[3][0]  = 1.0;
    result[3][1]  = 0.0;
    result[3][2]  = 0.0;
    result[3][3]  = t29;
    result[3][4]  = t11;
    result[3][5]  = t17;
    result[3][6]  = t29;
    result[3][7]  = t11;
    result[3][8]  = t17;
    result[4][0]  = 0.0;
    result[4][1]  = 1.0;
    result[4][2]  = 0.0;
    result[4][3]  = t60;
    result[4][4]  = t30;
    result[4][5]  = t104;
    result[4][6]  = t60;
    result[4][7]  = t30;
    result[4][8]  = t104;
    result[5][0]  = 0.0;
    result[5][1]  = 0.0;
    result[5][2]  = 1.0;
    result[5][3]  = t103;
    result[5][4]  = t18;
    result[5][5]  = t31;
    result[5][6]  = t103;
    result[5][7]  = t18;
    result[5][8]  = t31;
    result[6][0]  = 0.0;
    result[6][1]  = 0.0;
    result[6][2]  = 0.0;
    t15           = t135 + -(t82 * t188);
    result[6][3]  = t15 + 1.0;
    result[6][4]  = t89;
    result[6][5]  = t87;
    result[6][6]  = t15;
    result[6][7]  = t89;
    result[6][8]  = t87;
    result[7][0]  = 0.0;
    result[7][1]  = 0.0;
    result[7][2]  = 0.0;
    result[7][3]  = t145;
    t15           = t148 + -(t81 * t202);
    result[7][4]  = t15 + 1.0;
    result[7][5]  = t132;
    result[7][6]  = t145;
    result[7][7]  = t15;
    result[7][8]  = t132;
    result[8][0]  = 0.0;
    result[8][1]  = 0.0;
    result[8][2]  = 0.0;
    result[8][3]  = t14;
    result[8][4]  = t61;
    t15           = -t134 + -(t80 * t54);
    result[8][5]  = t15 + 1.0;
    result[8][6]  = t14;
    result[8][7]  = t61;
    result[8][8]  = t15;
    result[9][0]  = 0.0;
    result[9][1]  = 0.0;
    result[9][2]  = 0.0;
    t15           = -t135 + -(t82 * t168);
    result[9][3]  = t15;
    result[9][4]  = t56;
    result[9][5]  = t50;
    result[9][6]  = t15 + 1.0;
    result[9][7]  = t56;
    result[9][8]  = t50;
    result[10][0] = 0.0;
    result[10][1] = 0.0;
    result[10][2] = 0.0;
    result[10][3] = t57;
    t15           = -t148 + -(t81 * t172);
    result[10][4] = t15;
    result[10][5] = t12;
    result[10][6] = t57;
    result[10][7] = t15 + 1.0;
    result[10][8] = t12;
    result[11][0] = 0.0;
    result[11][1] = 0.0;
    result[11][2] = 0.0;
    result[11][3] = t49;
    result[11][4] = t51;
    t15           = t134 + t80 * t169;
    result[11][5] = t15;
    result[11][6] = t49;
    result[11][7] = t51;
    result[11][8] = t15 + 1.0;
}

__host__ __device__ void pDmpx_ee(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pDmpx)
{
    pDmpx_ee(d_hatSqrt,
             x0.x,
             x0.y,
             x0.z,
             x1.x,
             x1.y,
             x1.z,
             x2.x,
             x2.y,
             x2.z,
             x3.x,
             x3.y,
             x3.z,
             pDmpx.m);
}

__host__ __device__ void pDmpx_pee_reflect(double d,
                                           double x11,
                                           double x12,
                                           double x13,
                                           double x21,
                                           double x22,
                                           double x23,
                                           double x31,
                                           double x32,
                                           double x33,
                                           double x41,
                                           double x42,
                                           double x43,
                                           double result[12][4])
{
    double t100;
    double t101;
    double t106;
    double t107;
    double t11;
    double t110;
    double t111;
    double t12;
    double t126;
    double t127;
    double t13;
    double t14;
    double t15;
    double t16;
    double t160;
    double t168;
    double t169;
    double t17;
    double t170;
    double t172;
    double t173;
    double t174;
    double t175;
    double t176;
    double t177;
    double t178;
    double t179;
    double t18;
    double t180;
    double t181;
    double t182;
    double t187;
    double t188;
    double t189;
    double t19;
    double t190;
    double t191;
    double t192;
    double t193;
    double t196;
    double t197;
    double t29;
    double t291;
    double t292;
    double t293;
    double t294;
    double t297;
    double t298;
    double t299;
    double t30;
    double t300;
    double t31;
    double t32;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t56;
    double t58;
    double t59;
    double t64;
    double t65;
    double t74;
    double t75;
    double t84;
    double t85;
    double t86;
    double t87;
    double t88;
    double t89;
    double t90;
    double t97;
    double t98;
    /* pDmpx_pee_reflect */
    /*     RESULT =
     * pDmpx_pee_reflect(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Feb-2022 18:28:56 */
    t11 = -x21 + x11;
    t12 = -x22 + x12;
    t13 = -x23 + x13;
    t14 = -x41 + x11;
    t15 = -x31 + x21;
    t16 = -x42 + x12;
    t17 = -x32 + x22;
    t18 = -x43 + x13;
    t19 = -x33 + x23;
    t29 = t14 * t17 + -(t15 * t16);
    t30 = t14 * t19 + -(t15 * t18);
    t31 = t16 * t19 + -(t17 * t18);
    t32 = fabs(t29);
    t33 = fabs(t30);
    t34 = fabs(t31);
    t35 = t29;
    if(t29 < 0.0)
    {
        t35 = -1.0;
    }
    else if(t29 > 0.0)
    {
        t35 = 1.0;
    }
    else if(t29 == 0.0)
    {
        t35 = 0.0;
    }
    t36 = t30;
    if(t30 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t30 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t30 == 0.0)
    {
        t36 = 0.0;
    }
    t37 = t31;
    if(t31 < 0.0)
    {
        t37 = -1.0;
    }
    else if(t31 > 0.0)
    {
        t37 = 1.0;
    }
    else if(t31 == 0.0)
    {
        t37 = 0.0;
    }
    t87  = t16 * t32 * t35 * 2.0 + t18 * t33 * t36 * 2.0;
    t88  = t17 * t32 * t35 * 2.0 + t19 * t33 * t36 * 2.0;
    t89  = t14 * t33 * t36 * 2.0 + t16 * t34 * t37 * 2.0;
    t90  = t15 * t33 * t36 * 2.0 + t17 * t34 * t37 * 2.0;
    t56  = 1.0 / sqrt((t32 * t32 + t33 * t33) + t34 * t34);
    t97  = t14 * t32 * t35 * 2.0 + -(t18 * t34 * t37 * 2.0);
    t98  = t15 * t32 * t35 * 2.0 + -(t19 * t34 * t37 * 2.0);
    t36  = pow(t56, 3.0);
    t58  = t11 * t14 * t56;
    t59  = t11 * t15 * t56;
    t64  = t11 * t18 * t56;
    t65  = t11 * t19 * t56;
    t35  = t12 * t16 * t56;
    t37  = t12 * t17 * t56;
    t74  = t13 * t18 * t56;
    t75  = t13 * t19 * t56;
    t84  = t29 * t56;
    t85  = t30 * t56;
    t86  = t31 * t56;
    t187 = t11 * t30 * t36;
    t106 = t187 * t87 / 2.0;
    t107 = t187 * t88 / 2.0;
    t193 = t12 * t31 * t36;
    t110 = t193 * t87 / 2.0;
    t111 = t193 * t88 / 2.0;
    t100 = t12 * t84 + t13 * t85;
    t101 = t11 * t85 + t12 * t86;
    t172 = (-t64 + t106) + t110;
    t173 = (-t65 + t107) + t111;
    t174 = (t12 * t18 * t56 + t187 * t97 / 2.0) + t193 * t97 / 2.0;
    t175 = (t12 * t19 * t56 + t187 * t98 / 2.0) + t193 * t98 / 2.0;
    t32  = t12 * t29 * t36;
    t33  = t13 * t30 * t36;
    t176 = (-(t13 * t14 * t56) + t32 * t89 / 2.0) + t33 * t89 / 2.0;
    t177 = (-(t13 * t15 * t56) + t32 * t90 / 2.0) + t33 * t90 / 2.0;
    t178 = (-(t12 * t14 * t56) + t32 * t97 / 2.0) + t33 * t97 / 2.0;
    t179 = (-(t12 * t15 * t56) + t32 * t98 / 2.0) + t33 * t98 / 2.0;
    t126 = fabs(t100);
    t127 = fabs(t101);
    t30  = t100;
    if(t100 < 0.0)
    {
        t30 = -1.0;
    }
    else if(t100 > 0.0)
    {
        t30 = 1.0;
    }
    else if(t100 == 0.0)
    {
        t30 = 0.0;
    }
    t12 = t101;
    if(t101 < 0.0)
    {
        t12 = -1.0;
    }
    else if(t101 > 0.0)
    {
        t12 = 1.0;
    }
    else if(t101 == 0.0)
    {
        t12 = 0.0;
    }
    t160 = t11 * t84 + -(t13 * t86);
    t34  = t13 * t31 * t36;
    t36 *= t11 * t29;
    t168 = (t11 * t16 * t56 + t34 * t87 / 2.0) + -(t36 * t87 / 2.0);
    t169 = (t11 * t17 * t56 + t34 * t88 / 2.0) + -(t36 * t88 / 2.0);
    t170 = (t13 * t16 * t56 + t36 * t89 / 2.0) + -(t34 * t89 / 2.0);
    t17  = (t13 * t17 * t56 + t36 * t90 / 2.0) + -(t34 * t90 / 2.0);
    t180 = ((t35 + t74) + -(t32 * t87 / 2.0)) + -(t33 * t87 / 2.0);
    t181 = ((t37 + t75) + -(t32 * t88 / 2.0)) + -(t33 * t88 / 2.0);
    t182 = ((t58 + t35) + -(t187 * t89 / 2.0)) + -(t193 * t89 / 2.0);
    t13  = ((t59 + t37) + -(t187 * t90 / 2.0)) + -(t193 * t90 / 2.0);
    t74  = ((t58 + t74) + t34 * t97 / 2.0) + -(t36 * t97 / 2.0);
    t56  = ((t59 + t75) + t34 * t98 / 2.0) + -(t36 * t98 / 2.0);
    t188 = ((t64 + t85) + -t106) + -t110;
    t189 = ((t65 + t85) + -t107) + -t111;
    t190 = t86 + t174;
    t191 = t86 + t175;
    t192 = t85 + t176;
    t193 = t85 + t177;
    t196 = t84 + t178;
    t197 = t84 + t179;
    t19  = fabs(t160);
    t36  = t160;
    if(t160 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t160 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t160 == 0.0)
    {
        t36 = 0.0;
    }
    t31  = t84 + t168;
    t187 = t84 + t169;
    t15  = t126 * t30;
    t33  = t15 * t180 * 2.0;
    t32  = t15 * t181 * 2.0;
    t12 *= t127;
    t34 = t12 * t182 * 2.0;
    t35 = t12 * t13 * 2.0;
    t36 *= t19;
    t37  = t36 * t74 * 2.0;
    t30  = t36 * t56 * 2.0;
    t291 = (-(t12 * t172 * 2.0) + t36 * t168 * 2.0) + t33;
    t292 = (-(t12 * t173 * 2.0) + t36 * t169 * 2.0) + t32;
    t293 = (t15 * t176 * 2.0 + t36 * t170 * 2.0) + -t34;
    t294 = (t15 * t177 * 2.0 + t36 * t17 * 2.0) + -t35;
    t297 = (t33 + t12 * t188 * 2.0) + t36 * t31 * 2.0;
    t298 = (t32 + t12 * t189 * 2.0) + t36 * t187 * 2.0;
    t29  = t86 - t170;
    t299 = (t34 + -(t15 * t192 * 2.0)) + t36 * t29 * 2.0;
    t58  = t86 - t17;
    t300 = (t35 + -(t15 * t193 * 2.0)) + t36 * t58 * 2.0;
    t86  = 1.0 / sqrt((t126 * t126 + t127 * t127) + t19 * t19);
    t88  = (t12 * t174 * 2.0 + t15 * t178 * 2.0) + -t37;
    t90  = (t12 * t175 * 2.0 + t15 * t179 * 2.0) + -t30;
    t85  = (-t37 + t12 * t190 * 2.0) + t15 * t196 * 2.0;
    t84  = (-t30 + t12 * t191 * 2.0) + t15 * t197 * 2.0;
    t11  = pow(t86, 3.0);
    t126 = t100 * t86;
    t127 = t101 * t86;
    t15  = t160 * t86;
    t36  = t14 * t180 * t86;
    t35  = t14 * t181 * t86;
    t33  = t18 * t182 * t86;
    t12  = t18 * t13 * t86;
    t32  = t16 * t74 * t86;
    t37  = t16 * t56 * t86;
    t19  = t14 * t100 * t11;
    t30  = t18 * t101 * t11;
    t34  = t16 * t160 * t11;
    t97 = ((((t36 - t16 * t31 * t86) - t18 * t188 * t86) - t19 * t297 / 2.0) + t30 * t297 / 2.0)
          + t34 * t297 / 2.0;
    t111 = ((d + t14 * t126) + t18 * -t127) + t16 * -t15;
    t89 = ((((t18 * t172 * t86 + -(t16 * t168 * t86)) + t36) + t30 * t291 / 2.0)
           + -(t19 * t291 / 2.0))
          + t34 * t291 / 2.0;
    t107 = ((((t14 * t176 * t86 + -(t16 * t170 * t86)) + t33) + t30 * t293 / 2.0)
            + -(t19 * t293 / 2.0))
           + t34 * t293 / 2.0;
    t31 = ((((t14 * t178 * t86 + -(t18 * t174 * t86)) + t32) + t30 * t88 / 2.0)
           + -(t19 * t88 / 2.0))
          + t34 * t88 / 2.0;
    t36 = t16 * t86;
    t65 = ((((t33 + t14 * t192 * t86) + t36 * t29) + t19 * t299 / 2.0) + -(t30 * t299 / 2.0))
          + -(t34 * t299 / 2.0);
    t32 = ((((t32 + t14 * t196 * t86) + -(t18 * t190 * t86)) + t30 * t85 / 2.0)
           + -(t19 * t85 / 2.0))
          + t34 * t85 / 2.0;
    t110 = (((((t126 + t18 * t173 * t86) + -(t16 * t169 * t86)) + t35) + t30 * t292 / 2.0)
            + -(t19 * t292 / 2.0))
           + t34 * t292 / 2.0;
    t106 = (((((-t127 + t14 * t177 * t86) + -(t16 * t17 * t86)) + t12) + t30 * t294 / 2.0)
            + -(t19 * t294 / 2.0))
           + t34 * t294 / 2.0;
    t33 = (((((-t15 + t14 * t179 * t86) + -(t18 * t175 * t86)) + t37) + t30 * t90 / 2.0)
           + -(t19 * t90 / 2.0))
          + t34 * t90 / 2.0;
    t64 = (((((t126 + t35) + -(t16 * t187 * t86)) + -(t18 * t189 * t86)) + t30 * t298 / 2.0)
           + -(t19 * t298 / 2.0))
          + t34 * t298 / 2.0;
    t87 = (((((-t127 + t12) + t14 * t193 * t86) + t36 * t58) + t19 * t300 / 2.0)
           + -(t30 * t300 / 2.0))
          + -(t34 * t300 / 2.0);
    t36 = (((((-t15 + t37) + t14 * t197 * t86) + -(t18 * t191 * t86)) + t30 * t84 / 2.0)
           + -(t19 * t84 / 2.0))
          + t34 * t84 / 2.0;
    t75          = t180 * t86 * t111;
    t59          = t181 * t86 * t111;
    t98          = t182 * t86 * t111;
    t17          = t13 * t86 * t111;
    t13          = t100 * t11 * t111;
    t74          = t101 * t11 * t111;
    t58          = (t172 * t86 * t111 + t74 * t291 / 2.0) + -t127 * t89;
    t193         = (t193 * t86 * t111 + t13 * t300 / 2.0) + t126 * t87;
    t187         = (t176 * t86 * t111 + -(t13 * t293 / 2.0)) + t126 * t107;
    t56          = (t178 * t86 * t111 + -(t13 * t88 / 2.0)) + t126 * t31;
    t11          = (-(t174 * t86 * t111) + t74 * t88 / 2.0) + -t127 * t31;
    t29          = (-(t173 * t86 * t111) + -(t74 * t292 / 2.0)) + t127 * t110;
    t31          = (-(t177 * t86 * t111) + t13 * t294 / 2.0) + -(t126 * t106);
    t15          = (t175 * t86 * t111 + -(t74 * t90 / 2.0)) + t127 * t33;
    t12          = (-(t179 * t86 * t111) + t13 * t90 / 2.0) + -(t126 * t33);
    t30          = (t188 * t86 * t111 + -(t74 * t297 / 2.0)) + t127 * t97;
    t19          = (-(t192 * t86 * t111) + -(t13 * t299 / 2.0)) + -(t126 * t65);
    t37          = (t190 * t86 * t111 + -(t74 * t85 / 2.0)) + t127 * t32;
    t35          = (-(t196 * t86 * t111) + t13 * t85 / 2.0) + -(t126 * t32);
    t34          = (-(t189 * t86 * t111) + t74 * t298 / 2.0) + -t127 * t64;
    t32          = (t197 * t86 * t111 + -(t13 * t84 / 2.0)) + t126 * t36;
    t33          = (-(t191 * t86 * t111) + t74 * t84 / 2.0) + -t127 * t36;
    t36          = (t59 + -(t13 * t298 / 2.0)) + t126 * t64;
    result[0][0] = t36 - 1.0;
    result[0][1] = t34;
    result[0][2] = t36;
    result[0][3] = t34;
    result[1][0] = t32;
    result[1][1] = t33;
    result[1][2] = t32;
    result[1][3] = t33;
    result[2][0] = t193;
    t36          = (t17 + -(t74 * t300 / 2.0)) + -t127 * t87;
    result[2][1] = t36 - 1.0;
    result[2][2] = t193;
    result[2][3] = t36;
    t36          = (-t75 + t13 * t297 / 2.0) + -t126 * t97;
    result[3][0] = t36;
    result[3][1] = t30;
    result[3][2] = t36 - 1.0;
    result[3][3] = t30;
    result[4][0] = t35;
    result[4][1] = t37;
    result[4][2] = t35;
    result[4][3] = t37;
    result[5][0] = t19;
    t36          = (-t98 + t74 * t299 / 2.0) + t127 * t65;
    result[5][1] = t36;
    result[5][2] = t19;
    result[5][3] = t36 - 1.0;
    t36          = (t75 + -(t13 * t291 / 2.0)) + t126 * t89;
    result[6][0] = t36;
    result[6][1] = t58;
    result[6][2] = t36 + 1.0;
    result[6][3] = t58;
    result[7][0] = t56;
    result[7][1] = t11;
    result[7][2] = t56;
    result[7][3] = t11;
    result[8][0] = t187;
    t36          = (t98 + t74 * t293 / 2.0) + -t127 * t107;
    result[8][1] = t36;
    result[8][2] = t187;
    result[8][3] = t36 + 1.0;
    t36          = (-t59 + t13 * t292 / 2.0) + -(t126 * t110);
    result[9][0] = t36 + 1.0;
    result[9][1] = t29;
    result[9][2] = t36;
    result[9][3] = t29;
    result[10][0] = t12;
    result[10][1] = t15;
    result[10][2] = t12;
    result[10][3] = t15;
    result[11][0] = t31;
    t36           = (-t17 + -(t74 * t294 / 2.0)) + t127 * t106;
    result[11][1] = t36 + 1.0;
    result[11][2] = t31;
    result[11][3] = t36;
}

__host__ __device__ void pDmpx_pee_reflect(const double3&           x0,
                                           const double3&           x1,
                                           const double3&           x2,
                                           const double3&           x3,
                                           double                   d_hatSqrt,
                                           __GEIGEN__::Matrix12x4d& pDmpx)
{
    pDmpx_pee_reflect(d_hatSqrt,
                      x0.x,
                      x0.y,
                      x0.z,
                      x1.x,
                      x1.y,
                      x1.z,
                      x2.x,
                      x2.y,
                      x2.z,
                      x3.x,
                      x3.y,
                      x3.z,
                      pDmpx.m);
}


__host__ __device__ void ft_2(const double ct[270], double result[12][4])
{
    double ct_idx_0;
    double ct_idx_1;
    double ct_idx_179;
    double ct_idx_180;
    double ct_idx_183;
    double ct_idx_184;
    double ct_idx_185;
    double ct_idx_186;
    double ct_idx_189;
    double ct_idx_190;
    double ct_idx_195;
    double ct_idx_196;
    double ct_idx_197;
    double ct_idx_198;
    double ct_idx_199;
    double ct_idx_2;
    double ct_idx_200;
    double ct_idx_201;
    double ct_idx_202;
    double ct_idx_203;
    double ct_idx_204;
    double ct_idx_205;
    double ct_idx_206;
    double ct_idx_207;
    double ct_idx_208;
    double ct_idx_209;
    double ct_idx_210;
    double ct_idx_211;
    double ct_idx_212;
    double ct_idx_213;
    double ct_idx_214;
    double ct_idx_215;
    double ct_idx_216;
    double ct_idx_218;
    double ct_idx_219;
    double ct_idx_220;
    double ct_idx_221;
    double ct_idx_222;
    double ct_idx_223;
    double ct_idx_224;
    double ct_idx_225;
    double ct_idx_226;
    double ct_idx_227;
    double ct_idx_229;
    double ct_idx_230;
    double ct_idx_231;
    double ct_idx_232;
    double ct_idx_233;
    double ct_idx_234;
    double ct_idx_235;
    double ct_idx_236;
    double ct_idx_237;
    double ct_idx_238;
    double ct_idx_239;
    double ct_idx_240;
    double ct_idx_241;
    double ct_idx_242;
    double ct_idx_243;
    double ct_idx_244;
    double ct_idx_245;
    double ct_idx_246;
    double ct_idx_247;
    double ct_idx_248;
    double ct_idx_249;
    double ct_idx_250;
    double ct_idx_251;
    double ct_idx_252;
    double ct_idx_256;
    double ct_idx_257;
    double ct_idx_258;
    double ct_idx_259;
    double ct_idx_260;
    double ct_idx_261;
    double ct_idx_262;
    double ct_idx_263;
    double ct_idx_264;
    double ct_idx_265;
    double ct_idx_267;
    double ct_idx_268;
    double ct_idx_269;
    double ct_idx_270;
    double ct_idx_271;
    double ct_idx_272;
    double ct_idx_273;
    double ct_idx_274;
    double ct_idx_275;
    double ct_idx_276;
    double ct_idx_278;
    double ct_idx_279;
    double ct_idx_280;
    double ct_idx_281;
    double ct_idx_282;
    double ct_idx_283;
    double ct_idx_284;
    double ct_idx_285;
    double ct_idx_286;
    double ct_idx_287;
    double ct_idx_289;
    double ct_idx_290;
    double ct_idx_295;
    double ct_idx_296;
    double ct_idx_298;
    double ct_idx_299;
    double ct_idx_3;
    double ct_idx_300;
    double ct_idx_301;
    double ct_idx_302;
    double ct_idx_303;
    double ct_idx_304;
    double ct_idx_305;
    double ct_idx_306;
    double ct_idx_307;
    double ct_idx_309;
    double ct_idx_310;
    double ct_idx_311;
    double ct_idx_312;
    double ct_idx_316;
    double ct_idx_317;
    double ct_idx_318;
    double ct_idx_319;
    double ct_idx_320;
    double ct_idx_321;
    double ct_idx_322;
    double ct_idx_323;
    double ct_idx_324;
    double ct_idx_326;
    double ct_idx_327;
    double ct_idx_328;
    double ct_idx_329;
    double ct_idx_330;
    double ct_idx_331;
    double ct_idx_332;
    double ct_idx_333;
    double ct_idx_334;
    double ct_idx_335;
    double ct_idx_337;
    double ct_idx_338;
    double ct_idx_339;
    double ct_idx_340;
    double ct_idx_341;
    double ct_idx_355;
    double ct_idx_356;
    double ct_idx_357;
    double ct_idx_358;
    double ct_idx_361;
    double ct_idx_362;
    double ct_idx_363;
    double ct_idx_364;
    double ct_idx_365;
    double ct_idx_366;
    double ct_idx_367;
    double ct_idx_368;
    double ct_idx_371;
    double ct_idx_371_tmp;
    double ct_idx_372;
    double ct_idx_373;
    double ct_idx_374;
    double ct_idx_375;
    double ct_idx_376;
    double ct_idx_376_tmp;
    double ct_idx_377;
    double ct_idx_378;
    double ct_idx_379;
    double ct_idx_380;
    double ct_idx_4;
    double ct_idx_5;
    double ct_idx_6;
    double ct_idx_7;
    double ct_idx_8;
    double ct_idx_9;
    double t518;
    double t531;
    double t534;
    double t535;
    double t536;
    double t537;
    double t538;
    double t539;
    double t540;
    double t541;
    double t544;
    double t545;
    double t550;
    double t551;
    double t682;
    double t683;
    double t684;
    double t685;
    double t686;
    double t687;
    double t724_tmp;
    double t726_tmp;
    double t730_tmp;
    double t782_tmp;
    double t805_tmp;
    double t807_tmp;
    double t832;
    double t833;
    double t834;
    double t836;
    double t836_tmp;
    double t837;
    double t839;
    double t847;
    double t852;
    double t855;
    double t860;
    double t860_tmp;
    double t865;
    double t888;
    double t889;
    double t890;
    double t891;
    double t892;
    double t893;
    double t894;
    double t896;
    double t902;
    double t914;
    double t915;
    double t916;
    double t917;
    double t918;
    double t919;
    double t920;
    double t946;
    double t952;
    double t953;
    double t954;
    double t955;
    double t956;
    double t986;
    double t987;
    double t988;
    double t989;
    double t990;
    double t991;
    t724_tmp = ct[13] * ct[76] * ct[166];
    t726_tmp = ct[55] * ct[77] * ct[166];
    t730_tmp = ct[33] * ct[78] * ct[166];
    t518 = ((ct[0] + ct[13] * ct[180]) + ct[55] * -ct[181]) + ct[33] * -ct[184];
    t832 = ((((ct[211] + -ct[207]) + ct[219]) + t726_tmp * ct[227] / 2.0)
            + -(t724_tmp * ct[227] / 2.0))
           + t730_tmp * ct[227] / 2.0;
    t833 = ((((ct[215] + -ct[209]) + ct[221]) + t726_tmp * ct[229] / 2.0)
            + -(t724_tmp * ct[229] / 2.0))
           + t730_tmp * ct[229] / 2.0;
    t834 = ((((ct[217] + -ct[213]) + ct[223]) + t726_tmp * ct[231] / 2.0)
            + -(t724_tmp * ct[231] / 2.0))
           + t730_tmp * ct[231] / 2.0;
    t531     = ct[33] * ct[165];
    t836_tmp = ct[2] - ct[123];
    t836     = ((((ct[221] + ct[13] * ct[161] * ct[165]) + t531 * t836_tmp)
             + t724_tmp * ct[235] / 2.0)
            + -(t726_tmp * ct[235] / 2.0))
           + -(t730_tmp * ct[235] / 2.0);
    t837 = ((((ct[223] + ct[13] * ct[163] * ct[165]) + -(ct[55] * ct[159] * ct[165]))
             + t726_tmp * ct[237] / 2.0)
            + -(t724_tmp * ct[237] / 2.0))
           + t730_tmp * ct[237] / 2.0;
    t839 = (((((ct[180] + ct[212]) + -ct[208]) + ct[220]) + t726_tmp * ct[228] / 2.0)
            + -(t724_tmp * ct[228] / 2.0))
           + t730_tmp * ct[228] / 2.0;
    t847 = (((((-ct[181] + ct[216]) + -ct[210]) + ct[222]) + t726_tmp * ct[230] / 2.0)
            + -(t724_tmp * ct[230] / 2.0))
           + t730_tmp * ct[230] / 2.0;
    t852 = (((((-ct[184] + ct[218]) + -ct[214]) + ct[224]) + t726_tmp * ct[232] / 2.0)
            + -(t724_tmp * ct[232] / 2.0))
           + t730_tmp * ct[232] / 2.0;
    t855 = (((((ct[180] + ct[220]) + -ct[226]) + -(ct[55] * ct[158] * ct[165]))
             + t726_tmp * ct[234] / 2.0)
            + -(t724_tmp * ct[234] / 2.0))
           + t730_tmp * ct[234] / 2.0;
    t860_tmp = ct[2] - ct[124];
    t860 = (((((-ct[181] + ct[222]) + ct[13] * ct[162] * ct[165]) + t531 * t860_tmp)
             + t724_tmp * ct[236] / 2.0)
            + -(t726_tmp * ct[236] / 2.0))
           + -(t730_tmp * ct[236] / 2.0);
    t865 = (((((-ct[184] + ct[224]) + ct[13] * ct[164] * ct[165])
              + -(ct[55] * ct[160] * ct[165]))
             + t726_tmp * ct[238] / 2.0)
            + -(t724_tmp * ct[238] / 2.0))
           + t730_tmp * ct[238] / 2.0;
    t531     = ct[180] * t518;
    t534     = -ct[181] * t518;
    t537     = -ct[184] * t518;
    t682     = ct[149] * ct[165] * t518;
    t683     = ct[150] * ct[165] * t518;
    t684     = ct[151] * ct[165] * t518;
    t685     = ct[152] * ct[165] * t518;
    t686     = ct[153] * ct[165] * t518;
    t687     = ct[154] * ct[165] * t518;
    t782_tmp = ct[77] * ct[166] * t518;
    t805_tmp = ct[78] * ct[166] * t518;
    t807_tmp = ct[76] * ct[166] * t518;
    t535     = t531 + ct[264];
    t536     = t531 + ct[267];
    t538     = t534 + ct[266];
    t539     = t534 + ct[269];
    t540     = t537 + ct[265];
    t541     = t537 + ct[268];
    t889 = (ct[125] * ct[165] * t518 + t782_tmp * ct[227] / 2.0) + -ct[181] * t832;
    t896 = (t684 + t782_tmp * ct[229] / 2.0) + -ct[181] * t833;
    t902 = (t686 + t805_tmp * ct[231] / 2.0) + -ct[184] * t834;
    t914 = (ct[126] * ct[165] * t518 + t782_tmp * ct[228] / 2.0) + -ct[181] * t839;
    t952 = (ct[161] * ct[165] * t518 + t807_tmp * ct[235] / 2.0) + ct[180] * t836;
    t953 = (t686 + t805_tmp * ct[237] / 2.0) + -ct[184] * t837;
    t987 = (ct[162] * ct[165] * t518 + t807_tmp * ct[236] / 2.0) + ct[180] * t860;
    t988 = (t687 + t805_tmp * ct[238] / 2.0) + -ct[184] * t865;
    t531 = ct[33] * ct[241];
    t544 = t531 * t540;
    t534 = ct[44] * ct[241];
    t545 = t534 * t540;
    t550 = t531 * t541;
    t551 = t534 * t541;
    t888 = (ct[129] * ct[165] * t518 + -(t807_tmp * ct[229] / 2.0)) + ct[180] * t833;
    t890 = (ct[121] * ct[165] * t518 + -(t805_tmp * ct[227] / 2.0)) + ct[184] * t832;
    t891 = (ct[123] * ct[165] * t518 + -(t805_tmp * ct[229] / 2.0)) + ct[184] * t833;
    t892 = (ct[127] * ct[165] * t518 + -(t782_tmp * ct[231] / 2.0)) + ct[181] * t834;
    t893 = (ct[131] * ct[165] * t518 + -(t807_tmp * ct[231] / 2.0)) + ct[180] * t834;
    t894 = (t682 + -(t807_tmp * ct[227] / 2.0)) + ct[180] * t832;
    t915 = (ct[130] * ct[165] * t518 + -(t807_tmp * ct[230] / 2.0)) + ct[180] * t847;
    t916 = (ct[122] * ct[165] * t518 + -(t805_tmp * ct[228] / 2.0)) + ct[184] * t839;
    t917 = (ct[124] * ct[165] * t518 + -(t805_tmp * ct[230] / 2.0)) + ct[184] * t847;
    t918 = (ct[128] * ct[165] * t518 + -(t782_tmp * ct[232] / 2.0)) + ct[181] * t852;
    t919 = (ct[132] * ct[165] * t518 + -(t807_tmp * ct[232] / 2.0)) + ct[180] * t852;
    t920 = (t683 + -(t807_tmp * ct[228] / 2.0)) + ct[180] * t839;
    t946 = (-t684 + t782_tmp * ct[235] / 2.0) + ct[181] * t836;
    t531 = ct[165] * t518;
    t954 = (-(t531 * t836_tmp) + t805_tmp * ct[235] / 2.0) + ct[184] * t836;
    t955 = (ct[159] * ct[165] * t518 + -(t782_tmp * ct[237] / 2.0)) + ct[181] * t837;
    t956 = (ct[163] * ct[165] * t518 + -(t807_tmp * ct[237] / 2.0)) + ct[180] * t837;
    t534 = (t683 + -(t807_tmp * ct[234] / 2.0)) + ct[180] * t855;
    t537 = (-t685 + t782_tmp * ct[236] / 2.0) + ct[181] * t860;
    t686 = (ct[158] * ct[165] * t518 + -(t782_tmp * ct[234] / 2.0)) + ct[181] * t855;
    t986 = (ct[156] * ct[165] * t518 + -(t805_tmp * ct[234] / 2.0)) + ct[184] * t855;
    t989 = (-(t531 * t860_tmp) + t805_tmp * ct[236] / 2.0) + ct[184] * t860;
    t990 = (ct[160] * ct[165] * t518 + -(t782_tmp * ct[238] / 2.0)) + ct[181] * t865;
    t991 = (ct[164] * ct[165] * t518 + -(t807_tmp * ct[238] / 2.0)) + ct[180] * t865;
    ct_idx_0   = ct[12] * t534;
    ct_idx_1   = ct[11] * t537;
    ct_idx_2   = ct[11] * t686;
    ct_idx_3   = ct[79] * t534;
    ct_idx_4   = ct[12] * t987;
    ct_idx_5   = -ct[79] * t537;
    ct_idx_6   = ct[80] * t686;
    ct_idx_7   = ct[11] * t990;
    ct_idx_8   = ct[12] * t991;
    ct_idx_9   = ct[79] * t987;
    ct_idx_179 = ct[244] * t540;
    ct_idx_180 = ct[245] * t540;
    ct_idx_183 = ct[246] * t540;
    ct_idx_184 = ct[247] * t540;
    ct_idx_185 = ct[244] * t541;
    ct_idx_186 = ct[245] * t541;
    ct_idx_189 = ct[246] * t541;
    ct_idx_190 = ct[247] * t541;
    t834       = ct[33] * ct[85] * ct[239] * ct[7];
    ct_idx_195 = t834 * t535;
    t832       = ct[44] * ct[85] * ct[239] * ct[7];
    ct_idx_196 = t832 * t535;
    t839       = ct[55] * ct[85] * ct[239] * ct[7];
    ct_idx_197 = t839 * t535;
    t684       = ct[66] * ct[85] * ct[239] * ct[7];
    ct_idx_198 = t684 * t535;
    t836_tmp   = ct[13] * ct[100] * ct[239] * ct[7];
    ct_idx_199 = t836_tmp * t535;
    t836       = ct[22] * ct[100] * ct[239] * ct[7];
    ct_idx_200 = t836 * t535;
    t837       = ct[33] * ct[100] * ct[239] * ct[7];
    ct_idx_201 = t837 * t535;
    t683       = ct[44] * ct[100] * ct[239] * ct[7];
    ct_idx_202 = t683 * t535;
    ct_idx_203 = t834 * t536;
    ct_idx_204 = t832 * t536;
    ct_idx_205 = t839 * t536;
    ct_idx_206 = t684 * t536;
    ct_idx_207 = t836_tmp * t536;
    ct_idx_208 = t836 * t536;
    ct_idx_209 = t837 * t536;
    ct_idx_210 = t683 * t536;
    t855       = ct[85] * ct[242];
    t531       = t855 * ct[3];
    ct_idx_211 = t531 * t540 / 2.0;
    t534       = t855 * ct[4];
    ct_idx_212 = t534 * t540 / 2.0;
    t860       = ct[100] * ct[242];
    t537       = t860 * ct[3];
    ct_idx_213 = t537 * t540 / 2.0;
    t686       = t860 * ct[4];
    ct_idx_214 = t686 * t540 / 2.0;
    ct_idx_215 = t531 * t541 / 2.0;
    ct_idx_216 = t534 * t541 / 2.0;
    t531       = t855 * ct[5];
    ct_idx_218 = t531 * t540 / 2.0;
    t833       = t855 * ct[6];
    ct_idx_219 = t833 * t540 / 2.0;
    ct_idx_220 = t537 * t541 / 2.0;
    ct_idx_221 = t686 * t541 / 2.0;
    t534       = t860 * ct[5];
    ct_idx_222 = t534 * t540 / 2.0;
    t537       = t860 * ct[6];
    ct_idx_223 = t537 * t540 / 2.0;
    ct_idx_224 = t531 * t541 / 2.0;
    ct_idx_225 = t833 * t541 / 2.0;
    ct_idx_226 = t534 * t541 / 2.0;
    ct_idx_227 = t537 * t541 / 2.0;
    ct_idx_229 = t834 * t538;
    ct_idx_230 = t832 * t538;
    ct_idx_231 = t839 * t538;
    ct_idx_232 = t684 * t538;
    ct_idx_233 = t836_tmp * t538;
    ct_idx_234 = t836 * t538;
    ct_idx_235 = t837 * t538;
    ct_idx_236 = t683 * t538;
    ct_idx_237 = t834 * t539;
    ct_idx_238 = t832 * t539;
    ct_idx_239 = t839 * t539;
    ct_idx_240 = t684 * t539;
    ct_idx_241 = t836_tmp * t539;
    ct_idx_242 = t836 * t539;
    ct_idx_243 = t837 * t539;
    ct_idx_244 = t683 * t539;
    t531       = t855 * ct[9];
    ct_idx_245 = t531 * t540 / 2.0;
    t534       = t855 * ct[10];
    ct_idx_246 = t534 * t540 / 2.0;
    t537       = t860 * ct[9];
    ct_idx_247 = t537 * t540 / 2.0;
    t686       = t860 * ct[10];
    ct_idx_248 = t686 * t540 / 2.0;
    ct_idx_249 = t531 * t541 / 2.0;
    ct_idx_250 = t534 * t541 / 2.0;
    ct_idx_251 = t537 * t541 / 2.0;
    ct_idx_252 = t686 * t541 / 2.0;
    t832       = ct[85] * ct[100];
    t531       = t832 * ct[240];
    t534       = t531 * ct[3] * ct[7];
    ct_idx_256 = t534 * t535;
    t537       = t531 * ct[4] * ct[7];
    ct_idx_257 = t537 * t535;
    ct_idx_258 = t534 * t536;
    ct_idx_259 = t537 * t536;
    t686       = t531 * ct[5] * ct[7];
    ct_idx_260 = t686 * t535;
    t833       = t531 * ct[6] * ct[7];
    ct_idx_261 = t833 * t535;
    ct_idx_262 = t686 * t536;
    ct_idx_263 = t833 * t536;
    t531 *= ct[7];
    t834       = t531 * ct[9];
    ct_idx_264 = t834 * t535;
    t531 *= ct[10];
    ct_idx_265 = t531 * t535;
    ct_idx_267 = t834 * t536;
    ct_idx_268 = t531 * t536;
    ct_idx_269 = t534 * t538;
    ct_idx_270 = t537 * t538;
    ct_idx_271 = t534 * t539;
    ct_idx_272 = t537 * t539;
    ct_idx_273 = t686 * t538;
    ct_idx_274 = t833 * t538;
    ct_idx_275 = t686 * t539;
    ct_idx_276 = t833 * t539;
    ct_idx_278 = t834 * t538;
    ct_idx_279 = t531 * t538;
    ct_idx_280 = t834 * t539;
    ct_idx_281 = t531 * t539;
    t531       = ct[85] * ct[89] * ct[100] * ct[243] * ct[8];
    t534       = t531 * ct[9];
    ct_idx_282 = t534 * t535 / 2.0;
    t531 *= ct[10];
    ct_idx_283 = t531 * t535 / 2.0;
    ct_idx_284 = t534 * t536 / 2.0;
    ct_idx_285 = t531 * t536 / 2.0;
    ct_idx_286 = t534 * t538 / 2.0;
    ct_idx_287 = t531 * t538 / 2.0;
    ct_idx_289 = t534 * t539 / 2.0;
    ct_idx_290 = t531 * t539 / 2.0;
    t531       = t832 * ct[239] * ct[8];
    t534       = t531 * ct[81];
    ct_idx_295 = t534 * t535;
    t537       = t531 * ct[82];
    ct_idx_296 = t537 * t535;
    t686       = t531 * ct[83];
    ct_idx_298 = t686 * t535;
    t531 *= ct[84];
    ct_idx_299     = t531 * t535;
    ct_idx_300     = t534 * t536;
    ct_idx_301     = t537 * t536;
    ct_idx_302     = t686 * t536;
    ct_idx_303     = t531 * t536;
    ct_idx_304     = t534 * t538;
    ct_idx_305     = t537 * t538;
    ct_idx_306     = t686 * t538;
    ct_idx_307     = t531 * t538;
    ct_idx_309     = t534 * t539;
    ct_idx_310     = t537 * t539;
    ct_idx_311     = t686 * t539;
    ct_idx_312     = t531 * t539;
    ct_idx_316     = ct[167] * t535;
    ct_idx_317     = ct[168] * t535;
    ct_idx_318     = ct[167] * t536;
    ct_idx_319     = ct[168] * t536;
    ct_idx_320     = ct[169] * t538;
    ct_idx_321     = ct[170] * t538;
    ct_idx_322     = ct[169] * t539;
    ct_idx_323     = ct[170] * t539;
    ct_idx_324     = ct[182] * t535;
    ct_idx_326     = ct[183] * t535;
    ct_idx_327     = ct[182] * t536;
    ct_idx_328     = ct[183] * t536;
    ct_idx_329     = ct[185] * t538;
    ct_idx_330     = ct[186] * t538;
    ct_idx_331     = ct[185] * t539;
    ct_idx_332     = ct[186] * t539;
    ct_idx_333     = ct[197] * t535;
    ct_idx_334     = ct[198] * t535;
    ct_idx_335     = ct[197] * t536;
    ct_idx_337     = ct[198] * t536;
    ct_idx_338     = ct[195] * t538;
    ct_idx_339     = ct[196] * t538;
    ct_idx_340     = ct[195] * t539;
    ct_idx_341     = ct[196] * t539;
    ct_idx_355     = ct[1] * t890;
    ct_idx_356     = ct[2] * t890;
    ct_idx_357     = ct[1] * t891;
    ct_idx_358     = ct[2] * t891;
    ct_idx_361     = ct[12] * t888;
    ct_idx_362     = ct[11] * t889;
    ct_idx_363     = ct[11] * t892;
    ct_idx_364     = ct[12] * t893;
    ct_idx_365     = ct[79] * t888;
    ct_idx_366     = ct[79] * t889;
    ct_idx_367     = ct[79] * t893;
    ct_idx_368     = ct[80] * t892;
    ct_idx_371_tmp = t685 + t782_tmp * ct[230] / 2.0;
    ct_idx_371     = ct_idx_371_tmp + -ct[181] * t847;
    ct_idx_372     = ct[1] * t916;
    ct_idx_373     = ct[2] * t916;
    ct_idx_374     = ct[1] * t917;
    ct_idx_375     = ct[2] * t917;
    ct_idx_376_tmp = t687 + t805_tmp * ct[232] / 2.0;
    ct_idx_376     = ct_idx_376_tmp + -ct[184] * t852;
    ct_idx_377     = ct[12] * t915;
    ct_idx_378     = -(ct[11] * t914);
    ct_idx_379     = ct[11] * t918;
    ct_idx_380     = ct[12] * t919;
    t914 *= ct[80];
    t687 = ct[80] * t915;
    t915 = ct[79] * t918;
    t685 = ct[80] * t919;
    t534 = ((((ct[219] - ct[225]) - ct[55] * ct[157] * ct[165]) - t724_tmp * ct[233] / 2.0)
            + t726_tmp * ct[233] / 2.0)
           + t730_tmp * ct[233] / 2.0;
    t531 = (ct[155] * ct[165] * t518 - t805_tmp * ct[233] / 2.0) + ct[184] * t534;
    t916 = -ct[1] * t531;
    t892 = -ct[2] * t531;
    t889 = ct[1] * t953;
    t888 = ct[2] * t953;
    t917 = ct[1] * t954;
    t893 = ct[2] * t954;
    t531 = (t682 - t807_tmp * ct[233] / 2.0) + ct[180] * t534;
    t891 = -ct[12] * t531;
    t539 = ct[11] * t946;
    t534 = (ct[157] * ct[165] * t518 - t782_tmp * ct[233] / 2.0) + ct[181] * t534;
    t890     = ct[11] * t534;
    t535     = -ct[79] * t531;
    t538     = -(ct[12] * t952);
    t536     = -ct[80] * t946;
    t987     = ct[11] * t955;
    t540     = ct[12] * t956;
    t865     = -ct[80] * t534;
    t541     = ct[80] * t952;
    t860_tmp = ct[79] * t955;
    t860     = ct[80] * t956;
    t534     = ct[1] * t986;
    t531     = ct[2] * t986;
    t837     = -(ct[1] * t988);
    t686     = -(ct[2] * t988);
    t855     = ct[1] * t989;
    t836     = ct[2] * t989;
    t684     = ct[79] * t991;
    t537     = ct[80] * t990;
    result[0][0] =
        ((((((((((((-ct[12] - ct[17]) - ct[57]) + ct[91]) + ct[136]) + ct[172]) + ct_idx_221) + ct_idx_244) - ct_idx_272)
            - ct_idx_310)
           - ct_idx_319)
          + t531)
         + ct_idx_0)
        + ct_idx_6;
    result[0][1] =
        ((((((((((((((ct[251] - ct[15]) - ct[52]) + ct[80]) + ct[87]) + ct[134]) + ct[200]) + -t551) + ct_idx_210) + ct_idx_216)
             - ct_idx_259)
            - ct_idx_301)
           - ct_idx_341)
          + t534)
         + -ct_idx_2)
        + ct_idx_3;
    t683 = ct[44] * ct[174];
    result[0][2] =
        (((((((((((-ct[24] + ct[97]) + ct[144]) + ct[177]) + ct_idx_214) + ct_idx_236) - ct_idx_270) - ct_idx_305)
            - ct_idx_317)
           + t531)
          + ct_idx_0)
         + ct_idx_6)
        + t683 * ct[100] * ct[239] * ct[7];
    t836_tmp = ct[44] * ct[75];
    result[0][3] =
        (((((((((((((ct[257] - ct[19]) + ct[93]) + ct[142]) + ct[202]) + -t545) + ct_idx_202) + ct_idx_212) - ct_idx_257)
             - ct_idx_296)
            - ct_idx_339)
           + t534)
          + -ct_idx_2)
         + ct_idx_3)
        + t836_tmp * ct[100] * ct[239] * ct[7];
    result[1][0] =
        ((((((((((((((((ct[2] + ct[253]) + ct[35]) - ct[48]) + ct[54]) - ct[108]) + ct[116]) - ct[188]) - ct_idx_190) + ct_idx_240) - ct_idx_242)
              - ct_idx_252)
             + ct_idx_281)
            - ct_idx_290)
           + ct_idx_328)
          + t686)
         + ct_idx_8)
        + t537;
    result[1][1] =
        ((((((((((((((((-ct[249] + ct[1]) + ct[32]) - ct[43]) + ct[50]) - ct[106]) + ct[114]) + ct[192]) + ct_idx_186) + ct_idx_206) - ct_idx_208)
              - ct_idx_250)
             + ct_idx_268)
            - ct_idx_285)
           - ct_idx_332)
          + t837)
         + -ct_idx_7)
        + t684;
    t534 = ct[85] * ct[174] * ct[100];
    t832 = t534 * ct[240];
    t839 = t832 * ct[7];
    result[1][2] =
        (((((((((((((((ct[39] + ct[259]) + ct[72]) + ct[120]) - ct_idx_184) + ct_idx_232) - ct_idx_234) - ct_idx_248) + ct_idx_279) - ct_idx_287)
              + ct_idx_326)
             + t686)
            + ct_idx_8)
           + t537)
          + ct[75] * ct[183])
         + ct[66] * ct[174] * ct[85] * ct[239] * ct[7])
        + t839 * ct[10];
    t531 = ct[75] * ct[85] * ct[100];
    t833 = t531 * ct[240];
    t834 = t833 * ct[7];
    result[1][3] =
        (((((((((((((((ct[37] + ct[68]) + ct[118]) + ct[194]) + ct_idx_180) + ct_idx_198) - ct_idx_200) - ct_idx_246) + ct_idx_265) - ct_idx_283)
              - ct_idx_330)
             + t837)
            + -ct_idx_7)
           + t684)
          + ct[88] * ct[245])
         + ct[66] * ct[75] * ct[85] * ct[239] * ct[7])
        + t834 * ct[10];
    result[2][0] =
        ((((((((((((((ct[26] + ct[261]) + ct[46]) + ct[80]) - ct[99]) - ct[140]) - ct[204]) + t551) - ct_idx_227) - ct_idx_238)
             + ct_idx_276)
            + ct_idx_312)
           + ct_idx_337)
          + t836)
         + ct_idx_4)
        + ct_idx_5;
    result[2][1] =
        ((((((((((((-ct[11] + ct[21]) + ct[41]) - ct[95]) - ct[138]) - ct[175]) - ct_idx_204) - ct_idx_225) + ct_idx_263)
            + ct_idx_303)
           + ct_idx_323)
          + t855)
         + -ct_idx_1)
        + ct_idx_9;
    t686 = t534 * ct[239] * ct[8];
    result[2][2] =
        (((((((((((((ct[30] + ct[263]) + ct[63]) + t545) - ct_idx_223) - ct_idx_230) + ct_idx_274) + ct_idx_307) + ct_idx_334)
             + t836)
            + ct_idx_4)
           + ct_idx_5)
          + ct[75] * ct[198])
         + t832 * ct[6] * ct[7])
        + t686 * ct[84];
    t537 = t531 * ct[239] * ct[8];
    result[2][3] =
        (((((((((((ct[28] + ct[59]) - ct_idx_196) - ct_idx_219) + ct_idx_261) + ct_idx_299) + ct_idx_321) + t855)
            + -ct_idx_1)
           + ct_idx_9)
          + ct[170] * ct[174])
         + t833 * ct[6] * ct[7])
        + t537 * ct[84];
    result[3][0] =
        (((((((((((ct[16] + ct[56]) - ct[90]) - ct[135]) - ct[171]) - ct_idx_220) - ct_idx_243) + ct_idx_271) + ct_idx_309)
           + ct_idx_318)
          + t892)
         + t891)
        + t865;
    result[3][1] =
        (((((((((((((ct[14] + ct[260]) + ct[51]) - ct[86]) - ct[133]) - ct[199]) + t550) - ct_idx_209) - ct_idx_215) + ct_idx_258)
            + ct_idx_300)
           + ct_idx_340)
          + t916)
         + t890)
        + t535;
    result[3][2] =
        ((((((((((((-ct[12] + ct[23]) + ct[73]) - ct_idx_213) - ct_idx_235) + ct_idx_269) + ct_idx_304) + ct_idx_316) + t892)
            + t891)
           + t865)
          + ct[75] * ct[167])
         + t832 * ct[3] * ct[7])
        + t686 * ct[81];
    result[3][3] =
        ((((((((((((((ct[18] + ct[262]) + ct[69]) + ct[80]) + t544) - ct_idx_201) - ct_idx_211) + ct_idx_256) + ct_idx_295) + ct_idx_338)
             + t916)
            + t890)
           + t535)
          + ct[174] * ct[195])
         + t833 * ct[3] * ct[7])
        + t537 * ct[81];
    result[4][0] =
        (((((((((((((((-ct[252] - ct[34]) + ct[47]) - ct[53]) + ct[107]) - ct[115]) + ct[187]) + ct_idx_189) - ct_idx_239) + ct_idx_241)
              + ct_idx_251)
             - ct_idx_280)
            + ct_idx_289)
           - ct_idx_327)
          + t888)
         + -t540)
        + t860_tmp;
    result[4][1] =
        (((((((((((((((ct[248] - ct[31]) + ct[42]) - ct[49]) + ct[105]) - ct[113]) - ct[191]) - ct_idx_185) - ct_idx_205) + ct_idx_207)
              + ct_idx_249)
             - ct_idx_267)
            + ct_idx_284)
           + ct_idx_331)
          + t889)
         + t987)
        + t860;
    result[4][2] =
        ((((((((((((((((ct[2] - ct[38]) + ct[64]) + ct[111]) - ct[119]) + ct[189]) + ct_idx_183) - ct_idx_231) + ct_idx_233) + ct_idx_247)
               - ct_idx_278)
              + ct_idx_286)
             - ct_idx_324)
            + t888)
           + -t540)
          + t860_tmp)
         + ct[88] * ct[246])
        + ct[13] * ct[174] * ct[100] * ct[239] * ct[7];
    result[4][3] =
        ((((((((((((((((ct[1] + ct[254]) - ct[36]) + ct[60]) + ct[109]) - ct[117]) - ct_idx_179) - ct_idx_197) + ct_idx_199) + ct_idx_245)
               - ct_idx_264)
              + ct_idx_282)
             + ct_idx_329)
            + t889)
           + t987)
          + t860)
         + ct[174] * ct[185])
        + ct[13] * ct[75] * ct[100] * ct[239] * ct[7];
    result[5][0] =
        (((((((((((((ct[250] - ct[25]) - ct[45]) + ct[98]) + ct[139]) + ct[203]) + -t550) + ct_idx_226) + ct_idx_237) - ct_idx_275)
            - ct_idx_311)
           - ct_idx_335)
          + -t893)
         + t538)
        + t536;
    result[5][1] =
        (((((((((((-ct[20] - ct[40]) + ct[94]) + ct[137]) + ct[173]) + ct_idx_203) + ct_idx_224) - ct_idx_262) - ct_idx_302)
           - ct_idx_322)
          + -t917)
         + t539)
        + t541;
    t534 = ct[33] * ct[174];
    result[5][2] =
        ((((((((((((((ct[256] - ct[29]) + ct[80]) + ct[103]) + ct[147]) + ct[205]) + -t544) + ct_idx_222) + ct_idx_229) - ct_idx_273)
             - ct_idx_306)
            - ct_idx_333)
           + -t893)
          + t538)
         + t536)
        + t534 * ct[85] * ct[239] * ct[7];
    t531 = ct[33] * ct[75];
    result[5][3] =
        ((((((((((((-ct[11] - ct[27]) + ct[101]) + ct[145]) + ct[178]) + ct_idx_195) + ct_idx_218) - ct_idx_260) - ct_idx_298)
            - ct_idx_320)
           + -t917)
          + t539)
         + t541)
        + t531 * ct[85] * ct[239] * ct[7];
    result[6][0] =
        (((((((((((-ct[16] - ct[56]) + ct[90]) + ct[135]) + ct[171]) + ct_idx_220) + ct_idx_243) - ct_idx_271) - ct_idx_309)
           - ct_idx_318)
          + ct_idx_356)
         + ct_idx_366)
        + ct[12] * t894;
    result[6][1] =
        (((((((((((((ct[250] - ct[14]) - ct[51]) + ct[86]) + ct[133]) + ct[199]) + -t550) + ct_idx_209) + ct_idx_215) - ct_idx_258)
            - ct_idx_300)
           - ct_idx_340)
          + ct_idx_355)
         + ct_idx_362)
        + ct[79] * t894;
    result[6][2] =
        (((((((((((-ct[23] + ct[96]) + ct[143]) + ct[176]) + ct_idx_213) + ct_idx_235) - ct_idx_269) - ct_idx_304)
            - ct_idx_316)
           + ct_idx_356)
          + ct_idx_366)
         + ct[12] * (t894 + 1.0))
        + t534 * ct[100] * ct[239] * ct[7];
    result[6][3] =
        (((((((((((((ct[256] - ct[18]) + ct[92]) + ct[141]) + ct[201]) + -t544) + ct_idx_201) + ct_idx_211) - ct_idx_256)
             - ct_idx_295)
            - ct_idx_338)
           + ct_idx_355)
          + ct_idx_362)
         + ct[79] * (t894 + 1.0))
        + t531 * ct[100] * ct[239] * ct[7];
    result[7][0] =
        (((((((((((((((ct[34] + ct[252]) - ct[47]) + ct[53]) - ct[107]) + ct[115]) - ct[187]) - ct_idx_189) + ct_idx_239) - ct_idx_241)
              - ct_idx_251)
             + ct_idx_280)
            - ct_idx_289)
           + ct_idx_327)
          + ct_idx_364)
         + ct_idx_368)
        - ct[2] * t902;
    result[7][1] =
        (((((((((((((((-ct[248] + ct[31]) - ct[42]) + ct[49]) - ct[105]) + ct[113]) + ct[191]) + ct_idx_185) + ct_idx_205) - ct_idx_207)
              - ct_idx_249)
             + ct_idx_267)
            - ct_idx_284)
           - ct_idx_331)
          + -ct_idx_363)
         + ct_idx_367)
        - ct[1] * t902;
    result[7][2] =
        (((((((((((((((ct[38] + ct[258]) + ct[71]) + ct[119]) - ct_idx_183) + ct_idx_231) - ct_idx_233) - ct_idx_247) + ct_idx_278) - ct_idx_286)
              + ct_idx_324)
             + ct_idx_364)
            + ct_idx_368)
           + ct[75] * ct[182])
          - ct[2] * (t902 + 1.0))
         + ct[55] * ct[174] * ct[85] * ct[239] * ct[7])
        + t839 * ct[9];
    result[7][3] =
        (((((((((((((((ct[36] + ct[67]) + ct[117]) + ct[193]) + ct_idx_179) + ct_idx_197) - ct_idx_199) - ct_idx_245) + ct_idx_264) - ct_idx_282)
              - ct_idx_329)
             + -ct_idx_363)
            + ct_idx_367)
           + ct[88] * ct[244])
          - ct[1] * (t902 + 1.0))
         + ct[55] * ct[75] * ct[85] * ct[239] * ct[7])
        + t834 * ct[9];
    result[8][0] =
        (((((((((((((ct[25] + ct[260]) + ct[45]) - ct[98]) - ct[139]) - ct[203]) + t550) - ct_idx_226) - ct_idx_237) + ct_idx_275)
            + ct_idx_311)
           + ct_idx_335)
          + ct_idx_358)
         + ct_idx_361)
        + ct[79] * t896;
    result[8][1] =
        (((((((((((ct[20] + ct[40]) - ct[94]) - ct[137]) - ct[173]) - ct_idx_203) - ct_idx_224) + ct_idx_262) + ct_idx_302)
           + ct_idx_322)
          + ct_idx_357)
         + ct_idx_365)
        + ct[11] * t896;
    result[8][2] =
        (((((((((((((ct[29] + ct[262]) + ct[62]) + t544) - ct_idx_222) - ct_idx_229) + ct_idx_273) + ct_idx_306) + ct_idx_333)
             + ct_idx_358)
            + ct_idx_361)
           + ct[75] * ct[197])
          + ct[79] * (t896 + 1.0))
         + t832 * ct[5] * ct[7])
        + t686 * ct[83];
    result[8][3] =
        (((((((((((ct[27] + ct[58]) - ct_idx_195) - ct_idx_218) + ct_idx_260) + ct_idx_298) + ct_idx_320) + ct_idx_357)
            + ct_idx_365)
           + ct[169] * ct[174])
          + ct[11] * (t896 + 1.0))
         + t833 * ct[5] * ct[7])
        + t537 * ct[83];
    result[9][0] =
        (((((((((((ct[17] + ct[57]) - ct[91]) - ct[136]) - ct[172]) - ct_idx_221) - ct_idx_244) + ct_idx_272) + ct_idx_310)
           + ct_idx_319)
          + -ct_idx_373)
         + t914)
        - ct[12] * (t920 - 1.0);
    result[9][1] =
        (((((((((((((ct[15] + ct[261]) + ct[52]) - ct[87]) - ct[134]) - ct[200]) + t551) - ct_idx_210) - ct_idx_216) + ct_idx_259)
            + ct_idx_301)
           + ct_idx_341)
          + -ct_idx_372)
         + ct_idx_378)
        + ct[80] * (t920 - 1.0);
    result[9][2] =
        (((((((((((ct[24] + ct[74]) - ct_idx_214) - ct_idx_236) + ct_idx_270) + ct_idx_305) + ct_idx_317) + -ct_idx_373)
            + t914)
           + ct[75] * ct[168])
          - ct[12] * t920)
         + t832 * ct[4] * ct[7])
        + t686 * ct[82];
    result[9][3] =
        (((((((((((((ct[19] + ct[263]) + ct[70]) + t545) - ct_idx_202) - ct_idx_212) + ct_idx_257) + ct_idx_296) + ct_idx_339)
             + -ct_idx_372)
            + ct_idx_378)
           + ct[174] * ct[196])
          + ct[80] * t920)
         + t833 * ct[4] * ct[7])
        + t537 * ct[82];
    t832 = (ct_idx_376_tmp - ct[184] * t852) - 1.0;
    result[10][0] =
        (((((((((((((((-ct[253] - ct[35]) + ct[48]) - ct[54]) + ct[108]) - ct[116]) + ct[188]) + ct_idx_190) - ct_idx_240) + ct_idx_242)
              + ct_idx_252)
             - ct_idx_281)
            + ct_idx_290)
           - ct_idx_328)
          + -ct_idx_380)
         + t915)
        + ct[2] * t832;
    result[10][1] =
        (((((((((((((((ct[249] - ct[32]) + ct[43]) - ct[50]) + ct[106]) - ct[114]) - ct[192]) - ct_idx_186) - ct_idx_206) + ct_idx_208)
              + ct_idx_250)
             - ct_idx_268)
            + ct_idx_285)
           + ct_idx_332)
          + ct_idx_379)
         + t685)
        + ct[1] * t832;
    result[10][2] =
        (((((((((((((((-ct[39] + ct[65]) + ct[112]) - ct[120]) + ct[190]) + ct_idx_184) - ct_idx_232) + ct_idx_234) + ct_idx_248) - ct_idx_279)
              + ct_idx_287)
             - ct_idx_326)
            + -ct_idx_380)
           + t915)
          + ct[88] * ct[247])
         + ct[2] * ct_idx_376)
        + ct[22] * ct[174] * ct[100] * ct[239] * ct[7];
    result[10][3] =
        (((((((((((((((ct[255] - ct[37]) + ct[61]) + ct[110]) - ct[118]) - ct_idx_180) - ct_idx_198) + ct_idx_200) + ct_idx_246) - ct_idx_265)
              + ct_idx_283)
             + ct_idx_330)
            + ct_idx_379)
           + t685)
          + ct[174] * ct[186])
         + ct[1] * ct_idx_376)
        + ct[22] * ct[75] * ct[100] * ct[239] * ct[7];
    t832 = (ct_idx_371_tmp - ct[181] * t847) - 1.0;
    result[11][0] =
        (((((((((((((ct[251] - ct[26]) - ct[46]) + ct[99]) + ct[140]) + ct[204]) + -t551) + ct_idx_227) + ct_idx_238) - ct_idx_276)
            - ct_idx_312)
           - ct_idx_337)
          + -ct_idx_375)
         + -ct_idx_377)
        - ct[79] * t832;
    result[11][1] =
        (((((((((((-ct[21] - ct[41]) + ct[95]) + ct[138]) + ct[175]) + ct_idx_204) + ct_idx_225) - ct_idx_263) - ct_idx_303)
           - ct_idx_323)
          + -ct_idx_374)
         + t687)
        - ct[11] * t832;
    result[11][2] =
        (((((((((((((ct[257] - ct[30]) + ct[104]) + ct[148]) + ct[206]) + -t545) + ct_idx_223) + ct_idx_230) - ct_idx_274)
             - ct_idx_307)
            - ct_idx_334)
           + -ct_idx_375)
          + -ct_idx_377)
         + ct[80] * ct_idx_371)
        + t683 * ct[85] * ct[239] * ct[7];
    result[11][3] =
        (((((((((((-ct[28] + ct[102]) + ct[146]) + ct[179]) + ct_idx_196) + ct_idx_219) - ct_idx_261) - ct_idx_299)
            - ct_idx_321)
           + -ct_idx_374)
          + t687)
         - ct[11] * ct_idx_371)
        + t836_tmp * ct[85] * ct[239] * ct[7];
}

__host__ __device__ void pDmpx_pee(double d,
                                   double x11,
                                   double x12,
                                   double x13,
                                   double x21,
                                   double x22,
                                   double x23,
                                   double x31,
                                   double x32,
                                   double x33,
                                   double x41,
                                   double x42,
                                   double x43,
                                   double result[12][4])
{
    double b_d[270];
    double b_t278_tmp;
    double t100;
    double t109;
    double t11;
    double t110;
    double t111;
    double t113;
    double t114;
    double t115;
    double t116;
    double t12;
    double t123;
    double t124;
    double t125;
    double t126;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t18;
    double t19;
    double t210;
    double t211;
    double t220;
    double t221;
    double t236;
    double t237;
    double t238;
    double t239;
    double t270;
    double t275;
    double t278;
    double t278_tmp;
    double t280;
    double t281;
    double t282;
    double t283;
    double t29;
    double t30;
    double t31;
    double t32;
    double t33;
    double t34;
    double t344;
    double t344_tmp;
    double t345;
    double t346;
    double t347;
    double t348;
    double t349;
    double t35;
    double t350;
    double t351;
    double t352;
    double t353;
    double t354;
    double t355;
    double t36;
    double t37;
    double t372;
    double t373;
    double t374;
    double t375;
    double t376;
    double t377;
    double t378;
    double t379;
    double t38;
    double t380;
    double t381;
    double t382;
    double t383;
    double t384;
    double t385;
    double t388;
    double t389;
    double t39;
    double t393;
    double t394;
    double t395;
    double t396;
    double t453;
    double t453_tmp;
    double t454;
    double t455;
    double t455_tmp;
    double t456;
    double t460;
    double t57;
    double t58;
    double t59;
    double t60;
    double t61;
    double t62;
    double t63;
    double t64;
    double t65;
    double t66;
    double t69;
    double t69_tmp;
    double t70;
    double t70_tmp;
    double t83;
    double t84;
    double t89;
    double t90;
    double t99;
    /* pDmpx_pee */
    /*     RESULT = pDmpx_pee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43)
     */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Feb-2022 18:25:47 */
    t11 = -x21 + x11;
    t12 = -x22 + x12;
    t13 = -x23 + x13;
    t14 = -x41 + x11;
    t15 = -x31 + x21;
    t16 = -x42 + x12;
    t17 = -x32 + x22;
    t18 = -x43 + x13;
    t19 = -x33 + x23;
    t29 = t14 * t17 + -(t15 * t16);
    t30 = t14 * t19 + -(t15 * t18);
    t31 = t16 * t19 + -(t17 * t18);
    t32 = fabs(t29);
    t33 = fabs(t30);
    t34 = fabs(t31);
    t35 = t29;
    if(t29 < 0.0)
    {
        t35 = -1.0;
    }
    else if(t29 > 0.0)
    {
        t35 = 1.0;
    }
    else if(t29 == 0.0)
    {
        t35 = 0.0;
    }
    t36 = t30;
    if(t30 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t30 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t30 == 0.0)
    {
        t36 = 0.0;
    }
    t37 = t31;
    if(t31 < 0.0)
    {
        t37 = -1.0;
    }
    else if(t31 > 0.0)
    {
        t37 = 1.0;
    }
    else if(t31 == 0.0)
    {
        t37 = 0.0;
    }
    t38     = t29 * t29;
    t39     = t31 * t31;
    t57     = (t32 * t32 + t33 * t33) + t34 * t34;
    t113    = t16 * t32 * t35 * 2.0 + t18 * t33 * t36 * 2.0;
    t114    = t17 * t32 * t35 * 2.0 + t19 * t33 * t36 * 2.0;
    t115    = t14 * t33 * t36 * 2.0 + t16 * t34 * t37 * 2.0;
    t116    = t15 * t33 * t36 * 2.0 + t17 * t34 * t37 * 2.0;
    t58     = 1.0 / t57;
    t60     = 1.0 / sqrt(t57);
    t125    = t14 * t32 * t35 * 2.0 + -(t18 * t34 * t37 * 2.0);
    t126    = t15 * t32 * t35 * 2.0 + -(t19 * t34 * t37 * 2.0);
    t59     = t58 * t58;
    t61     = pow(t60, 3.0);
    t62     = pow(t60, 5.0);
    t63     = t14 * t60;
    t64     = t15 * t60;
    t65     = t18 * t60;
    t66     = t19 * t60;
    t69_tmp = t16 * t60;
    t69     = t69_tmp * x12;
    t70_tmp = t17 * t60;
    t70     = t70_tmp * x12;
    t34     = t12 * t16 * t60;
    t37     = t12 * t17 * t60;
    t109    = t29 * t60;
    t110    = t30 * t60;
    t111    = t31 * t60;
    t83     = t11 * t63;
    t84     = t11 * t64;
    t89     = t11 * t65;
    t90     = t11 * t66;
    t99     = t13 * t65;
    t100    = t13 * t66;
    t33     = t30 * t61;
    t36     = t33 * t113 / 2.0;
    t57     = t33 * t114 / 2.0;
    t32     = t33 * t115 / 2.0;
    t33     = t33 * t116 / 2.0;
    t35     = t12 * t31 * t61;
    t220    = t35 * t113 / 2.0;
    t221    = t35 * t114 / 2.0;
    t123    = 1.0 / (t110 - 1.0);
    t210    = t12 * t109 + t13 * t110;
    t211    = t11 * t110 + t12 * t111;
    t275    = t11 * t30 * t61;
    t350    = (t12 * t65 + t275 * t125 / 2.0) + t35 * t125 / 2.0;
    t351    = (t12 * t66 + t275 * t126 / 2.0) + t35 * t126 / 2.0;
    t124    = t123 * t123;
    t236    = fabs(t210);
    t237    = fabs(t211);
    t238    = t210;
    if(t210 < 0.0)
    {
        t238 = -1.0;
    }
    else if(t210 > 0.0)
    {
        t238 = 1.0;
    }
    else if(t210 == 0.0)
    {
        t238 = 0.0;
    }
    t239 = t211;
    if(t211 < 0.0)
    {
        t239 = -1.0;
    }
    else if(t211 > 0.0)
    {
        t239 = 1.0;
    }
    else if(t211 == 0.0)
    {
        t239 = 0.0;
    }
    t270       = t11 * t109 + -(t13 * t111);
    t278_tmp   = t29 * t31;
    b_t278_tmp = t278_tmp * t58;
    t278       = b_t278_tmp * t123;
    t280       = t65 + -t36;
    t281       = t66 + -t57;
    t282       = t63 + -t32;
    t283       = t64 + -t33;
    t460       = t13 * t31 * t61;
    t344_tmp   = t11 * t29 * t61;
    t344 = (t11 * t16 * t60 + t460 * t113 / 2.0) + -(t344_tmp * t113 / 2.0);
    t345 = (t11 * t17 * t60 + t460 * t114 / 2.0) + -(t344_tmp * t114 / 2.0);
    t346 = (t13 * t16 * t60 + t344_tmp * t115 / 2.0) + -(t460 * t115 / 2.0);
    t347 = (t13 * t17 * t60 + t344_tmp * t116 / 2.0) + -(t460 * t116 / 2.0);
    t348 = (-t89 + t11 * t36) + t220;
    t349 = (-t90 + t11 * t57) + t221;
    t36  = t12 * t29 * t61;
    t352 = (-(t13 * t63) + t36 * t115 / 2.0) + t13 * t32;
    t353 = (-(t13 * t64) + t36 * t116 / 2.0) + t13 * t33;
    t33  = t13 * t30 * t61;
    t354 = (-(t12 * t63) + t36 * t125 / 2.0) + t33 * t125 / 2.0;
    t355 = (-(t12 * t64) + t36 * t126 / 2.0) + t33 * t126 / 2.0;
    t372 = ((t34 + t99) + -(t36 * t113 / 2.0)) + t33 * t113 * -0.5;
    t373 = ((t37 + t100) + -(t36 * t114 / 2.0)) + t33 * t114 * -0.5;
    t374 = ((t83 + t34) + t275 * t115 * -0.5) + -(t35 * t115 / 2.0);
    t375 = ((t84 + t37) + t275 * t116 * -0.5) + -(t35 * t116 / 2.0);
    t376 = ((t83 + t99) + t460 * t125 / 2.0) + -(t344_tmp * t125 / 2.0);
    t377 = ((t84 + t100) + t460 * t126 / 2.0) + -(t344_tmp * t126 / 2.0);
    t380 = ((t89 + t110) + t275 * t113 * -0.5) + -t220;
    t381 = ((t90 + t110) + t275 * t114 * -0.5) + -t221;
    t382 = t111 + t350;
    t383 = t111 + t351;
    t275 = fabs(t270);
    t35  = t270;
    if(t270 < 0.0)
    {
        t35 = -1.0;
    }
    else if(t270 > 0.0)
    {
        t35 = 1.0;
    }
    else if(t270 == 0.0)
    {
        t35 = 0.0;
    }
    t378     = t109 + t344;
    t379     = t109 + t345;
    t384     = t110 + t352;
    t385     = t110 + t353;
    t388     = t109 + t354;
    t389     = t109 + t355;
    t453_tmp = t236 * t238;
    t453     = t453_tmp * t372 * 2.0;
    t454     = t453_tmp * t373 * 2.0;
    t455_tmp = t237 * t239;
    t455     = t455_tmp * t374 * 2.0;
    t456     = t455_tmp * t375 * 2.0;
    t37      = t39 * t59;
    t344_tmp = t39 * t58;
    t34      = t344_tmp * t124;
    t393     = t37 * t113 * t123 + t34 * t280;
    t394     = t37 * t114 * t123 + t34 * t281;
    t57      = t38 * t59;
    t84      = t38 * t58;
    t32      = t84 * t124;
    t395     = t57 * t115 * t123 + t32 * t282;
    t396     = t57 * t116 * t123 + t32 * t283;
    t36      = t57 * t123;
    t33      = t30 * t38 * t62 * t124;
    t38     = (t14 * t29 * t58 * t123 * 2.0 + -(t36 * t125)) + t33 * t125 / 2.0;
    t90     = (t15 * t29 * t58 * t123 * 2.0 + -(t36 * t126)) + t33 * t126 / 2.0;
    t110    = t16 * t29 * t58 * t123;
    t238    = (-(t110 * 2.0) + t57 * t113 * t123) + t32 * t280;
    t239    = t17 * t29 * t58 * t123;
    t220    = (-(t239 * 2.0) + t57 * t114 * t123) + t32 * t281;
    t12     = t16 * t31 * t58 * t123;
    t89     = (-(t12 * 2.0) + t37 * t115 * t123) + t34 * t282;
    t221    = t17 * t31 * t58 * t123;
    t100    = (-(t221 * 2.0) + t37 * t116 * t123) + t34 * t283;
    t83     = t275 * t35;
    t99     = t83 * t376 * 2.0;
    t460    = t83 * t377 * 2.0;
    t36     = t37 * t123;
    t33     = t30 * t39 * t62 * t124;
    t13     = (t18 * t31 * t58 * t123 * 2.0 + t36 * t125) + -(t33 * t125 / 2.0);
    t11     = (t19 * t31 * t58 * t123 * 2.0 + t36 * t126) + -(t33 * t126 / 2.0);
    t37     = 1.0 / sqrt((t236 * t236 + t237 * t237) + t275 * t275);
    b_d[0]  = d;
    b_d[1]  = t109;
    b_d[2]  = t111;
    b_d[3]  = t113;
    b_d[4]  = t114;
    b_d[5]  = t115;
    b_d[6]  = t116;
    b_d[7]  = t123;
    b_d[8]  = t124;
    b_d[9]  = t125;
    b_d[10] = t126;
    b_d[11] = t84 * t123 + 1.0;
    b_d[12] = t344_tmp * t123 + 1.0;
    b_d[13] = t14;
    t33     = t29 * t61;
    t36     = t33 * t113;
    b_d[14] = t36 * x12 / 2.0;
    t57     = t33 * t114;
    b_d[15] = t57 * x12 / 2.0;
    t32     = t31 * t61;
    t34     = t32 * t113;
    b_d[16] = t34 * x12 / 2.0;
    t35     = t32 * t114;
    b_d[17] = t35 * x12 / 2.0;
    b_d[18] = t36 * x22 / 2.0;
    b_d[19] = t57 * x22 / 2.0;
    t36     = t33 * t115;
    b_d[20] = t36 * x12 / 2.0;
    t57     = t33 * t116;
    b_d[21] = t57 * x12 / 2.0;
    b_d[22] = t15;
    b_d[23] = t34 * x22 / 2.0;
    b_d[24] = t35 * x22 / 2.0;
    t34     = t32 * t115;
    b_d[25] = t34 * x12 / 2.0;
    t35     = t32 * t116;
    b_d[26] = t35 * x12 / 2.0;
    b_d[27] = t36 * x22 / 2.0;
    b_d[28] = t57 * x22 / 2.0;
    b_d[29] = t34 * x22 / 2.0;
    b_d[30] = t35 * x22 / 2.0;
    t36     = t33 * t125;
    b_d[31] = t36 * x12 / 2.0;
    t33 *= t126;
    b_d[32] = t33 * x12 / 2.0;
    b_d[33] = t16;
    t57     = t32 * t125;
    b_d[34] = t57 * x12 / 2.0;
    t32 *= t126;
    b_d[35]  = t32 * x12 / 2.0;
    b_d[36]  = t36 * x22 / 2.0;
    b_d[37]  = t33 * x22 / 2.0;
    b_d[38]  = t57 * x22 / 2.0;
    b_d[39]  = t32 * x22 / 2.0;
    b_d[40]  = t110 * x11;
    b_d[41]  = t239 * x11;
    t33      = t18 * t29 * t58 * t123;
    b_d[42]  = t33 * x11;
    t36      = t19 * t29 * t58 * t123;
    b_d[43]  = t36 * x11;
    b_d[44]  = t17;
    b_d[45]  = t110 * x13;
    b_d[46]  = t239 * x13;
    b_d[47]  = t33 * x13;
    b_d[48]  = t36 * x13;
    t57      = t14 * t31 * t58 * t123;
    b_d[49]  = t57 * x11;
    t32      = t15 * t31 * t58 * t123;
    b_d[50]  = t32 * x11;
    b_d[51]  = t12 * x11;
    b_d[52]  = t221 * x11;
    b_d[53]  = t57 * x13;
    b_d[54]  = t32 * x13;
    b_d[55]  = t18;
    b_d[56]  = t12 * x13;
    b_d[57]  = t221 * x13;
    b_d[58]  = t110 * x21;
    b_d[59]  = t239 * x21;
    b_d[60]  = t33 * x21;
    b_d[61]  = t36 * x21;
    b_d[62]  = t110 * x23;
    b_d[63]  = t239 * x23;
    b_d[64]  = t33 * x23;
    b_d[65]  = t36 * x23;
    b_d[66]  = t19;
    b_d[67]  = t57 * x21;
    b_d[68]  = t32 * x21;
    b_d[69]  = t12 * x21;
    b_d[70]  = t221 * x21;
    b_d[71]  = t57 * x23;
    b_d[72]  = t32 * x23;
    b_d[73]  = t12 * x23;
    b_d[74]  = t221 * x23;
    b_d[75]  = -x21;
    b_d[76]  = t210;
    b_d[77]  = t211;
    b_d[78]  = t270;
    b_d[79]  = t278;
    b_d[80]  = -t278;
    b_d[81]  = t280;
    b_d[82]  = t281;
    b_d[83]  = t282;
    b_d[84]  = t283;
    b_d[85]  = t29;
    t33      = t278_tmp * t59;
    t36      = t33 * t113 * t123;
    b_d[86]  = t36 * x11;
    t57      = t33 * t114 * t123;
    b_d[87]  = t57 * x11;
    b_d[88]  = -x22;
    b_d[89]  = t30;
    b_d[90]  = t36 * x13;
    b_d[91]  = t57 * x13;
    b_d[92]  = t36 * x21;
    b_d[93]  = t57 * x21;
    t32      = t33 * t115 * t123;
    b_d[94]  = t32 * x11;
    t34      = t33 * t116 * t123;
    b_d[95]  = t34 * x11;
    b_d[96]  = t36 * x23;
    b_d[97]  = t57 * x23;
    b_d[98]  = t32 * x13;
    b_d[99]  = t34 * x13;
    b_d[100] = t31;
    b_d[101] = t32 * x21;
    b_d[102] = t34 * x21;
    b_d[103] = t32 * x23;
    b_d[104] = t34 * x23;
    t33 *= t123;
    t36      = t33 * t125;
    b_d[105] = t36 * x11;
    t33 *= t126;
    b_d[106] = t33 * x11;
    b_d[107] = t36 * x13;
    b_d[108] = t33 * x13;
    b_d[109] = t36 * x21;
    b_d[110] = t33 * x21;
    b_d[111] = t36 * x23;
    b_d[112] = t33 * x23;
    t33      = t29 * t30 * t31 * t62 * t124;
    t36      = t33 * t125;
    b_d[113] = t36 * x11 / 2.0;
    t33 *= t126;
    b_d[114] = t33 * x11 / 2.0;
    b_d[115] = t36 * x13 / 2.0;
    b_d[116] = t33 * x13 / 2.0;
    b_d[117] = t36 * x21 / 2.0;
    b_d[118] = t33 * x21 / 2.0;
    b_d[119] = t36 * x23 / 2.0;
    b_d[120] = t33 * x23 / 2.0;
    b_d[121] = t344;
    b_d[122] = t345;
    b_d[123] = t346;
    b_d[124] = t347;
    b_d[125] = t348;
    b_d[126] = t349;
    b_d[127] = t350;
    b_d[128] = t351;
    b_d[129] = t352;
    b_d[130] = t353;
    b_d[131] = t354;
    b_d[132] = t355;
    t33      = b_t278_tmp * t124;
    t36      = t33 * t280;
    b_d[133] = t36 * x11;
    t57      = t33 * t281;
    b_d[134] = t57 * x11;
    b_d[135] = t36 * x13;
    b_d[136] = t57 * x13;
    t32      = t33 * t282;
    b_d[137] = t32 * x11;
    t33 *= t283;
    b_d[138] = t33 * x11;
    b_d[139] = t32 * x13;
    b_d[140] = t33 * x13;
    b_d[141] = t36 * x21;
    b_d[142] = t57 * x21;
    b_d[143] = t36 * x23;
    b_d[144] = t57 * x23;
    b_d[145] = t32 * x21;
    b_d[146] = t33 * x21;
    b_d[147] = t32 * x23;
    b_d[148] = t33 * x23;
    b_d[149] = t372;
    b_d[150] = t373;
    b_d[151] = t374;
    b_d[152] = t375;
    b_d[153] = t376;
    b_d[154] = t377;
    b_d[155] = t378;
    b_d[156] = t379;
    b_d[157] = t380;
    b_d[158] = t381;
    b_d[159] = t382;
    b_d[160] = t383;
    b_d[161] = t384;
    b_d[162] = t385;
    b_d[163] = t388;
    b_d[164] = t389;
    b_d[165] = t37;
    b_d[166] = pow(t37, 3.0);
    b_d[167] = t393;
    b_d[168] = t394;
    b_d[169] = t395;
    b_d[170] = t396;
    b_d[171] = t393 * x11;
    b_d[172] = t394 * x11;
    b_d[173] = t395 * x13;
    b_d[174] = -x23;
    b_d[175] = t396 * x13;
    b_d[176] = t393 * x21;
    b_d[177] = t394 * x21;
    b_d[178] = t395 * x23;
    b_d[179] = t396 * x23;
    b_d[180] = t210 * t37;
    b_d[181] = t211 * t37;
    b_d[182] = t13;
    b_d[183] = t11;
    b_d[184] = t270 * t37;
    b_d[185] = t38;
    b_d[186] = t90;
    b_d[187] = t13 * x11;
    b_d[188] = t11 * x11;
    b_d[189] = t13 * x21;
    b_d[190] = t11 * x21;
    b_d[191] = t38 * x13;
    b_d[192] = t90 * x13;
    b_d[193] = t38 * x23;
    b_d[194] = t90 * x23;
    b_d[195] = t238;
    b_d[196] = t220;
    b_d[197] = t89;
    b_d[198] = t100;
    b_d[199] = t238 * x13;
    b_d[200] = t220 * x13;
    b_d[201] = t238 * x23;
    b_d[202] = t220 * x23;
    b_d[203] = t89 * x11;
    b_d[204] = t100 * x11;
    b_d[205] = t89 * x21;
    b_d[206] = t100 * x21;
    b_d[207] = t16 * t344 * t37;
    b_d[208] = t16 * t345 * t37;
    b_d[209] = t16 * t346 * t37;
    b_d[210] = t16 * t347 * t37;
    b_d[211] = t18 * t348 * t37;
    b_d[212] = t18 * t349 * t37;
    b_d[213] = t18 * t350 * t37;
    b_d[214] = t18 * t351 * t37;
    b_d[215] = t14 * t352 * t37;
    b_d[216] = t14 * t353 * t37;
    b_d[217] = t14 * t354 * t37;
    b_d[218] = t14 * t355 * t37;
    b_d[219] = t14 * t372 * t37;
    b_d[220] = t14 * t373 * t37;
    b_d[221] = t18 * t374 * t37;
    b_d[222] = t18 * t375 * t37;
    b_d[223] = t16 * t376 * t37;
    b_d[224] = t16 * t377 * t37;
    b_d[225] = t16 * t378 * t37;
    b_d[226] = t16 * t379 * t37;
    b_d[227] = (-(t455_tmp * t348 * 2.0) + t83 * t344 * 2.0) + t453;
    b_d[228] = (-(t455_tmp * t349 * 2.0) + t83 * t345 * 2.0) + t454;
    b_d[229] = (t453_tmp * t352 * 2.0 + t83 * t346 * 2.0) + -t455;
    b_d[230] = (t453_tmp * t353 * 2.0 + t83 * t347 * 2.0) + -t456;
    b_d[231] = (t455_tmp * t350 * 2.0 + t453_tmp * t354 * 2.0) + -t99;
    b_d[232] = (t455_tmp * t351 * 2.0 + t453_tmp * t355 * 2.0) + -t460;
    b_d[233] = (t453 + t455_tmp * t380 * 2.0) + t83 * t378 * 2.0;
    b_d[234] = (t454 + t455_tmp * t381 * 2.0) + t83 * t379 * 2.0;
    b_d[235] = (t455 + -(t453_tmp * t384 * 2.0)) + t83 * (t111 - t346) * 2.0;
    b_d[236] = (t456 + -(t453_tmp * t385 * 2.0)) + t83 * (t111 - t347) * 2.0;
    b_d[237] = (-t99 + t455_tmp * t382 * 2.0) + t453_tmp * t388 * 2.0;
    b_d[238] = (-t460 + t455_tmp * t383 * 2.0) + t453_tmp * t389 * 2.0;
    b_d[239] = t58;
    b_d[240] = t59;
    b_d[241] = t60;
    b_d[242] = t61;
    b_d[243] = t62;
    b_d[244] = t63;
    b_d[245] = t64;
    b_d[246] = t65;
    b_d[247] = t66;
    b_d[248] = t63 * x12;
    b_d[249] = t64 * x12;
    b_d[250] = t69;
    b_d[251] = t70;
    b_d[252] = t65 * x12;
    b_d[253] = t66 * x12;
    b_d[254] = t63 * x22;
    b_d[255] = t64 * x22;
    b_d[256] = t69_tmp * x22;
    b_d[257] = t70_tmp * x22;
    b_d[258] = t65 * x22;
    b_d[259] = t66 * x22;
    b_d[260] = -t69;
    b_d[261] = -t70;
    b_d[262] = -x22 * t16 * t60;
    b_d[263] = -x22 * t17 * t60;
    b_d[264] = x31;
    b_d[265] = x32;
    b_d[266] = x33;
    b_d[267] = x41;
    b_d[268] = x42;
    b_d[269] = x43;
    ft_2(b_d, result);
}

__host__ __device__ void pDmpx_pee(const double3&           x0,
                                   const double3&           x1,
                                   const double3&           x2,
                                   const double3&           x3,
                                   double                   d_hatSqrt,
                                   __GEIGEN__::Matrix12x4d& pDmpx)
{
    pDmpx_pee(d_hatSqrt,
              x0.x,
              x0.y,
              x0.z,
              x1.x,
              x1.y,
              x1.z,
              x2.x,
              x2.y,
              x2.z,
              x3.x,
              x3.y,
              x3.z,
              pDmpx.m);
}
__host__ __device__ void pDmpx_pt(double d,
                                  double x11,
                                  double x12,
                                  double x13,
                                  double x21,
                                  double x22,
                                  double x23,
                                  double x31,
                                  double x32,
                                  double x33,
                                  double x41,
                                  double x42,
                                  double x43,
                                  double result[12][9])
{
    double t102;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t108;
    double t109;
    double t11;
    double t110;
    double t111;
    double t112;
    double t113;
    double t117;
    double t118;
    double t119;
    double t12;
    double t123;
    double t125;
    double t126;
    double t13;
    double t14;
    double t15;
    double t16;
    double t164;
    double t168;
    double t17;
    double t171;
    double t172;
    double t173;
    double t18;
    double t19;
    double t20;
    double t21;
    double t22;
    double t224;
    double t225;
    double t226;
    double t227;
    double t228;
    double t229;
    double t242;
    double t243;
    double t256;
    double t274;
    double t274_tmp;
    double t275;
    double t275_tmp;
    double t276;
    double t277;
    double t32;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t38;
    double t39;
    double t40;
    double t68;
    double t70;
    /* pDmpx_pt */
    /*     RESULT = pDmpx_pt(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Mar-2022 09:05:19 */
    t11 = -x21 + x11;
    t12 = -x22 + x12;
    t13 = -x23 + x13;
    t14 = -x31 + x21;
    t15 = -x32 + x22;
    t16 = -x33 + x23;
    t17 = -x41 + x21;
    t18 = -x42 + x22;
    t19 = -x43 + x23;
    t20 = -x41 + x31;
    t21 = -x42 + x32;
    t22 = -x43 + x33;
    t32 = t14 * t18 + -(t15 * t17);
    t33 = t14 * t19 + -(t16 * t17);
    t34 = t15 * t19 + -(t16 * t18);
    t35 = fabs(t32);
    t36 = fabs(t33);
    t37 = fabs(t34);
    t38 = t32;
    if(t32 < 0.0)
    {
        t38 = -1.0;
    }
    else if(t32 > 0.0)
    {
        t38 = 1.0;
    }
    else if(t32 == 0.0)
    {
        t38 = 0.0;
    }
    t39 = t33;
    if(t33 < 0.0)
    {
        t39 = -1.0;
    }
    else if(t33 > 0.0)
    {
        t39 = 1.0;
    }
    else if(t33 == 0.0)
    {
        t39 = 0.0;
    }
    t40 = t34;
    if(t34 < 0.0)
    {
        t40 = -1.0;
    }
    else if(t34 > 0.0)
    {
        t40 = 1.0;
    }
    else if(t34 == 0.0)
    {
        t40 = 0.0;
    }
    t68  = (t35 * t35 + t36 * t36) + t37 * t37;
    t108 = t15 * t35 * t38 * 2.0 + t16 * t36 * t39 * 2.0;
    t109 = t14 * t36 * t39 * 2.0 + t15 * t37 * t40 * 2.0;
    t110 = t18 * t35 * t38 * 2.0 + t19 * t36 * t39 * 2.0;
    t111 = t17 * t36 * t39 * 2.0 + t18 * t37 * t40 * 2.0;
    t112 = t21 * t35 * t38 * 2.0 + t22 * t36 * t39 * 2.0;
    t113 = t20 * t36 * t39 * 2.0 + t21 * t37 * t40 * 2.0;
    t36  = 1.0 / t68;
    t70  = 1.0 / sqrt(t68);
    t117 = t14 * t35 * t38 * 2.0 + -(t16 * t37 * t40 * 2.0);
    t118 = t17 * t35 * t38 * 2.0 + -(t19 * t37 * t40 * 2.0);
    t119 = t20 * t35 * t38 * 2.0 + -(t22 * t37 * t40 * 2.0);
    t35  = pow(t70, 3.0);
    t102 = t32 * t70;
    t103 = t33 * t70;
    t104 = t34 * t70;
    t123 = t32 * t34 * t36;
    t105 = t32 * t32 * t36 - 1.0;
    t106 = t33 * t33 * t36 - 1.0;
    t107 = t34 * t34 * t36 - 1.0;
    t125 = -(t32 * t33 * t36);
    t126 = -(t33 * t34 * t36);
    t164 = ((d + t12 * t103) + -(t13 * t102)) + -(t11 * t104);
    t36  = t13 * t32 * t35;
    t39  = t11 * t34 * t35;
    t68  = t12 * t33 * t35;
    t224 = (((t12 * t16 * t70 + -(t13 * t15 * t70)) + t36 * t108 / 2.0) + t39 * t108 / 2.0)
           + -(t68 * t108 / 2.0);
    t225 = (((t12 * t14 * t70 + -(t11 * t15 * t70)) + t36 * t109 / 2.0) + t39 * t109 / 2.0)
           + -(t68 * t109 / 2.0);
    t226 = (((t12 * t19 * t70 + -(t13 * t18 * t70)) + t36 * t110 / 2.0) + t39 * t110 / 2.0)
           + -(t68 * t110 / 2.0);
    t227 = (((t12 * t17 * t70 + -(t11 * t18 * t70)) + t36 * t111 / 2.0) + t39 * t111 / 2.0)
           + -(t68 * t111 / 2.0);
    t228 = (((t11 * t16 * t70 + -(t13 * t14 * t70)) + t36 * t117 / 2.0) + t39 * t117 / 2.0)
           + -(t68 * t117 / 2.0);
    t229 = (((t11 * t19 * t70 + -(t13 * t17 * t70)) + t36 * t118 / 2.0) + t39 * t118 / 2.0)
           + -(t68 * t118 / 2.0);
    t242 = ((((t12 * t22 * t70 + -(t13 * t21 * t70)) + t104) + t36 * t112 / 2.0)
            + t39 * t112 / 2.0)
           + -(t68 * t112 / 2.0);
    t243 = ((((t11 * t21 * t70 + -(t12 * t20 * t70)) + t102) + t68 * t113 / 2.0)
            + -(t36 * t113 / 2.0))
           + -(t39 * t113 / 2.0);
    t256 = ((((t11 * t22 * t70 + -(t13 * t20 * t70)) + t103) + t36 * t119 / 2.0)
            + t39 * t119 / 2.0)
           + -(t68 * t119 / 2.0);
    t38           = t14 * t70 * t164;
    t39           = t15 * t70 * t164;
    t40           = t16 * t70 * t164;
    t168          = t17 * t70 * t164;
    t68           = t18 * t70 * t164;
    t37           = t19 * t70 * t164;
    t171          = t20 * t70 * t164;
    t172          = t21 * t70 * t164;
    t173          = t22 * t70 * t164;
    t274_tmp      = t32 * t35;
    t274          = -(t274_tmp * t109 * t164 / 2.0) + t102 * t225;
    t275_tmp      = t34 * t35;
    t275          = -(t275_tmp * t110 * t164 / 2.0) + t104 * t226;
    t276          = t275_tmp * t108 * t164 / 2.0 + -(t104 * t224);
    t277          = t274_tmp * t111 * t164 / 2.0 + -(t102 * t227);
    t36           = t33 * t35;
    t18           = -(t36 * t118 * t164 / 2.0) + t103 * t229;
    t19           = t36 * t117 * t164 / 2.0 + -(t103 * t228);
    t70           = t275_tmp * t112 * t164 / 2.0 + -(t104 * t242);
    t20           = -(t274_tmp * t113 * t164 / 2.0) + -(t102 * t243);
    t21           = t36 * t119 * t164 / 2.0 + -(t103 * t256);
    t22           = (t40 + -(t36 * t108 * t164 / 2.0)) + t103 * t224;
    t32           = (t39 + -(t275_tmp * t109 * t164 / 2.0)) + t104 * t225;
    t34           = (t68 + -(t274_tmp * t110 * t164 / 2.0)) + t102 * t226;
    t33           = (t168 + -(t36 * t111 * t164 / 2.0)) + t103 * t227;
    t17           = (-t39 + t274_tmp * t108 * t164 / 2.0) + -(t102 * t224);
    t16           = (-t38 + t36 * t109 * t164 / 2.0) + -(t103 * t225);
    t15           = (-t37 + t36 * t110 * t164 / 2.0) + -(t103 * t226);
    t14           = (-t68 + t275_tmp * t111 * t164 / 2.0) + -(t104 * t227);
    t13           = (t38 + -(t274_tmp * t117 * t164 / 2.0)) + t102 * t228;
    t11           = (t37 + t275_tmp * t118 * t164 / 2.0) + -(t104 * t229);
    t12           = (-t40 + -(t275_tmp * t117 * t164 / 2.0)) + t104 * t228;
    t38           = (-t168 + t274_tmp * t118 * t164 / 2.0) + -(t102 * t229);
    t40           = (t173 + -(t36 * t112 * t164 / 2.0)) + t103 * t242;
    t37           = (-t171 + t36 * t113 * t164 / 2.0) + t103 * t243;
    t35           = (-t172 + t274_tmp * t112 * t164 / 2.0) + -(t102 * t242);
    t68           = (t172 + -(t275_tmp * t113 * t164 / 2.0)) + -(t104 * t243);
    t39           = (t171 + -(t274_tmp * t119 * t164 / 2.0)) + t102 * t256;
    t36           = (-t173 + -(t275_tmp * t119 * t164 / 2.0)) + t104 * t256;
    result[0][0]  = t107;
    result[0][1]  = t126;
    result[0][2]  = t123;
    result[0][3]  = t107;
    result[0][4]  = t126;
    result[0][5]  = t123;
    result[0][6]  = t107;
    result[0][7]  = t126;
    result[0][8]  = t123;
    result[1][0]  = t126;
    result[1][1]  = t106;
    result[1][2]  = t125;
    result[1][3]  = t126;
    result[1][4]  = t106;
    result[1][5]  = t125;
    result[1][6]  = t126;
    result[1][7]  = t106;
    result[1][8]  = t125;
    result[2][0]  = t123;
    result[2][1]  = t125;
    result[2][2]  = t105;
    result[2][3]  = t123;
    result[2][4]  = t125;
    result[2][5]  = t105;
    result[2][6]  = t123;
    result[2][7]  = t125;
    result[2][8]  = t105;
    result[3][0]  = t70 + 1.0;
    result[3][1]  = t40;
    result[3][2]  = t35;
    result[3][3]  = t70;
    result[3][4]  = t40;
    result[3][5]  = t35;
    result[3][6]  = t70;
    result[3][7]  = t40;
    result[3][8]  = t35;
    result[4][0]  = t36;
    result[4][1]  = t21 + 1.0;
    result[4][2]  = t39;
    result[4][3]  = t36;
    result[4][4]  = t21;
    result[4][5]  = t39;
    result[4][6]  = t36;
    result[4][7]  = t21;
    result[4][8]  = t39;
    result[5][0]  = t68;
    result[5][1]  = t37;
    result[5][2]  = t20 + 1.0;
    result[5][3]  = t68;
    result[5][4]  = t37;
    result[5][5]  = t20;
    result[5][6]  = t68;
    result[5][7]  = t37;
    result[5][8]  = t20;
    result[6][0]  = t275;
    result[6][1]  = t15;
    result[6][2]  = t34;
    result[6][3]  = t275 + 1.0;
    result[6][4]  = t15;
    result[6][5]  = t34;
    result[6][6]  = t275;
    result[6][7]  = t15;
    result[6][8]  = t34;
    result[7][0]  = t11;
    result[7][1]  = t18;
    result[7][2]  = t38;
    result[7][3]  = t11;
    result[7][4]  = t18 + 1.0;
    result[7][5]  = t38;
    result[7][6]  = t11;
    result[7][7]  = t18;
    result[7][8]  = t38;
    result[8][0]  = t14;
    result[8][1]  = t33;
    result[8][2]  = t277;
    result[8][3]  = t14;
    result[8][4]  = t33;
    result[8][5]  = t277 + 1.0;
    result[8][6]  = t14;
    result[8][7]  = t33;
    result[8][8]  = t277;
    result[9][0]  = t276;
    result[9][1]  = t22;
    result[9][2]  = t17;
    result[9][3]  = t276;
    result[9][4]  = t22;
    result[9][5]  = t17;
    result[9][6]  = t276 + 1.0;
    result[9][7]  = t22;
    result[9][8]  = t17;
    result[10][0] = t12;
    result[10][1] = t19;
    result[10][2] = t13;
    result[10][3] = t12;
    result[10][4] = t19;
    result[10][5] = t13;
    result[10][6] = t12;
    result[10][7] = t19 + 1.0;
    result[10][8] = t13;
    result[11][0] = t32;
    result[11][1] = t16;
    result[11][2] = t274;
    result[11][3] = t32;
    result[11][4] = t16;
    result[11][5] = t274;
    result[11][6] = t32;
    result[11][7] = t16;
    result[11][8] = t274 + 1.0;
}

__host__ __device__ void pDmpx_pt(const double3&           x0,
                                  const double3&           x1,
                                  const double3&           x2,
                                  const double3&           x3,
                                  double                   d_hatSqrt,
                                  __GEIGEN__::Matrix12x9d& pDmpx)
{
    pDmpx_pt(d_hatSqrt,
             x0.x,
             x0.y,
             x0.z,
             x1.x,
             x1.y,
             x1.z,
             x2.x,
             x2.y,
             x2.z,
             x3.x,
             x3.y,
             x3.z,
             pDmpx.m);
}


__host__ __device__ void pDmpx_pt_flip(double d,
                                       double x11,
                                       double x12,
                                       double x13,
                                       double x21,
                                       double x22,
                                       double x23,
                                       double x31,
                                       double x32,
                                       double x33,
                                       double x41,
                                       double x42,
                                       double x43,
                                       double result[12][9])
{

    double t102;
    double t103;
    double t104;
    double t105;
    double t106;
    double t107;
    double t108;
    double t109;
    double t11;
    double t110;
    double t111;
    double t112;
    double t113;
    double t117;
    double t118;
    double t119;
    double t12;
    double t122;
    double t124;
    double t125;
    double t13;
    double t14;
    double t15;
    double t16;
    double t163;
    double t169;
    double t17;
    double t170;
    double t171;
    double t18;
    double t19;
    double t20;
    double t21;
    double t22;
    double t222;
    double t223;
    double t224;
    double t225;
    double t226;
    double t227;
    double t240;
    double t241;
    double t254;
    double t272;
    double t272_tmp;
    double t273;
    double t278;
    double t279;
    double t280;
    double t32;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t38;
    double t39;
    double t40;
    double t68;
    double t70;
    /* pDmpx_pt_flip */
    /*     RESULT =
     * pDmpx_pt_flip(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     10-Mar-2022 09:14:13 */
    t11 = -x21 + x11;
    t12 = -x22 + x12;
    t13 = -x23 + x13;
    t14 = -x31 + x21;
    t15 = -x32 + x22;
    t16 = -x33 + x23;
    t17 = -x41 + x21;
    t18 = -x42 + x22;
    t19 = -x43 + x23;
    t20 = -x41 + x31;
    t21 = -x42 + x32;
    t22 = -x43 + x33;
    t32 = t14 * t18 + -(t15 * t17);
    t33 = t14 * t19 + -(t16 * t17);
    t34 = t15 * t19 + -(t16 * t18);
    t35 = fabs(t32);
    t36 = fabs(t33);
    t37 = fabs(t34);
    t38 = t32;
    if(t32 < 0.0)
    {
        t38 = -1.0;
    }
    else if(t32 > 0.0)
    {
        t38 = 1.0;
    }
    else if(t32 == 0.0)
    {
        t38 = 0.0;
    }
    t39 = t33;
    if(t33 < 0.0)
    {
        t39 = -1.0;
    }
    else if(t33 > 0.0)
    {
        t39 = 1.0;
    }
    else if(t33 == 0.0)
    {
        t39 = 0.0;
    }
    t40 = t34;
    if(t34 < 0.0)
    {
        t40 = -1.0;
    }
    else if(t34 > 0.0)
    {
        t40 = 1.0;
    }
    else if(t34 == 0.0)
    {
        t40 = 0.0;
    }
    t68  = (t35 * t35 + t36 * t36) + t37 * t37;
    t108 = t15 * t35 * t38 * 2.0 + t16 * t36 * t39 * 2.0;
    t109 = t14 * t36 * t39 * 2.0 + t15 * t37 * t40 * 2.0;
    t110 = t18 * t35 * t38 * 2.0 + t19 * t36 * t39 * 2.0;
    t111 = t17 * t36 * t39 * 2.0 + t18 * t37 * t40 * 2.0;
    t112 = t21 * t35 * t38 * 2.0 + t22 * t36 * t39 * 2.0;
    t113 = t20 * t36 * t39 * 2.0 + t21 * t37 * t40 * 2.0;
    t36  = 1.0 / t68;
    t70  = 1.0 / sqrt(t68);
    t117 = t14 * t35 * t38 * 2.0 + -(t16 * t37 * t40 * 2.0);
    t118 = t17 * t35 * t38 * 2.0 + -(t19 * t37 * t40 * 2.0);
    t119 = t20 * t35 * t38 * 2.0 + -(t22 * t37 * t40 * 2.0);
    t35  = pow(t70, 3.0);
    t102 = t32 * t70;
    t103 = t33 * t70;
    t104 = t34 * t70;
    t122 = t32 * t34 * t36;
    t105 = t32 * t32 * t36 - 1.0;
    t106 = t33 * t33 * t36 - 1.0;
    t107 = t34 * t34 * t36 - 1.0;
    t124 = -(t32 * t33 * t36);
    t125 = -(t33 * t34 * t36);
    t163 = ((d + t13 * t102) + t11 * t104) + -(t12 * t103);
    t36  = t13 * t32 * t35;
    t39  = t11 * t34 * t35;
    t68  = t12 * t33 * t35;
    t222 = (((t12 * t16 * t70 + -(t13 * t15 * t70)) + t36 * t108 / 2.0) + t39 * t108 / 2.0)
           + -(t68 * t108 / 2.0);
    t223 = (((t12 * t14 * t70 + -(t11 * t15 * t70)) + t36 * t109 / 2.0) + t39 * t109 / 2.0)
           + -(t68 * t109 / 2.0);
    t224 = (((t12 * t19 * t70 + -(t13 * t18 * t70)) + t36 * t110 / 2.0) + t39 * t110 / 2.0)
           + -(t68 * t110 / 2.0);
    t225 = (((t12 * t17 * t70 + -(t11 * t18 * t70)) + t36 * t111 / 2.0) + t39 * t111 / 2.0)
           + -(t68 * t111 / 2.0);
    t226 = (((t11 * t16 * t70 + -(t13 * t14 * t70)) + t36 * t117 / 2.0) + t39 * t117 / 2.0)
           + -(t68 * t117 / 2.0);
    t227 = (((t11 * t19 * t70 + -(t13 * t17 * t70)) + t36 * t118 / 2.0) + t39 * t118 / 2.0)
           + -(t68 * t118 / 2.0);
    t240 = ((((t12 * t22 * t70 + -(t13 * t21 * t70)) + t104) + t36 * t112 / 2.0)
            + t39 * t112 / 2.0)
           + -(t68 * t112 / 2.0);
    t241 = ((((t11 * t21 * t70 + -(t12 * t20 * t70)) + t102) + t68 * t113 / 2.0)
            + -(t36 * t113 / 2.0))
           + -(t39 * t113 / 2.0);
    t254 = ((((t11 * t22 * t70 + -(t13 * t20 * t70)) + t103) + t36 * t119 / 2.0)
            + t39 * t119 / 2.0)
           + -(t68 * t119 / 2.0);
    t12           = t14 * t70 * t163;
    t37           = t15 * t70 * t163;
    t36           = t16 * t70 * t163;
    t40           = t17 * t70 * t163;
    t38           = t18 * t70 * t163;
    t169          = t19 * t70 * t163;
    t170          = t20 * t70 * t163;
    t171          = t21 * t70 * t163;
    t68           = t22 * t70 * t163;
    t272_tmp      = t32 * t35;
    t272          = t272_tmp * t109 * t163 / 2.0 + t102 * t223;
    t70           = t34 * t35;
    t273          = t70 * t110 * t163 / 2.0 + t104 * t224;
    t39           = t33 * t35;
    t20           = t39 * t118 * t163 / 2.0 + t103 * t227;
    t21           = (t36 + t70 * t117 * t163 / 2.0) + t104 * t226;
    t22           = (t68 + t70 * t119 * t163 / 2.0) + t104 * t254;
    t32           = -(t70 * t108 * t163 / 2.0) + -(t104 * t222);
    t34           = -(t272_tmp * t111 * t163 / 2.0) + -(t102 * t225);
    t33           = -(t39 * t117 * t163 / 2.0) + -(t103 * t226);
    t278          = -(t70 * t112 * t163 / 2.0) + -(t104 * t240);
    t279          = t272_tmp * t113 * t163 / 2.0 + -(t102 * t241);
    t280          = -(t39 * t119 * t163 / 2.0) + -(t103 * t254);
    t16           = (-t36 + t39 * t108 * t163 / 2.0) + t103 * t222;
    t17           = (-t37 + t70 * t109 * t163 / 2.0) + t104 * t223;
    t18           = (-t38 + t272_tmp * t110 * t163 / 2.0) + t102 * t224;
    t19           = (-t40 + t39 * t111 * t163 / 2.0) + t103 * t225;
    t15           = (t37 + -(t272_tmp * t108 * t163 / 2.0)) + -(t102 * t222);
    t14           = (t12 + -(t39 * t109 * t163 / 2.0)) + -(t103 * t223);
    t13           = (t169 + -(t39 * t110 * t163 / 2.0)) + -(t103 * t224);
    t11           = (t38 + -(t70 * t111 * t163 / 2.0)) + -(t104 * t225);
    t12           = (-t12 + t272_tmp * t117 * t163 / 2.0) + t102 * t226;
    t40           = (t40 + -(t272_tmp * t118 * t163 / 2.0)) + -(t102 * t227);
    t38           = (-t169 + -(t70 * t118 * t163 / 2.0)) + -(t104 * t227);
    t37           = (-t68 + t39 * t112 * t163 / 2.0) + t103 * t240;
    t35           = (t170 + -(t39 * t113 * t163 / 2.0)) + t103 * t241;
    t68           = (t171 + -(t272_tmp * t112 * t163 / 2.0)) + -(t102 * t240);
    t39           = (-t171 + t70 * t113 * t163 / 2.0) + -(t104 * t241);
    t36           = (-t170 + t272_tmp * t119 * t163 / 2.0) + t102 * t254;
    result[0][0]  = t107;
    result[0][1]  = t125;
    result[0][2]  = t122;
    result[0][3]  = t107;
    result[0][4]  = t125;
    result[0][5]  = t122;
    result[0][6]  = t107;
    result[0][7]  = t125;
    result[0][8]  = t122;
    result[1][0]  = t125;
    result[1][1]  = t106;
    result[1][2]  = t124;
    result[1][3]  = t125;
    result[1][4]  = t106;
    result[1][5]  = t124;
    result[1][6]  = t125;
    result[1][7]  = t106;
    result[1][8]  = t124;
    result[2][0]  = t122;
    result[2][1]  = t124;
    result[2][2]  = t105;
    result[2][3]  = t122;
    result[2][4]  = t124;
    result[2][5]  = t105;
    result[2][6]  = t122;
    result[2][7]  = t124;
    result[2][8]  = t105;
    result[3][0]  = t278 + 1.0;
    result[3][1]  = t37;
    result[3][2]  = t68;
    result[3][3]  = t278;
    result[3][4]  = t37;
    result[3][5]  = t68;
    result[3][6]  = t278;
    result[3][7]  = t37;
    result[3][8]  = t68;
    result[4][0]  = t22;
    result[4][1]  = t280 + 1.0;
    result[4][2]  = t36;
    result[4][3]  = t22;
    result[4][4]  = t280;
    result[4][5]  = t36;
    result[4][6]  = t22;
    result[4][7]  = t280;
    result[4][8]  = t36;
    result[5][0]  = t39;
    result[5][1]  = t35;
    result[5][2]  = t279 + 1.0;
    result[5][3]  = t39;
    result[5][4]  = t35;
    result[5][5]  = t279;
    result[5][6]  = t39;
    result[5][7]  = t35;
    result[5][8]  = t279;
    result[6][0]  = t273;
    result[6][1]  = t13;
    result[6][2]  = t18;
    result[6][3]  = t273 + 1.0;
    result[6][4]  = t13;
    result[6][5]  = t18;
    result[6][6]  = t273;
    result[6][7]  = t13;
    result[6][8]  = t18;
    result[7][0]  = t38;
    result[7][1]  = t20;
    result[7][2]  = t40;
    result[7][3]  = t38;
    result[7][4]  = t20 + 1.0;
    result[7][5]  = t40;
    result[7][6]  = t38;
    result[7][7]  = t20;
    result[7][8]  = t40;
    result[8][0]  = t11;
    result[8][1]  = t19;
    result[8][2]  = t34;
    result[8][3]  = t11;
    result[8][4]  = t19;
    result[8][5]  = t34 + 1.0;
    result[8][6]  = t11;
    result[8][7]  = t19;
    result[8][8]  = t34;
    result[9][0]  = t32;
    result[9][1]  = t16;
    result[9][2]  = t15;
    result[9][3]  = t32;
    result[9][4]  = t16;
    result[9][5]  = t15;
    result[9][6]  = t32 + 1.0;
    result[9][7]  = t16;
    result[9][8]  = t15;
    result[10][0] = t21;
    result[10][1] = t33;
    result[10][2] = t12;
    result[10][3] = t21;
    result[10][4] = t33;
    result[10][5] = t12;
    result[10][6] = t21;
    result[10][7] = t33 + 1.0;
    result[10][8] = t12;
    result[11][0] = t17;
    result[11][1] = t14;
    result[11][2] = t272;
    result[11][3] = t17;
    result[11][4] = t14;
    result[11][5] = t272;
    result[11][6] = t17;
    result[11][7] = t14;
    result[11][8] = t272 + 1.0;
}

__host__ __device__ void pDmpx_pt_flip(const double3&           x0,
                                       const double3&           x1,
                                       const double3&           x2,
                                       const double3&           x3,
                                       double                   d_hatSqrt,
                                       __GEIGEN__::Matrix12x9d& pDmpx)
{
    pDmpx_pt_flip(d_hatSqrt,
                  x0.x,
                  x0.y,
                  x0.z,
                  x1.x,
                  x1.y,
                  x1.z,
                  x2.x,
                  x2.y,
                  x2.z,
                  x3.x,
                  x3.y,
                  x3.z,
                  pDmpx.m);
}
__host__ __device__ void pDmpx_pe_reflect(double d,
                                          double x11,
                                          double x12,
                                          double x13,
                                          double x21,
                                          double x22,
                                          double x23,
                                          double x31,
                                          double x32,
                                          double x33,
                                          double result[9][4])
{
    double t10;
    double t100;
    double t101;
    double t102;
    double t103;
    double t104;
    double t11;
    double t111;
    double t112;
    double t115;
    double t116;
    double t117_tmp;
    double t12;
    double t122_tmp;
    double t13;
    double t14;
    double t15;
    double t154;
    double t16;
    double t197;
    double t210;
    double t211;
    double t212;
    double t213;
    double t214;
    double t215;
    double t216;
    double t217;
    double t219;
    double t220;
    double t221;
    double t222;
    double t227;
    double t228;
    double t229;
    double t230;
    double t233;
    double t234;
    double t235;
    double t236;
    double t29;
    double t30;
    double t31;
    double t32;
    double t320;
    double t328;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t427;
    double t63;
    double t65;
    double t67;
    double t68;
    double t72;
    double t76;
    double t77;
    double t8;
    double t81;
    double t85;
    double t9;
    double t95;
    double t96;
    double t97;
    double t99;
    /* pDmpx_pe_reflect */
    /*     RESULT = pDmpx_pe_reflect(D,X11,X12,X13,X21,X22,X23,X31,X32,X33) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Mar-2022 09:47:23 */
    t8  = -x21 + x11;
    t9  = -x22 + x12;
    t10 = -x23 + x13;
    t11 = -x31 + x11;
    t12 = -x32 + x12;
    t13 = -x33 + x13;
    t14 = -x31 + x21;
    t15 = -x32 + x22;
    t16 = -x33 + x23;
    t29 = t8 * t12 + -(t9 * t11);
    t30 = t8 * t13 + -(t10 * t11);
    t31 = t9 * t13 + -(t10 * t12);
    t32 = fabs(t29);
    t33 = fabs(t30);
    t34 = fabs(t31);
    t35 = t29;
    if(t29 < 0.0)
    {
        t35 = -1.0;
    }
    else if(t29 > 0.0)
    {
        t35 = 1.0;
    }
    else if(t29 == 0.0)
    {
        t35 = 0.0;
    }
    t36 = t30;
    if(t30 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t30 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t30 == 0.0)
    {
        t36 = 0.0;
    }
    t37 = t31;
    if(t31 < 0.0)
    {
        t37 = -1.0;
    }
    else if(t31 > 0.0)
    {
        t37 = 1.0;
    }
    else if(t31 == 0.0)
    {
        t37 = 0.0;
    }
    t99      = t9 * t32 * t35 * 2.0 + t10 * t33 * t36 * 2.0;
    t100     = t8 * t33 * t36 * 2.0 + t9 * t34 * t37 * 2.0;
    t101     = t12 * t32 * t35 * 2.0 + t13 * t33 * t36 * 2.0;
    t102     = t11 * t33 * t36 * 2.0 + t12 * t34 * t37 * 2.0;
    t103     = t15 * t32 * t35 * 2.0 + t16 * t33 * t36 * 2.0;
    t104     = t14 * t33 * t36 * 2.0 + t15 * t34 * t37 * 2.0;
    t63      = 1.0 / sqrt((t32 * t32 + t33 * t33) + t34 * t34);
    t111     = t8 * t32 * t35 * 2.0 + -(t10 * t34 * t37 * 2.0);
    t112     = t11 * t32 * t35 * 2.0 + -(t13 * t34 * t37 * 2.0);
    t37      = t14 * t32 * t35 * 2.0 + -(t16 * t34 * t37 * 2.0);
    t36      = pow(t63, 3.0);
    t65      = t14 * t14 * t63;
    t35      = t15 * t15 * t63;
    t67      = t16 * t16 * t63;
    t68      = t8 * t14 * t63;
    t72      = t9 * t15 * t63;
    t76      = t10 * t16 * t63;
    t77      = t11 * t14 * t63;
    t81      = t12 * t15 * t63;
    t85      = t13 * t16 * t63;
    t32      = t14 * t15 * t63;
    t33      = t14 * t16 * t63;
    t34      = t15 * t16 * t63;
    t95      = t29 * t63;
    t96      = t30 * t63;
    t97      = t31 * t63;
    t117_tmp = t14 * t29 * t36;
    t122_tmp = t16 * t31 * t36;
    t115     = t15 * t95 + t16 * t96;
    t116     = t14 * t96 + t15 * t97;
    t427     = t14 * t30 * t36;
    t31      = t15 * t31 * t36;
    t212     = (-t33 + t427 * t103 / 2.0) + t31 * t103 / 2.0;
    t213     = (t34 + t427 * t37 / 2.0) + t31 * t37 / 2.0;
    t320     = t15 * t29 * t36;
    t36 *= t16 * t30;
    t214 = (-t33 + t320 * t104 / 2.0) + t36 * t104 / 2.0;
    t215 = (-t32 + t320 * t37 / 2.0) + t36 * t37 / 2.0;
    t227 = ((-(t10 * t14 * t63) + t96) + t427 * t99 / 2.0) + t31 * t99 / 2.0;
    t229 = ((-(t13 * t14 * t63) + t96) + t427 * t101 / 2.0) + t31 * t101 / 2.0;
    t234 = ((t10 * t15 * t63 + -t97) + t427 * t111 / 2.0) + t31 * t111 / 2.0;
    t236 = ((t13 * t15 * t63 + -t97) + t427 * t112 / 2.0) + t31 * t112 / 2.0;
    t13  = fabs(t115);
    t154 = fabs(t116);
    t29  = t115;
    if(t115 < 0.0)
    {
        t29 = -1.0;
    }
    else if(t115 > 0.0)
    {
        t29 = 1.0;
    }
    else if(t115 == 0.0)
    {
        t29 = 0.0;
    }
    t30 = t116;
    if(t116 < 0.0)
    {
        t30 = -1.0;
    }
    else if(t116 > 0.0)
    {
        t30 = 1.0;
    }
    else if(t116 == 0.0)
    {
        t30 = 0.0;
    }
    t197 = t14 * t95 + t16 * -t97;
    t210 = (t32 + t122_tmp * t103 / 2.0) + -(t117_tmp * t103 / 2.0);
    t211 = (t34 + t117_tmp * t104 / 2.0) + -(t122_tmp * t104 / 2.0);
    t216 = ((t35 + t67) + -(t320 * t103 / 2.0)) + -(t36 * t103 / 2.0);
    t217 = ((t65 + t35) + -(t427 * t104 / 2.0)) + -(t31 * t104 / 2.0);
    t104 = ((t65 + t67) + t122_tmp * t37 / 2.0) + -(t117_tmp * t37 / 2.0);
    t219 = ((t72 + t76) + -(t320 * t99 / 2.0)) + -(t36 * t99 / 2.0);
    t220 = ((t68 + t72) + -(t427 * t100 / 2.0)) + -(t31 * t100 / 2.0);
    t221 = ((t81 + t85) + -(t320 * t101 / 2.0)) + -(t36 * t101 / 2.0);
    t222 = ((t77 + t81) + -(t427 * t102 / 2.0)) + -(t31 * t102 / 2.0);
    t67  = ((t68 + t76) + t122_tmp * t111 / 2.0) + -(t117_tmp * t111 / 2.0);
    t103 = ((t77 + t85) + t122_tmp * t112 / 2.0) + -(t117_tmp * t112 / 2.0);
    t65 = ((t9 * t16 * t63 + t97) + t117_tmp * t100 / 2.0) + -(t122_tmp * t100 / 2.0);
    t72 = ((t12 * t16 * t63 + t97) + t117_tmp * t102 / 2.0) + -(t122_tmp * t102 / 2.0);
    t228 = ((t8 * t16 * t63 + t96) + -(t320 * t100 / 2.0)) + -(t36 * t100 / 2.0);
    t230 = ((t11 * t16 * t63 + t96) + -(t320 * t102 / 2.0)) + -(t36 * t102 / 2.0);
    t233 = ((t8 * t15 * t63 + t95) + -(t320 * t111 / 2.0)) + -(t36 * t111 / 2.0);
    t235 = ((t11 * t15 * t63 + t95) + -(t320 * t112 / 2.0)) + -(t36 * t112 / 2.0);
    t33 = fabs(t197);
    t36 = t197;
    if(t197 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t197 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t197 == 0.0)
    {
        t36 = 0.0;
    }
    t35  = t13 * t29;
    t34  = t154 * t30;
    t32  = t33 * t36;
    t320 = (-(t34 * t212 * 2.0) + t32 * t210 * 2.0) + t35 * t216 * 2.0;
    t96  = (t35 * t214 * 2.0 + t32 * t211 * 2.0) + -(t34 * t217 * 2.0);
    t111 = (t32 * t67 * 2.0 + t35 * t233 * 2.0) + -(t34 * t234 * 2.0);
    t328 = (t32 * t103 * 2.0 + t35 * t235 * 2.0) + -(t34 * t236 * 2.0);
    t102 = 1.0 / sqrt((t13 * t13 + t154 * t154) + t33 * t33);
    t97  = (t34 * t213 * 2.0 + t35 * t215 * 2.0) + -(t32 * t104 * 2.0);
    t112 = (t34 * t220 * 2.0 + t35 * t228 * 2.0) + -(t32 * t65 * 2.0);
    t154 = (t34 * t222 * 2.0 + t35 * t230 * 2.0) + -(t32 * t72 * 2.0);
    t13  = pow(t102, 3.0);
    t11  = t115 * t102;
    t15  = t116 * t102;
    t30  = t197 * t102;
    t36 = ((t9 * t14 * t63 - t95) - t117_tmp * t99 / 2.0) + t122_tmp * t99 / 2.0;
    t16 = (t35 * t219 * 2.0 - t34 * t227 * 2.0) + t32 * t36 * 2.0;
    t33 = -t9 * t102;
    t31 = t8 * t115 * t13;
    t29 = t10 * t116 * t13;
    t37 = t9 * t197 * t13;
    t100 = ((((t8 * t219 * t102 + t10 * t227 * t102) + t33 * t36) + t31 * t16 * -0.5)
            + t29 * t16 / 2.0)
           + t37 * t16 / 2.0;
    t36 = ((t12 * t14 * t63 - t95) - t117_tmp * t101 / 2.0) + t122_tmp * t101 / 2.0;
    t85 = (t35 * t221 * 2.0 - t34 * t229 * 2.0) + t32 * t36 * 2.0;
    t68 = (((((t11 + t8 * t221 * t102) + t10 * t229 * t102) + t33 * t36) + t31 * t85 * -0.5)
           + t29 * t85 / 2.0)
          + t37 * t85 / 2.0;
    t77 = ((d + t10 * t15) + -(t8 * t11)) + t9 * t30;
    t76 = ((((-(t10 * t220 * t102) + t9 * t65 * t102) + t8 * t228 * t102) + t29 * t112 / 2.0)
           + -(t31 * t112 / 2.0))
          + t37 * t112 / 2.0;
    t35 = ((((-(t9 * t67 * t102) + t8 * t233 * t102) + t10 * t234 * t102) + t29 * t111 / 2.0)
           + -(t31 * t111 / 2.0))
          + t37 * t111 / 2.0;
    t34 = (((((t11 + t10 * t212 * t102) + -(t9 * t210 * t102)) + t8 * t216 * t102)
            + t29 * t320 / 2.0)
           + -(t31 * t320 / 2.0))
          + t37 * t320 / 2.0;
    t36 = (((((-t15 + t8 * t214 * t102) + -(t9 * t211 * t102)) + t10 * t217 * t102)
            + t29 * t96 / 2.0)
           + -(t31 * t96 / 2.0))
          + t37 * t96 / 2.0;
    t32 = (((((-t30 + t8 * t215 * t102) + -(t10 * t213 * t102)) + t9 * t104 * t102)
            + t29 * t97 / 2.0)
           + -(t31 * t97 / 2.0))
          + t37 * t97 / 2.0;
    t427 = (((((t15 + -(t10 * t222 * t102)) + t9 * t72 * t102) + t8 * t230 * t102)
             + t29 * t154 / 2.0)
            + -(t31 * t154 / 2.0))
           + t37 * t154 / 2.0;
    t33 = (((((t30 + -(t9 * t103 * t102)) + t8 * t235 * t102) + t10 * t236 * t102)
            + t29 * t328 / 2.0)
           + -(t31 * t328 / 2.0))
          + t37 * t328 / 2.0;
    t81  = t116 * t13 * t77;
    t104 = t115 * t13 * t77;
    t103 = (t212 * t102 * t77 + t81 * t320 / 2.0) + t15 * t34;
    t67  = ((t217 * t102 * t77 + t81 * t96 / 2.0) + t15 * t36) + 1.0;
    t72  = (t227 * t102 * t77 + t81 * t16 / 2.0) + t15 * t100;
    t65  = (t236 * t102 * t77 + t81 * t328 / 2.0) + t15 * t33;
    t13  = (t214 * t102 * t77 + -(t104 * t96 / 2.0)) + -(t11 * t36);
    t30  = (-(t213 * t102 * t77) + t81 * t97 / 2.0) + t15 * t32;
    t29  = (t215 * t102 * t77 + -(t104 * t97 / 2.0)) + -(t11 * t32);
    t36  = ((t216 * t102 * t77 + -(t104 * t320 / 2.0)) + -(t11 * t34)) + 1.0;
    t31  = (-(t228 * t102 * t77) + t104 * t112 / 2.0) + t11 * t76;
    t37  = (-(t233 * t102 * t77) + t104 * t111 / 2.0) + t11 * t35;
    t35  = (-(t234 * t102 * t77) + -(t81 * t111 / 2.0)) + -t15 * t35;
    t34  = (t230 * t102 * t77 + -(t104 * t154 / 2.0)) + -(t11 * t427);
    t32  = (-(t229 * t102 * t77) + t81 * t85 * -0.5) + -t15 * t68;
    t33  = (t235 * t102 * t77 + -(t104 * t328 / 2.0)) + -(t11 * t33);
    result[0][0] = t36;
    result[0][1] = t103;
    result[0][2] = t36;
    result[0][3] = t103;
    result[1][0] = t29;
    result[1][1] = t30;
    result[1][2] = t29;
    result[1][3] = t30;
    result[2][0] = t13;
    result[2][1] = t67;
    result[2][2] = t13;
    result[2][3] = t67;
    t36          = (-(t221 * t102 * t77) + t104 * t85 / 2.0) + t11 * t68;
    result[3][0] = t36 - 1.0;
    result[3][1] = t32;
    result[3][2] = t36;
    result[3][3] = t32;
    result[4][0] = t33;
    result[4][1] = t65;
    result[4][2] = t33;
    result[4][3] = t65;
    result[5][0] = t34;
    t36          = (-(t222 * t102 * t77) + t81 * t154 / 2.0) + t15 * t427;
    result[5][1] = t36 - 1.0;
    result[5][2] = t34;
    result[5][3] = t36;
    t36          = (t219 * t102 * t77 + t104 * t16 * -0.5) + -(t11 * t100);
    result[6][0] = t36;
    result[6][1] = t72;
    result[6][2] = t36 - 1.0;
    result[6][3] = t72;
    result[7][0] = t37;
    result[7][1] = t35;
    result[7][2] = t37;
    result[7][3] = t35;
    result[8][0] = t31;
    t36          = (t220 * t102 * t77 + -(t81 * t112 / 2.0)) + -t15 * t76;
    result[8][1] = t36;
    result[8][2] = t31;
    result[8][3] = t36 - 1.0;
}

__host__ __device__ void pDmpx_pe_reflect(const double3&          x0,
                                          const double3&          x1,
                                          const double3&          x2,
                                          double                  d_hatSqrt,
                                          __GEIGEN__::Matrix9x4d& pDmpx)
{
    pDmpx_pe_reflect(
        d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, pDmpx.m);
}
__host__ __device__ void pDmpx_pe(double d,
                                  double x11,
                                  double x12,
                                  double x13,
                                  double x21,
                                  double x22,
                                  double x23,
                                  double x31,
                                  double x32,
                                  double x33,
                                  double result[9][4])
{
    double t10;
    double t100;
    double t101;
    double t102;
    double t103;
    double t104;
    double t11;
    double t111;
    double t112;
    double t115;
    double t116;
    double t117_tmp;
    double t12;
    double t122_tmp;
    double t13;
    double t14;
    double t15;
    double t154;
    double t16;
    double t197;
    double t210;
    double t211;
    double t212;
    double t213;
    double t214;
    double t215;
    double t216;
    double t217;
    double t219;
    double t220;
    double t221;
    double t222;
    double t227;
    double t228;
    double t229;
    double t230;
    double t233;
    double t234;
    double t235;
    double t236;
    double t29;
    double t30;
    double t31;
    double t32;
    double t321;
    double t328;
    double t33;
    double t34;
    double t35;
    double t36;
    double t37;
    double t431;
    double t63;
    double t65;
    double t67;
    double t68;
    double t72;
    double t76;
    double t77;
    double t8;
    double t81;
    double t85;
    double t9;
    double t95;
    double t96;
    double t97;
    double t99;
    /* pDmpx_pe */
    /*     RESULT = pDmpx_pe(D,X11,X12,X13,X21,X22,X23,X31,X32,X33) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     09-Mar-2022 13:51:17 */
    t8  = -x21 + x11;
    t9  = -x22 + x12;
    t10 = -x23 + x13;
    t11 = -x31 + x11;
    t12 = -x32 + x12;
    t13 = -x33 + x13;
    t14 = -x31 + x21;
    t15 = -x32 + x22;
    t16 = -x33 + x23;
    t29 = t8 * t12 + -(t9 * t11);
    t30 = t8 * t13 + -(t10 * t11);
    t31 = t9 * t13 + -(t10 * t12);
    t32 = fabs(t29);
    t33 = fabs(t30);
    t34 = fabs(t31);
    t35 = t29;
    if(t29 < 0.0)
    {
        t35 = -1.0;
    }
    else if(t29 > 0.0)
    {
        t35 = 1.0;
    }
    else if(t29 == 0.0)
    {
        t35 = 0.0;
    }
    t36 = t30;
    if(t30 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t30 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t30 == 0.0)
    {
        t36 = 0.0;
    }
    t37 = t31;
    if(t31 < 0.0)
    {
        t37 = -1.0;
    }
    else if(t31 > 0.0)
    {
        t37 = 1.0;
    }
    else if(t31 == 0.0)
    {
        t37 = 0.0;
    }
    t99      = t9 * t32 * t35 * 2.0 + t10 * t33 * t36 * 2.0;
    t100     = t8 * t33 * t36 * 2.0 + t9 * t34 * t37 * 2.0;
    t101     = t12 * t32 * t35 * 2.0 + t13 * t33 * t36 * 2.0;
    t102     = t11 * t33 * t36 * 2.0 + t12 * t34 * t37 * 2.0;
    t103     = t15 * t32 * t35 * 2.0 + t16 * t33 * t36 * 2.0;
    t104     = t14 * t33 * t36 * 2.0 + t15 * t34 * t37 * 2.0;
    t63      = 1.0 / sqrt((t32 * t32 + t33 * t33) + t34 * t34);
    t111     = t8 * t32 * t35 * 2.0 + -(t10 * t34 * t37 * 2.0);
    t112     = t11 * t32 * t35 * 2.0 + -(t13 * t34 * t37 * 2.0);
    t37      = t14 * t32 * t35 * 2.0 + -(t16 * t34 * t37 * 2.0);
    t36      = pow(t63, 3.0);
    t65      = t14 * t14 * t63;
    t35      = t15 * t15 * t63;
    t67      = t16 * t16 * t63;
    t68      = t8 * t14 * t63;
    t72      = t9 * t15 * t63;
    t76      = t10 * t16 * t63;
    t77      = t11 * t14 * t63;
    t81      = t12 * t15 * t63;
    t85      = t13 * t16 * t63;
    t32      = t14 * t15 * t63;
    t33      = t14 * t16 * t63;
    t34      = t15 * t16 * t63;
    t95      = t29 * t63;
    t96      = t30 * t63;
    t97      = t31 * t63;
    t117_tmp = t14 * t29 * t36;
    t122_tmp = t16 * t31 * t36;
    t115     = t15 * t95 + t16 * t96;
    t116     = t14 * t96 + t15 * t97;
    t431     = t14 * t30 * t36;
    t31      = t15 * t31 * t36;
    t212     = (-t33 + t431 * t103 / 2.0) + t31 * t103 / 2.0;
    t213     = (t34 + t431 * t37 / 2.0) + t31 * t37 / 2.0;
    t321     = t15 * t29 * t36;
    t36 *= t16 * t30;
    t214 = (-t33 + t321 * t104 / 2.0) + t36 * t104 / 2.0;
    t215 = (-t32 + t321 * t37 / 2.0) + t36 * t37 / 2.0;
    t227 = ((-(t10 * t14 * t63) + t96) + t431 * t99 / 2.0) + t31 * t99 / 2.0;
    t229 = ((-(t13 * t14 * t63) + t96) + t431 * t101 / 2.0) + t31 * t101 / 2.0;
    t234 = ((t10 * t15 * t63 + -t97) + t431 * t111 / 2.0) + t31 * t111 / 2.0;
    t236 = ((t13 * t15 * t63 + -t97) + t431 * t112 / 2.0) + t31 * t112 / 2.0;
    t13  = fabs(t115);
    t154 = fabs(t116);
    t29  = t115;
    if(t115 < 0.0)
    {
        t29 = -1.0;
    }
    else if(t115 > 0.0)
    {
        t29 = 1.0;
    }
    else if(t115 == 0.0)
    {
        t29 = 0.0;
    }
    t30 = t116;
    if(t116 < 0.0)
    {
        t30 = -1.0;
    }
    else if(t116 > 0.0)
    {
        t30 = 1.0;
    }
    else if(t116 == 0.0)
    {
        t30 = 0.0;
    }
    t197 = t14 * t95 + t16 * -t97;
    t210 = (t32 + t122_tmp * t103 / 2.0) + -(t117_tmp * t103 / 2.0);
    t211 = (t34 + t117_tmp * t104 / 2.0) + -(t122_tmp * t104 / 2.0);
    t216 = ((t35 + t67) + -(t321 * t103 / 2.0)) + -(t36 * t103 / 2.0);
    t217 = ((t65 + t35) + -(t431 * t104 / 2.0)) + -(t31 * t104 / 2.0);
    t104 = ((t65 + t67) + t122_tmp * t37 / 2.0) + -(t117_tmp * t37 / 2.0);
    t219 = ((t72 + t76) + -(t321 * t99 / 2.0)) + -(t36 * t99 / 2.0);
    t220 = ((t68 + t72) + -(t431 * t100 / 2.0)) + -(t31 * t100 / 2.0);
    t221 = ((t81 + t85) + -(t321 * t101 / 2.0)) + -(t36 * t101 / 2.0);
    t222 = ((t77 + t81) + -(t431 * t102 / 2.0)) + -(t31 * t102 / 2.0);
    t67  = ((t68 + t76) + t122_tmp * t111 / 2.0) + -(t117_tmp * t111 / 2.0);
    t103 = ((t77 + t85) + t122_tmp * t112 / 2.0) + -(t117_tmp * t112 / 2.0);
    t65 = ((t9 * t16 * t63 + t97) + t117_tmp * t100 / 2.0) + -(t122_tmp * t100 / 2.0);
    t72 = ((t12 * t16 * t63 + t97) + t117_tmp * t102 / 2.0) + -(t122_tmp * t102 / 2.0);
    t228 = ((t8 * t16 * t63 + t96) + -(t321 * t100 / 2.0)) + -(t36 * t100 / 2.0);
    t230 = ((t11 * t16 * t63 + t96) + -(t321 * t102 / 2.0)) + -(t36 * t102 / 2.0);
    t233 = ((t8 * t15 * t63 + t95) + -(t321 * t111 / 2.0)) + -(t36 * t111 / 2.0);
    t235 = ((t11 * t15 * t63 + t95) + -(t321 * t112 / 2.0)) + -(t36 * t112 / 2.0);
    t33 = fabs(t197);
    t36 = t197;
    if(t197 < 0.0)
    {
        t36 = -1.0;
    }
    else if(t197 > 0.0)
    {
        t36 = 1.0;
    }
    else if(t197 == 0.0)
    {
        t36 = 0.0;
    }
    t35  = t13 * t29;
    t34  = t154 * t30;
    t32  = t33 * t36;
    t96  = (-(t34 * t212 * 2.0) + t32 * t210 * 2.0) + t35 * t216 * 2.0;
    t321 = (t35 * t214 * 2.0 + t32 * t211 * 2.0) + -(t34 * t217 * 2.0);
    t111 = (t32 * t67 * 2.0 + t35 * t233 * 2.0) + -(t34 * t234 * 2.0);
    t328 = (t32 * t103 * 2.0 + t35 * t235 * 2.0) + -(t34 * t236 * 2.0);
    t102 = 1.0 / sqrt((t13 * t13 + t154 * t154) + t33 * t33);
    t97  = (t34 * t213 * 2.0 + t35 * t215 * 2.0) + -(t32 * t104 * 2.0);
    t112 = (t34 * t220 * 2.0 + t35 * t228 * 2.0) + -(t32 * t65 * 2.0);
    t154 = (t34 * t222 * 2.0 + t35 * t230 * 2.0) + -(t32 * t72 * 2.0);
    t13  = pow(t102, 3.0);
    t11  = t115 * t102;
    t15  = t116 * t102;
    t30  = t197 * t102;
    t36 = ((t9 * t14 * t63 - t95) - t117_tmp * t99 / 2.0) + t122_tmp * t99 / 2.0;
    t16 = (t35 * t219 * 2.0 - t34 * t227 * 2.0) + t32 * t36 * 2.0;
    t33 = -t9 * t102;
    t31 = t8 * t115 * t13;
    t29 = t10 * t116 * t13;
    t37 = t9 * t197 * t13;
    t100 = ((((t8 * t219 * t102 + t10 * t227 * t102) + t33 * t36) + t31 * t16 * -0.5)
            + t29 * t16 / 2.0)
           + t37 * t16 / 2.0;
    t36 = ((t12 * t14 * t63 - t95) - t117_tmp * t101 / 2.0) + t122_tmp * t101 / 2.0;
    t85 = (t35 * t221 * 2.0 - t34 * t229 * 2.0) + t32 * t36 * 2.0;
    t68 = (((((t11 + t8 * t221 * t102) + t10 * t229 * t102) + t33 * t36) + t31 * t85 * -0.5)
           + t29 * t85 / 2.0)
          + t37 * t85 / 2.0;
    t77 = ((d + t10 * t15) + -(t8 * t11)) + t9 * t30;
    t76 = ((((-(t10 * t220 * t102) + t9 * t65 * t102) + t8 * t228 * t102) + t29 * t112 / 2.0)
           + -(t31 * t112 / 2.0))
          + t37 * t112 / 2.0;
    t35 = ((((-(t9 * t67 * t102) + t8 * t233 * t102) + t10 * t234 * t102) + t29 * t111 / 2.0)
           + -(t31 * t111 / 2.0))
          + t37 * t111 / 2.0;
    t32 = (((((t11 + t10 * t212 * t102) + -(t9 * t210 * t102)) + t8 * t216 * t102)
            + t29 * t96 / 2.0)
           + -(t31 * t96 / 2.0))
          + t37 * t96 / 2.0;
    t34 = (((((-t15 + t8 * t214 * t102) + -(t9 * t211 * t102)) + t10 * t217 * t102)
            + t29 * t321 / 2.0)
           + -(t31 * t321 / 2.0))
          + t37 * t321 / 2.0;
    t36 = (((((-t30 + t8 * t215 * t102) + -(t10 * t213 * t102)) + t9 * t104 * t102)
            + t29 * t97 / 2.0)
           + -(t31 * t97 / 2.0))
          + t37 * t97 / 2.0;
    t431 = (((((t15 + -(t10 * t222 * t102)) + t9 * t72 * t102) + t8 * t230 * t102)
             + t29 * t154 / 2.0)
            + -(t31 * t154 / 2.0))
           + t37 * t154 / 2.0;
    t33 = (((((t30 + -(t9 * t103 * t102)) + t8 * t235 * t102) + t10 * t236 * t102)
            + t29 * t328 / 2.0)
           + -(t31 * t328 / 2.0))
          + t37 * t328 / 2.0;
    t81  = t116 * t13 * t77;
    t104 = t115 * t13 * t77;
    t103 = (t234 * t102 * t77 + t81 * t111 / 2.0) + t15 * t35;
    t72  = (t229 * t102 * t77 + t81 * t85 / 2.0) + t15 * t68;
    t67  = (-(t214 * t102 * t77) + t104 * t321 / 2.0) + t11 * t34;
    t65  = (-(t212 * t102 * t77) + -(t81 * t96 / 2.0)) + -t15 * t32;
    t13  = (t213 * t102 * t77 + -(t81 * t97 / 2.0)) + -t15 * t36;
    t30  = (-(t215 * t102 * t77) + t104 * t97 / 2.0) + t11 * t36;
    t29  = ((-(t216 * t102 * t77) + t104 * t96 / 2.0) + t11 * t32) - 1.0;
    t36  = ((-(t217 * t102 * t77) + -(t81 * t321 / 2.0)) + -t15 * t34) - 1.0;
    t31  = (t228 * t102 * t77 + -(t104 * t112 / 2.0)) + -(t11 * t76);
    t37  = (-(t227 * t102 * t77) + t81 * t16 * -0.5) + -t15 * t100;
    t35  = (t233 * t102 * t77 + -(t104 * t111 / 2.0)) + -(t11 * t35);
    t34  = (-(t230 * t102 * t77) + t104 * t154 / 2.0) + t11 * t431;
    t32  = (-(t235 * t102 * t77) + t104 * t328 / 2.0) + t11 * t33;
    t33  = (-(t236 * t102 * t77) + -(t81 * t328 / 2.0)) + -t15 * t33;
    result[0][0] = t29;
    result[0][1] = t65;
    result[0][2] = t29;
    result[0][3] = t65;
    result[1][0] = t30;
    result[1][1] = t13;
    result[1][2] = t30;
    result[1][3] = t13;
    result[2][0] = t67;
    result[2][1] = t36;
    result[2][2] = t67;
    result[2][3] = t36;
    t36          = (t221 * t102 * t77 + t104 * t85 * -0.5) + -(t11 * t68);
    result[3][0] = t36 + 1.0;
    result[3][1] = t72;
    result[3][2] = t36;
    result[3][3] = t72;
    result[4][0] = t32;
    result[4][1] = t33;
    result[4][2] = t32;
    result[4][3] = t33;
    result[5][0] = t34;
    t36          = (t222 * t102 * t77 + -(t81 * t154 / 2.0)) + -t15 * t431;
    result[5][1] = t36 + 1.0;
    result[5][2] = t34;
    result[5][3] = t36;
    t36          = (-(t219 * t102 * t77) + t104 * t16 / 2.0) + t11 * t100;
    result[6][0] = t36;
    result[6][1] = t37;
    result[6][2] = t36 + 1.0;
    result[6][3] = t37;
    result[7][0] = t35;
    result[7][1] = t103;
    result[7][2] = t35;
    result[7][3] = t103;
    result[8][0] = t31;
    t36          = (-(t220 * t102 * t77) + t81 * t112 / 2.0) + t15 * t76;
    result[8][1] = t36;
    result[8][2] = t31;
    result[8][3] = t36 + 1.0;
}

__host__ __device__ void pDmpx_pe(const double3&          x0,
                                  const double3&          x1,
                                  const double3&          x2,
                                  double                  d_hatSqrt,
                                  __GEIGEN__::Matrix9x4d& pDmpx)
{
    pDmpx_pe(
        d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, x2.x, x2.y, x2.z, pDmpx.m);
}
__host__ __device__ void pDmpx_pp_reflect(
    double d, double x11, double x12, double x13, double x21, double x22, double x23, double result[6])
{
    double t10;
    double t12;
    double t17;
    double t18;
    double t20;
    double t24;
    double t25;
    double t5;
    double t6;
    double t7;
    double t8;
    double t9;
    /* pDmpx_pp_reflect */
    /*     RESULT = pDmpx_pp_reflect(D,X11,X12,X13,X21,X22,X23) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     09-Mar-2022 12:07:31 */
    t5  = -x21 + x11;
    t6  = -x22 + x12;
    t7  = -x23 + x13;
    t8  = fabs(t5);
    t9  = fabs(t6);
    t10 = fabs(t7);
    if(t5 < 0.0)
    {
        t5 = -1.0;
    }
    else if(t5 > 0.0)
    {
        t5 = 1.0;
    }
    else if(t5 == 0.0)
    {
        t5 = 0.0;
    }
    t12 = t6;
    if(t6 < 0.0)
    {
        t12 = -1.0;
    }
    else if(t6 > 0.0)
    {
        t12 = 1.0;
    }
    else if(t6 == 0.0)
    {
        t12 = 0.0;
    }
    if(t7 < 0.0)
    {
        t7 = -1.0;
    }
    else if(t7 > 0.0)
    {
        t7 = 1.0;
    }
    else if(t7 == 0.0)
    {
        t7 = 0.0;
    }
    t17 = (t8 * t8 + t9 * t9) + t10 * t10;
    t18 = 1.0 / t17;
    t17 = sqrt(t17);
    t20 = 1.0 / t17;
    t8  = t6 * t8 * t5;
    t24 = t8 * t18;
    t5  = t6 * t9 * t12;
    t25 = t5 * t18;
    t6  = t6 * t10 * t7;
    t7  = t6 * t18;
    t12 = pow(t20, 3.0);
    t17 = d + -t17;
    t9  = t20 * t17;
    t8  = t8 * t12 * t17;
    t5  = t5 * t12 * t17;
    t17 *= t6 * t12;
    result[0] = -t24 - t8;
    result[1] = ((-t25 + t9) - t5) + 1.0;
    result[2] = -t7 - t17;
    result[3] = t24 + t8;
    result[4] = ((t25 - t9) + t5) - 1.0;
    result[5] = t7 + t17;
}
__host__ __device__ void pDmpx_pp_reflect(const double3&       x0,
                                          const double3&       x1,
                                          double               d_hatSqrt,
                                          __GEIGEN__::Vector6& pDmpx)
{
    pDmpx_pp_reflect(d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, pDmpx.v);
}
__host__ __device__ void pDmpx_pp(
    double d, double x11, double x12, double x13, double x21, double x22, double x23, double result[6])
{
    double b_result_tmp;
    double b_t113_tmp;
    double b_t114_tmp;
    double result_tmp;
    double t11;
    double t110_tmp;
    double t113;
    double t113_tmp;
    double t114;
    double t114_tmp;
    double t115;
    double t115_tmp;
    double t116;
    double t116_tmp;
    double t117_tmp;
    double t118_tmp;
    double t12;
    double t120;
    double t121;
    double t122;
    double t128;
    double t13;
    double t14;
    double t15;
    double t16;
    double t17;
    double t18;
    double t19;
    double t22;
    double t23;
    double t27;
    double t28;
    double t29;
    double t31;
    double t32;
    double t36;
    double t45;
    double t46;
    double t47_tmp;
    double t51_tmp;
    double t55_tmp;
    double t56;
    double t70;
    double t75;
    double t76;
    double t77;
    double t78;
    double t80_tmp;
    double t88_tmp;
    double t90;
    double t91;
    double t92_tmp;
    double t94;
    double t95;
    double t96;
    double t97;
    double t98;
    double t99;
    /* pDmpx_pp */
    /*     RESULT = pDmpx_pp(D,X11,X12,X13,X21,X22,X23) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     06-Mar-2022 09:50:21 */
    t11 = -x21 + x11;
    t12 = -x22 + x12;
    t13 = -x23 + x13;
    t14 = fabs(t11);
    t15 = fabs(t12);
    t16 = fabs(t13);
    t17 = t11;
    if(t11 < 0.0)
    {
        t17 = -1.0;
    }
    else if(t11 > 0.0)
    {
        t17 = 1.0;
    }
    else if(t11 == 0.0)
    {
        t17 = 0.0;
    }
    t18 = t12;
    if(t12 < 0.0)
    {
        t18 = -1.0;
    }
    else if(t12 > 0.0)
    {
        t18 = 1.0;
    }
    else if(t12 == 0.0)
    {
        t18 = 0.0;
    }
    t19 = t13;
    if(t13 < 0.0)
    {
        t19 = -1.0;
    }
    else if(t13 > 0.0)
    {
        t19 = 1.0;
    }
    else if(t13 == 0.0)
    {
        t19 = 0.0;
    }
    t22        = t11 * t11;
    t23        = t13 * t13;
    t27        = (t14 * t14 + t15 * t15) + t16 * t16;
    t28        = 1.0 / t27;
    t27        = sqrt(t27);
    t29        = t28 * t28;
    t31        = 1.0 / t27;
    t47_tmp    = t11 * t14 * t17;
    t51_tmp    = t12 * t15 * t18;
    t55_tmp    = t13 * t16 * t19;
    t32        = pow(t31, 3.0);
    t36        = d + -t27;
    t27        = t12 * t31;
    t78        = t22 * t28 + t23 * t28;
    t56        = t51_tmp * t32;
    t70        = t31 * t36;
    t80_tmp    = t47_tmp * t32;
    t88_tmp    = t55_tmp * t32;
    t45        = 1.0 / (t27 + 1.0);
    t76        = t36 * t27 + x12;
    t46        = t45 * t45;
    t75        = t11 * t70 + x11;
    t77        = t13 * t70 + x13;
    t92_tmp    = t45 * t78;
    t27        = t11 * t15 * t18;
    t113_tmp   = t11 * t31;
    b_t113_tmp = t27 * t32;
    t113       = t113_tmp * (t27 * t28 + b_t113_tmp * t36);
    t27        = t13 * t14 * t17;
    t114_tmp   = t13 * t31;
    b_t114_tmp = t27 * t32;
    t114       = t114_tmp * (t27 * t28 + b_t114_tmp * t36);
    t27        = t11 * t16 * t19;
    t115_tmp   = t27 * t32;
    t115       = t113_tmp * (t27 * t28 + t115_tmp * t36);
    t27        = t13 * t15 * t18;
    t116_tmp   = t27 * t32;
    t116       = t114_tmp * (t27 * t28 + t116_tmp * t36);
    t117_tmp   = t14 * t17;
    t118_tmp   = t16 * t19;
    t90        = t31 * t75;
    t91        = t31 * t77;
    t94        = t80_tmp * t75;
    t95        = b_t113_tmp * t75;
    t96        = t115_tmp * t75;
    t97        = b_t114_tmp * t77;
    t98        = t116_tmp * t77;
    t99        = t88_tmp * t77;
    t27        = t12 * t14 * t17;
    t75        = t27 * t32;
    t77        = t12 * t16 * t19;
    t110_tmp   = t77 * t32;
    t120       = (t92_tmp - 1.0) * (t27 * t28 + t75 * t36);
    t121       = (t92_tmp - 1.0) * (t77 * t28 + t110_tmp * t36);
    t27        = t15 * t18;
    t122 = t45 * (t27 * t22 * t29 * 2.0 + t27 * t23 * t29 * 2.0) + t46 * t78 * (t31 + -t56);
    t128       = t76 * t122;
    result_tmp = t75 * t46 * t78
                 - t45
                       * ((-((x11 * 2.0 + -(x21 * 2.0)) * t28) + t117_tmp * t22 * t29 * 2.0)
                          + t117_tmp * t23 * t29 * 2.0);
    b_result_tmp = -x21 * t11;
    t11          = -x23 * t13;
    t13          = -x22 * result_tmp;
    t117_tmp     = (t47_tmp * t28 + -t70) + t80_tmp * t36;
    result[0] = (((((((((t31 * x21 - t90) + t94) + t97) + t114) - t120) + t13) + t76 * result_tmp)
                  + t113_tmp * (t117_tmp - 1.0))
                 + b_result_tmp * t14 * t17 * t32)
                + t11 * t14 * t17 * t32;
    t12       = (t51_tmp * t28 + -t70) + t36 * t56;
    result[1] = (((((((t95 + t98) + t113) + t116) + t122 * x22) - t128)
                  - (t92_tmp - 1.0) * (t12 - 1.0))
                 + b_result_tmp * t15 * t18 * t32)
                + t11 * t15 * t18 * t32;
    t75 = t110_tmp * t46 * t78
          - t45
                * ((-((x13 * 2.0 + -(x23 * 2.0)) * t28) + t118_tmp * t22 * t29 * 2.0)
                   + t118_tmp * t23 * t29 * 2.0);
    t77 = -x22 * t75;
    t27 = (t55_tmp * t28 + -t70) + t88_tmp * t36;
    result[2] = (((((((((t31 * x23 - t91) + t96) + t99) + t115) - t121) + t77) + t76 * t75)
                  + t114_tmp * (t27 - 1.0))
                 + b_result_tmp * t16 * t19 * t32)
                + t11 * t16 * t19 * t32;
    result[3] =
        ((((((((((t80_tmp * x21 + b_t114_tmp * x23) + t90) - t94) - t97) - t114) + t120) + -t76 * result_tmp)
           + -x21 * t31)
          + t113_tmp)
         - t13)
        - t113_tmp * t117_tmp;
    result[4] =
        ((((((((b_t113_tmp * x21 + t116_tmp * x23) - (t92_tmp - 1.0)) - t95) - t98) - t113) - t116) + t128)
         + -x22 * t122)
        + (t92_tmp - 1.0) * t12;
    result[5] =
        ((((((((((t115_tmp * x21 + t88_tmp * x23) + t91) - t96) - t99) - t115) + t121) + -t76 * t75)
           + -x23 * t31)
          + t114_tmp)
         - t77)
        - t114_tmp * t27;
}

__host__ __device__ void pDmpx_pp(const double3&       x0,
                                  const double3&       x1,
                                  double               d_hatSqrt,
                                  __GEIGEN__::Vector6& pDmpx)
{
    pDmpx_pp(d_hatSqrt, x0.x, x0.y, x0.z, x1.x, x1.y, x1.z, pDmpx.v);
}

#endif